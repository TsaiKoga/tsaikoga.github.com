<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[TsaiKoga Blog]]></title>
  <link href="http://TsaiKoga.github.com/atom.xml" rel="self"/>
  <link href="http://TsaiKoga.github.com/"/>
  <updated>2017-03-10T16:07:10+08:00</updated>
  <id>http://TsaiKoga.github.com/</id>
  <author>
    <name><![CDATA[TsaiKoga]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[JQuery重要知识点]]></title>
    <link href="http://TsaiKoga.github.com/blog/2017/03/10/jqueryzhong-yao-zhi-shi-dian/"/>
    <updated>2017-03-10T15:14:00+08:00</updated>
    <id>http://TsaiKoga.github.com/blog/2017/03/10/jqueryzhong-yao-zhi-shi-dian</id>
    <content type="html"><![CDATA[<p>对于Jquery，用起来很像很简单；但是有些知识点经常会忘记。这里特别写一篇来巩固。</p>

<h3>加载：</h3>

<h4>关于 ready 和 onLoad 的区别</h4>

<p>两个不同点：</p>

<p>1)
只有文档完全下载到本地，才会触发<code>window.onload</code>事件，这意味着所有事件对于Javascript都是可以操作的。</p>

<p>通过<code>$(document).ready()</code>注册的事件处理程序，则会在 <strong>DOM</strong> 完全就绪并可以使用时调用。这意味着
所有元素对于脚本都是可以访问的。但不意味所有关联文件（例如DOM的图片）都已下载完毕。</p>

<p>换句话说：当HTML都下载完成别解析成为DOM树后，代码才可以运行。</p>

<p>2)
对于<code>onload</code>属性一次只能保存一个函数引用，所以不能再现有行为上添加新的行为。</p>

<p>对于<code>$(document).ready()</code>调用这方法每次都会向内部的行为队列添加新函数。当页面加载完成后，所有函数会被执行。按照注册他们的顺序依次执行。</p>

<br/>


<p>关于<code>$(document).ready()</code>结构，实际上是在基于<code>document</code>这个DOM元素构建成的JQuery对象上调用<code>ready()</code>方法。</p>

<p>实际上可写成：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span><span class="p">(</span><span class="nb">document</span><span class="p">).</span><span class="nx">ready</span><span class="p">({</span>
</span><span class='line'>  <span class="p">...</span> <span class="p">...</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>或写成：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span><span class="p">(</span><span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>  <span class="p">...</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>




<br/>


<hr />

<h3>事件：</h3>

<h4>事件捕获</h4>

<p>允许多个元素响应单击事件的策略</p>

<h4>事件冒泡</h4>

<p>当事件发生时，会首先发送给最具体的元素，在这个元素获得响应机会后，事件会 <strong>向上冒泡到更一般</strong> 的元素。</p>

<p><strong>如何解决事件冒泡副作用</strong></p>

<p>访问事件对象e</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">target</span> <span class="o">==</span> <span class="k">this</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="p">...</span> <span class="p">...</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>关于<code>event.stopPropagation()</code>阻止所有DOM响应这个事件，但是不能阻止默认操作;
必须要用<code>event.preventDefault()</code>来在操作前终止事件。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;switch&#39;</span><span class="p">).</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;click&#39;</span><span class="p">,</span> <span class="s1">&#39;button&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(){</span> <span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>


<p>相当于</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;switch&#39;</span><span class="p">).</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;click&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">){</span>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">target</span> <span class="o">==</span> <span class="s1">&#39;button&#39;</span><span class="p">){</span> <span class="p">}</span>
</span><span class='line'><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>


<p>模仿用户操作行为的方法 <code>trigger()</code> 它提供了和<code>on()</code>方法一样的简写方法。
像<code>click()</code>等on动作不带参数会自动触发。</p>

<hr />

<h3>属性值：</h3>

<h4>值回调</h4>

<p>把回调函数作为参数传递</p>

<h4>HTML 属性和 DOM 属性的区别</h4>

<p><strong>HTML属性值:</strong> 页面标记中放在引号的值</p>

<p><strong>DOM属性值:</strong> Javascript能存取的值，可以通过chrome的elements检查器查看properties</p>

<p><strong>不同点：</strong> 有些DOM名称和HTML不同，例如：className;
有些DOM属性HTML是没有的，DOM的<code>attr()</code>就没发操作他们。</p>

<p>测试DOM属性而非HTML属性才可确保跨浏览器的一致性。如：<code>prop()</code>来获取DOM属性值，而非<code>attr()</code></p>

<p>最大不同在操作表单值：DOM和HTML操作表单的名称很多不同，最好不用<code>prop()</code>和<code>attr()</code>，而用<code>val()</code></p>

<hr />

<h3>Ajax</h3>

<h4>单向数据传输：</h4>

<p>AHAH(async http and html)用load()</p>

<p>服务器返回的JSON是字符串，需要变成JS字面量；</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span><span class="p">.</span><span class="nx">getJSON</span><span class="p">(</span><span class="s1">&#39;.json&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">data</span><span class="p">){</span>
</span><span class='line'>  <span class="p">...</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>向页面注入脚本：</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span><span class="p">.</span><span class="nx">getScript</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>获取XML：</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;.xml&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="p">...</span>
</span><span class='line'><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>


<h4>双向数据传递：</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;a.php&#39;</span><span class="p">,</span> <span class="nx">args</span><span class="p">,</span> <span class="kd">function</span><span class="p">(){})</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">post</span><span class="p">(</span><span class="s1">&#39;a.php&#39;</span><span class="p">,</span> <span class="nx">args</span><span class="p">,</span> <span class="kd">function</span><span class="p">(){})</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">load</span><span class="p">(</span><span class="s1">&#39;a.php&#39;</span><span class="p">,</span> <span class="nx">args</span><span class="p">,</span> <span class="kd">function</span><span class="p">(){})</span>
</span></code></pre></td></tr></table></div></figure>


<p>load在包含数据对象参数时，会使用post方法</p>

<p>ajaxStart()回调，ajax请求开始且尚未进行任何其他传输时 和 read() 一样只能由$(document)调用</p>

<p>ajaxStop()回调，ajax最后一次请求结束时调用，和 read() 一样只能由$(document)调用</p>

<p>ajaxError()回调，参数是一个XMLHttpRequest的引用。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails 利用批量操作提速]]></title>
    <link href="http://TsaiKoga.github.com/blog/2016/08/21/rails-li-yong-pi-liang-cao-zuo-ti-su/"/>
    <updated>2016-08-21T14:29:00+08:00</updated>
    <id>http://TsaiKoga.github.com/blog/2016/08/21/rails-li-yong-pi-liang-cao-zuo-ti-su</id>
    <content type="html"><![CDATA[<h4><a href="#1.1">1.1 批量查找数据</a></h4>

<h5><a href="#1.2">1.2 操作代码</a></h5>

<h4><a href="#2.1">2.1 批量插入数据</a></h4>

<h5><a href="#2.2">2.2 INFILE文件插入数据</a></h5>

<h4><a href="#3.1">3.1 批量更改schema数据库</a></h4>

<h2 id="1.1">1.1 批量查找数据</h2>


<hr />

<p>由于之前一直在做后台的数据，其中有个任务是关于 财务库存 的页面.</p>

<blockquote><p>这个“财务库存”有产品和日期选项，您可以通过选择产品，查看它在某段时间内的库存价格等情况。</p>

<p>将采购入库单数据[PurchaseOrderBill]，销售出库单数据[OutStorageOrder]，异常取货和仓库调整单数据整合在一个页面；
根据日期排序来显示这个页面的内容，以及这些内容的成本价格变化，这里的价格根据这些取出来的数据进行排列后再进行运算得出。</p>

<p>项目中有近5w条产品记录，又要将“采购入库单”和“销售出库单”与 产品product进行关联查找，耗时挺大的。</p>

<p>这时候公司那边说要提供一次性下载所有产品的财务库存数据，不过不需要显示价格变化情况，直接显示最后一条价格结果就行了。</p></blockquote>

<p>近5w条的 product 产品关联(joins/includes)的单据进行计算价格，然后显示结果。
如何加快查找速度呢？</p>

<p>答案是进行 <strong>批量</strong> 查找。</p>

<h3 id="1.2">1.2 操作代码</h3>


<p>用代码说明吧，首先当然对于这么庞大的数据量，要进行 <strong>分页</strong> 处理：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">per_page</span> <span class="o">=</span> <span class="mi">100</span>
</span><span class='line'><span class="n">page</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'><span class="n">total_page</span> <span class="o">=</span> <span class="p">(</span><span class="no">Product</span><span class="o">.</span><span class="n">count</span><span class="o">.</span><span class="n">to_f</span> <span class="o">/</span> <span class="n">per_page</span><span class="p">)</span><span class="o">.</span><span class="n">ceil</span>
</span></code></pre></td></tr></table></div></figure>


<p>每一页进行 <strong>批量</strong> 操作：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">total_page</span><span class="o">.</span><span class="n">times</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">products</span> <span class="o">=</span> <span class="no">Product</span><span class="o">.</span><span class="n">limit</span><span class="p">(</span><span class="n">per_page</span><span class="p">)</span><span class="o">.</span><span class="n">offset</span><span class="p">(</span><span class="n">page</span> <span class="o">*</span> <span class="n">per_page</span><span class="p">)</span>
</span><span class='line'>  <span class="n">bill_items</span> <span class="o">=</span> <span class="n">bill_inventory_valuation_details</span> <span class="n">products</span>        <span class="c1"># 符合条件的采购入库单数据，此方法的查找也必须对 products 进行批量查找</span>
</span><span class='line'>  <span class="n">sell_items</span> <span class="o">=</span> <span class="n">sell_inventory_valuation_details</span> <span class="n">products</span>        <span class="c1"># 符合条件的销售出库数据</span>
</span><span class='line'>  <span class="n">package_items</span> <span class="o">=</span> <span class="n">package_inventory_valuation_details</span> <span class="n">products</span>  <span class="c1"># 异常出库数据</span>
</span><span class='line'>  <span class="n">adjust</span> <span class="o">=</span> <span class="n">adjust_inventory_valuation_details</span> <span class="n">products</span>          <span class="c1"># 调整仓库数据</span>
</span><span class='line'>  <span class="n">products</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">product</span><span class="o">|</span>
</span><span class='line'>    <span class="n">datas</span> <span class="o">=</span> <span class="o">[]</span>
</span><span class='line'>    <span class="n">datas</span> <span class="o">+=</span> <span class="n">bill_items</span><span class="o">[</span><span class="n">product</span><span class="o">.</span><span class="n">id</span><span class="o">].</span><span class="n">map</span><span class="p">{</span><span class="o">|</span><span class="n">item</span><span class="o">|</span> <span class="p">{</span><span class="nb">id</span><span class="p">:</span> <span class="n">item</span><span class="o">.</span><span class="n">id</span><span class="p">,</span> <span class="ss">quantity</span><span class="p">:</span> <span class="n">item</span><span class="o">.</span><span class="n">quantity</span><span class="p">,</span> <span class="ss">price</span><span class="p">:</span> <span class="n">item</span><span class="o">.</span><span class="n">price</span><span class="p">}}</span>
</span><span class='line'>    <span class="c1"># 对查出的数据进行处理，构造最终结果</span>
</span><span class='line'>    <span class="o">.</span><span class="n">.</span><span class="o">.</span> <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>这样原先没有进行批量操作会耗时接近12个小时，使用了批量操作后仅为2个多小时。</p>

<h2 id="2.1">2.1 批量插入数据</h2>


<hr />

<p>当你要对大量数据进行插入数据库的操作时，一条条插入将是及其愚蠢的行为。如何进行批量插入呢？</p>

<p>可以先看看这篇文章：<a href="https://www.coffeepowered.net/2009/01/23/mass-inserting-data-in-rails-without-killing-your-performance/">Mass inserting data in Rails without killing your performance</a></p>

<p>这篇文章提到 Rails 快速插入数据的四种方法：</p>

<ol>
<li><p>Use transactions</p></li>
<li><p>Get down and dirty with the raw SQL</p></li>
<li><p>A single mass insert</p></li>
<li><p>Use INSERT statements with multiple VALUES lists with ar-extensions OR activerecord-import</p></li>
</ol>


<p>第四种方式是AR方式的70倍左右，而公司后台使用的正是 activerecord-import,
做法很简单，先将数据创建 <strong>存于内存</strong>，然后批量 import <strong>插入</strong> 数据库：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="p">(</span><span class="n">controller</span><span class="o">.</span><span class="n">action_methods</span><span class="o">.</span><span class="n">to_a</span> <span class="o">-</span> <span class="n">excepts</span><span class="p">)</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">action</span><span class="o">|</span>
</span><span class='line'>  <span class="n">need_imports</span> <span class="o">&lt;&lt;</span> <span class="no">Permission</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="ss">subject</span><span class="p">:</span> <span class="n">subject</span><span class="p">,</span> <span class="ss">action</span><span class="p">:</span> <span class="n">action</span><span class="p">,</span> <span class="ss">description</span><span class="p">:</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">action</span><span class="o">.</span><span class="n">humanize</span><span class="si">}</span><span class="s2"> of </span><span class="si">#{</span><span class="n">subject</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="no">Permission</span><span class="o">.</span><span class="n">import</span> <span class="n">need_imports</span>
</span></code></pre></td></tr></table></div></figure>


<p>这样已经很快了，还有更快的吗？</p>

<h3 id="2.2">2.2 INFILE文件插入数据 </h3>


<p>From MySQL Doc:</p>

<blockquote><p>When loading a table from a text file, use LOAD DATA INFILE. This is usually 20 times faster than using INSERT statements</p></blockquote>

<p>SQL语句：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="p">(</span><span class="mi">15955</span><span class="o">.</span><span class="mi">1</span><span class="n">ms</span><span class="p">)</span>  <span class="no">LOAD</span> <span class="no">DATA</span> <span class="no">LOCAL</span> <span class="no">INFILE</span> <span class="s1">&#39;/Users/tsaikoga/out_storage_orders.txt&#39;</span>
</span><span class='line'><span class="no">REPLACE</span> <span class="no">INTO</span> <span class="no">TABLE</span> <span class="n">out_storage_orders</span> <span class="no">FIELDS</span> <span class="no">TERMINATED</span> <span class="no">BY</span> <span class="s1">&#39;,&#39;</span> <span class="p">(</span><span class="sb">`id`</span><span class="p">,</span><span class="sb">`warehouse_id`</span><span class="p">,</span><span class="sb">`destination_id`</span><span class="p">,</span><span class="sb">`user_id`</span><span class="p">,</span><span class="sb">`out_storage_order_type`</span><span class="p">,</span><span class="sb">`out_storage_reason_type`</span><span class="p">,</span><span class="sb">`status`</span><span class="p">,</span><span class="sb">`quantity`</span><span class="p">,</span><span class="sb">`package_id`</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>插入行数：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>wc -l &lt; /Users/tsaikoga/out_storage_orders.txt
</span><span class='line'>100000
</span></code></pre></td></tr></table></div></figure>




<h3 id="3.1">3.1 批量更改schema数据库</h3>


<hr />

<p>你有没有发现，当你某张表的数据非常非常多的时候，你想要更改其中一个字段的类型，然后执行 migrate ；
执行时间非常长，你厌倦了等待，只好 ctrl+c 撤销了migrate，但是实际上数据库中的记录已经有很大一部分改变了字段的类型。
这时候你想再migrate，会出现这种类型的字段已存在的提示。（当然你可以利用mysql的界面工具或直接到mysql更改字段类型进行拯救）</p>

<p>这里提供一个 Rails 的方法，将数据大批量进行更改。
比方说，以下是一段更改 orders 表的 shipping_first_name shipping_last_name 名称的方法：</p>

<pre><code>rename_column :orders, "shipping_first_name", "origin_shipping_first_name"
rename_column :orders, "shipping_last_name", "origin_shipping_last_name"
</code></pre>

<p>执行migrate用时非常长，还不如使用如下代码：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">RenameOldOrderAddressRelatedColumn</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Migration</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">up</span>
</span><span class='line'>    <span class="n">change_table</span><span class="p">(</span><span class="ss">:orders</span><span class="p">,</span> <span class="ss">:bulk</span> <span class="o">=&gt;</span> <span class="kp">true</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">t</span><span class="o">|</span>
</span><span class='line'>      <span class="n">t</span><span class="o">.</span><span class="n">rename</span> <span class="ss">:order_status_code_id</span><span class="p">,</span> <span class="ss">:state</span>
</span><span class='line'>      <span class="n">t</span><span class="o">.</span><span class="n">remove</span> <span class="ss">:in_process</span>
</span><span class='line'>      <span class="o">[</span><span class="ss">:first_name</span><span class="p">,</span>
</span><span class='line'>       <span class="ss">:last_name</span><span class="p">,</span>
</span><span class='line'>       <span class="ss">:country</span><span class="p">,</span>
</span><span class='line'>       <span class="ss">:state</span><span class="o">].</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">column</span><span class="o">|</span>
</span><span class='line'>        <span class="n">t</span><span class="o">.</span><span class="n">rename</span> <span class="s2">&quot;shipping_</span><span class="si">#{</span><span class="n">column</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">,</span> <span class="s2">&quot;origin_shipping_</span><span class="si">#{</span><span class="n">column</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>以上代码只生成一句 SQL 语句，数据库迁移时间大大减少。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">ALTER</span> <span class="no">TABLE</span> <span class="sb">`orders`</span> <span class="no">DROP</span> <span class="sb">`in_process`</span><span class="p">,</span> <span class="no">CHANGE</span> <span class="sb">`shipping_first_name`</span> <span class="sb">`origin_shipping_first_name`</span> <span class="n">varchar</span><span class="p">(</span><span class="mi">50</span><span class="p">)</span> <span class="no">DEFAULT</span> <span class="no">NULL</span><span class="p">,</span> <span class="no">CHANGE</span> <span class="sb">`shipping_last_name`</span> <span class="sb">`origin_shipping_last_name`</span> <span class="n">varchar</span><span class="p">(</span><span class="mi">50</span><span class="p">)</span> <span class="no">DEFAULT</span> <span class="no">NULL</span><span class="p">,</span> <span class="no">CHANGE</span> <span class="sb">`shipping_country`</span> <span class="sb">`origin_shipping_country`</span> <span class="n">varchar</span><span class="p">(</span><span class="mi">255</span><span class="p">)</span> <span class="no">DEFAULT</span> <span class="no">NULL</span><span class="p">,</span> <span class="no">CHANGE</span> <span class="sb">`shipping_state`</span> <span class="sb">`origin_shipping_state`</span> <span class="n">varchar</span><span class="p">(</span><span class="mi">255</span><span class="p">)</span> <span class="no">DEFAULT</span> <span class="no">NULL</span><span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span></code></pre></td></tr></table></div></figure>


<p>相关文档：</p>

<p><a href="http://dev.mysql.com/doc/refman/5.5/en/load-data.html">http://dev.mysql.com/doc/refman/5.5/en/load-data.html</a>
<a href="http://dev.mysql.com/doc/refman/5.5/en/insert-speed.html">http://dev.mysql.com/doc/refman/5.5/en/insert-speed.html</a></p>

<p>总结，对于大数据一定要进行批量处理。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[公司项目中 Git 的使用方法]]></title>
    <link href="http://TsaiKoga.github.com/blog/2016/08/06/gong-si-xiang-mu-zhong-git-de-shi-yong-fang-fa/"/>
    <updated>2016-08-06T16:10:00+08:00</updated>
    <id>http://TsaiKoga.github.com/blog/2016/08/06/gong-si-xiang-mu-zhong-git-de-shi-yong-fang-fa</id>
    <content type="html"><![CDATA[<p>Git 是开源的分布式版本控制器，用于敏捷高效地处理任何或小或大的项目。</p>

<p>它被应用到很多 Rails 开发项目中。 公司对于 Git 也有适合的一套用法。</p>

<h4>背景</h4>

<hr />

<p>首先我来介绍一下公司的大致情况，然后阐述一下公司如何用Git进行工作：</p>

<p>我们公司是一家外企电商平台，产品在国外销售，技术部在中国，所以会有时差。面对这类问题，我们技术部这边对项目进行开发完善，
确定每周二的一个时间点为项目上线时间（因为这个时间点用户量极少），所有大改动和新功能都会在本周的这个时间点上线，我们称之为【常规上线】。
对于项目突然出现的 Bug ，或是上线后出现的 Bug，我们也会更改然后上线，这次上线属于当天的紧急上线，我们称之为【紧急上线】，取名为Hot Fix。</p>

<p>OK，接着来看看我们是如何使用 Git 进行如上的上线操作的。</p>

<h3>操作流程</h3>

<hr />

<h4>分支介绍</h4>

<p>先来看看我们项目主要的分支吧：</p>

<ul>
<li><p>master 主分支，用来部署周二的常规上线。</p></li>
<li><p>release 发布分支，这个分支的代码一定是生产环境下的分支（代码最新），用于切除 Hotfix 分支，作紧急上线处理。</p></li>
<li><p>testing 常规上线的测试分支，这里的代码用于测试，周二常规上线后可以删除后重建；不与master相同，测试完此分支与master分支无关；
用于当测试出现 BUG，修复很多次，最后测试通过；本地可以将最后通过的commits都合并为一个commit提交到master，保证commit的整洁，减少冲突。</p></li>
</ul>


<h4>常规上线</h4>

<p>接着，我们来看看如何常规上线，假设这周我有一个任务要完成，从 master 切出一个分支叫做 develop</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>git checkout -b develop
</span><span class='line'>git commit -m <span class="s2">&quot;First Commit&quot;</span>
</span><span class='line'>git push origin develop
</span></code></pre></td></tr></table></div></figure>


<p>然后周二正式上线，我们周一先将自己的分支本地测完，然后“合并”到公共的 testing 分支【记住是merge哦，不是rebase】；</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>git checkout testing                <span class="c"># from develop to testing</span>
</span><span class='line'><span class="c"># git merge develop                 # 这里一般是发到 github 上给别人 pr，或是发到gitlab上给别人 mr</span>
</span><span class='line'>git push origin testing             <span class="c"># 如果是通过 gitlab/github mr/pr 后，这里将是 git pull origin testing</span>
</span><span class='line'><span class="nv">BRANCH</span><span class="o">=</span>testing cap staging deploy   <span class="c"># 这里的 BRANCH 是通过 .bashrc 设置环境变量，deploy/staging.rb 中 set :branch, ENV[&quot;BRANCH&quot;] || &quot;master&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<h4>注意事项 （merge 和 rebase）</h4>

<blockquote><p>有个问题需要注意，曾经我将我的代码rebase到testing上；</p>

<pre><code>git checkout testing
git rebase develop
</code></pre>

<p>rebase 会将 testing 和 develop 两个分支中的commit整理成 testing 一个分支，但是当两个分支中有一个commit发生冲突的时候
<img src="http://TsaiKoga.github.com/images/posts/2016-08-06/git-rebase.png" title="rebase的图示" alt="git rebase" /></p>

<p>这个冲突如上图，来自于 develop 的 commit，你将它 rebase 到了 testing 上，正当你觉得一切顺利的时候；</p>

<p>你想要 push 你的代码到远程的 testing，你会发现需要 pull 代码，然而当你 pull 代码后，你又发现原来的冲突，然后解决冲突，然后再 pull 代码，这样无限循环下去&hellip;</p>

<p>这是因为远程的 testing 就是没解决冲突前的 testing 分支，你 rebase 后解决冲突的 commit 是 develop 的commit，这样你再次拉代码下来，冲突又再次出现了。</p></blockquote>

<p>所以，使用“merge”！这里 merge 后，develop 的 commit3 会与 testing 产生冲突，解决完冲突后，merge 不像 rebase 会把解决完的放在原来的 commit3 上，而是你需要
新提交一个解决冲突后的 commit【我们叫它commit4】，这样就 pull 的代码遇到 commit4，发现已被解决，就没有冲突了。</p>

<h4>紧急上线 Hotfix</h4>

<p>看到上面的常规上线，我们结束了周二的工作任务；周三来了，你来到办公室，发现昨天上线的内容还需要修改，并且必须在今天上线。这时候我们需要如下分支：</p>

<ul>
<li><p>release 分支， 周二从 master 分支部署到正式服务器后，将 master 代码 merge release 分支，release上的代码即代表着线上的最新代码。</p></li>
<li><p>hotfix160803 分支，从名字可以看出 hotfix + 日期，这个是从 release 切出来的，像testing分支一样，让所有要紧急发布的程序员将今天自己的分支合到这里进行测试。</p></li>
</ul>


<p>具体操作就是
1. 首先我们从 release 下载线上的代码 <code>git pull origin release:release</code>
2. release 分支切出一个 hotfix 分支 <code>git checkout -b hotfix160803</code>
3. 提交 hotfix160803 到远程，让大家可以合并代码
4. 建立自己的紧急开发分支 <code>git checkout -b hotfix-dev</code></p>

<p>如果已经有人提交了hotfix160803，则只需要 pull 下来，然后建立自己的分支开发。</p>

<p>接下来改完代码后的操作其实和常规上线一样。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>git push hotfix-dev
</span></code></pre></td></tr></table></div></figure>


<p>gitlab 或 github 上 mr 或 pr</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>git checkout hotfix160803
</span><span class='line'>git pull hotfix160803 <span class="c"># 将合并后的代码拉下来</span>
</span><span class='line'><span class="nv">BRANCH</span><span class="o">=</span>hotfix160803 cap staging deploy
</span></code></pre></td></tr></table></div></figure>


<p>测试完毕后，将 hotfix160803 merge 到 release，发布release。</p>

<p>忙碌的一天就结束了。</p>

<h4>关于 Capistrano 的代码</h4>

<p>你的代码放在 gitlab 上面，项目运行在某个服务器A上，你将代码提交到 gitlab 上，然后 cap deploy；
其实cap deploy 是通过 clone 你的 gitlab 上的代码到服务器A上的</p>

<p>关于抽出逻辑，制作一个功能，其他传入简单参数，
关于方法里面，只有if，那干脆将if放方法外面；
关于需求，通过每个条件都列出来检查。
对于更改数据，记住留份log作为备份，将数据记录下来，以便回滚。</p>

<h4>经常使用的 Git 命令</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>git checkout -b testing         <span class="c"># 新建分支testing 并切换到上面</span>
</span><span class='line'>
</span><span class='line'>git commit -m <span class="s2">&quot;Koga&quot;</span>            <span class="c"># commit</span>
</span><span class='line'>git commit --amend              <span class="c"># 将 add 的新修改也提交到之前的commit，并且可以更改commit名称</span>
</span><span class='line'>
</span><span class='line'>git pull origin master:master   <span class="c"># 拉远程的master到本地master，如果本地没有，则新建并拉代码下来，并且所在的分支也会拉master的内容下来，可以将其add 后checkout掉</span>
</span><span class='line'>git push origin master          <span class="c"># 提交到远程master分支，如果git push -f origin master，将强制提交</span>
</span><span class='line'>
</span><span class='line'>git rebase master               <span class="c"># 将当前分支与master合成一条</span>
</span><span class='line'>git reset HEAD~1                <span class="c"># 重置 上一个 commit，但是修改内容还是保留，只是还没commit</span>
</span><span class='line'>git merge master                <span class="c"># 将master合并到当前分支</span>
</span><span class='line'>
</span><span class='line'>git branch                      <span class="c"># 显示所有分支</span>
</span><span class='line'>git branch -D testing           <span class="c"># 删除 testing 分支</span>
</span><span class='line'>git branch -m dev               <span class="c"># 更改分支名称</span>
</span><span class='line'>
</span><span class='line'>git stash                       <span class="c"># 将更改内容暂存</span>
</span><span class='line'>git stash pop                   <span class="c"># 将暂存内容弹出</span>
</span><span class='line'>git stash clear                 <span class="c"># 清除暂存内容</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Atom 快捷键使用大全]]></title>
    <link href="http://TsaiKoga.github.com/blog/2016/05/06/atomkuai-jie-jian-shi-yong-da-quan/"/>
    <updated>2016-05-06T11:36:00+08:00</updated>
    <id>http://TsaiKoga.github.com/blog/2016/05/06/atomkuai-jie-jian-shi-yong-da-quan</id>
    <content type="html"><![CDATA[<h3><a href="#1">1. 快捷键标识</a></h3>

<h3><a href="#2">2. 内容</a></h3>

<h2 id="1">快捷键标识</h2>


<p>⌘ : Command key</p>

<p>⌃ : Control key</p>

<p>⌫ : Delete key</p>

<p>← : Left arrow key</p>

<p>→ : Right arrow key</p>

<p>↑ : Up arrow key</p>

<p>↓ : Down arrow key</p>

<p>⌥ : Option or Alt key</p>

<p>↩ : Return or Enter key</p>

<p>⇧ : Shift key</p>

<br/>




<h2 id="2">内容</h2>


<p><a href="#2.1">2.1. 命令板</a></p>

<p><a href="#2.2">2.2. 配置</a></p>

<p><a href="#2.3">2.3. 项目任务</a></p>

<p><a href="#2.4">2.4. 自动补全</a></p>

<p><a href="#2.5">2.5. 书签</a></p>

<p><a href="#2.6">2.6. 括号 </a></p>

<p><a href="#2.7">2.7. 代码折叠</a></p>

<p><a href="#2.8">2.8. 代码导航和管理</a></p>

<p><a href="#2.9">2.9. 字符变化</a></p>

<p><a href="#2.10">2.10. 注释</a></p>

<p><a href="#2.11">2.11. 编辑器视图任务</a></p>

<p><a href="#2.12">2.12. 文件任务</a></p>

<p><a href="#2.13">2.13. 查找和替换</a></p>

<p><a href="#2.14">2.14. 字体任务</a></p>

<p><a href="#2.15">2.15. 语法</a></p>

<p><a href="#2.16">2.16. 搜索任务</a></p>

<br/>




<h3 id="2.1">命令板</h3>


<hr />

<table style="padding: 10px; width: 100%;">
  <thead>
    <tr>
      <th>任务</th>
      <th>按键</th>
    </tr>
  </thead>

  <tbody>
    <tr>
      <td>打开命令板</td>
      <td>⌘-⇧-p</td>
    </tr>
  </tbody>
</table>




<br/>


<h3 id="2.2">配置</h3>


<hr />

<table style="padding: 10px; width: 100%;">
  <thead>
    <tr>
      <th>任务</th>
      <th>按键</th>
    </tr>
  </thead>

  <tbody>
    <tr>
      <td>打开配置编辑器</td>
      <td>⌘-,</td>
    </tr>
  </tbody>
</table>




<br/>


<h3 id="2.3">项目任务</h3>


<hr />

<table style="padding: 10px; width: 100%;">
  <thead>
    <tr>
      <th>任务</th>
      <th>按键</th>
    </tr>
  </thead>

  <tbody>
    <tr>
      <td>隐藏应用</td>
      <td>⌘-h</td>
    </tr>
    <tr>
      <td>隐藏其他应用</td>
      <td>⌥-⌘-h</td>
    </tr>
    <tr>
      <td>最小化应用</td>
      <td>⌘-m</td>
    </tr>
    <tr style="color: red;">
      <td>新建文件</td>
      <td>⌘-n</td>
    </tr>
    <tr>
      <td>新建窗口</td>
      <td>⌘-⇧-n</td>
    </tr>
    <tr>
      <td>打开应用</td>
      <td>⌘-o</td>
    </tr>
    <tr>
      <td>打开Dev</td>
      <td>⇧-⌘-o</td>
    </tr>
    <tr>
      <td>退出Atom</td>
      <td>⌘-q</td>
    </tr>
  </tbody>
</table>




<br/>


<h3 id="2.4">自动补全</h3>


<hr />

<table style="padding: 10px; width: 100%;">
  <thead>
    <tr>
      <th>任务</th>
      <th>按键</th>
    </tr>
  </thead>

  <tbody>
    <tr>
      <td>打开配置编辑器</td>
      <td>⌘-,</td>
    </tr>
  </tbody>
</table>




<br/>


<h3 id="2.5">书签</h3>


<hr />

<table style="padding: 10px; width: 100%;">
  <thead>
    <tr>
      <th>任务</th>
      <th>按键</th>
    </tr>
  </thead>

  <tbody>
    <tr>
      <td>切换书签</td>
      <td>⌘-F2</td>
    </tr>
    <tr>
      <td>查看所有书签</td>
      <td>⌃-F2</td>
    </tr>
    <tr>
      <td>跳到下一个书签</td>
      <td>F2</td>
    </tr>
    <tr>
      <td>跳到上一个书签</td>
      <td>⇧-F2</td>
    </tr>
    <tr>
      <td>清除所有书签</td>
      <td>⌘-⇧-F2</td>
    </tr>
  </tbody>
</table>




<br/>


<h3 id="2.6">括号</h3>


<hr />

<table style="padding: 10px; width: 100%;">
  <thead>
    <tr>
      <th>任务</th>
      <th>按键</th>
    </tr>
  </thead>

  <tbody>
    <tr>
      <td>寻找匹配的括号</td>
      <td>⌃-m</td>
    </tr>
  </tbody>
</table>




<br/>


<h3 id="2.7">代码折叠</h3>


<hr />

<table style="padding: 10px; width: 100%;">
  <thead>
    <tr>
      <th>任务</th>
      <th>按键</th>
    </tr>
  </thead>

  <tbody>
    <tr style="color: red;">
      <td>合上代码</td>
      <td>⌥-⌘-[</td>
    </tr>
    <tr style="color: red;">
      <td>展开代码</td>
      <td>⌥-⌘-]</td>
    </tr>
    <tr>
      <td>在缩排第N级合上代码</td>
      <td>⌘-k cmd-N</td>
    </tr>
    <tr>
      <td>合上所选的文本</td>
      <td>⌥-⌘-⌃-f</td>
    </tr>
    <tr style="color: red;">
      <td>展开所有代码</td>
      <td>⌥-⌘-}</td>
    </tr>
  </tbody>
</table>




<br/>


<h3 id="2.8">代码导航和管理</h3>


<hr />

<table style="padding: 10px; width: 100%;">
  <thead>
    <tr>
      <th>任务</th>
      <th>按键</th>
    </tr>
  </thead>

  <tbody>
    <tr>
      <td>裁剪到行末</td>
      <td>⌃-k</td>
    </tr>
    <tr>
      <td>删除到单词起始位</td>
      <td>⌥-⌫</td>
    </tr>
    <tr>

      <td>删除到单词末尾</td>
      <td>⌥-d</td>
    </tr>
    <tr>
      <td>删除行</td>
      <td>⌃-⇧-k</td>
    </tr>
    <tr>
      <td>复制行</td>
      <td>⌘-⇧-d</td>
    </tr>
    <tr>
      <td>跳到行</td>
      <td>⌃-g</td>
    </tr>
    <tr>
      <td>跳到匹配的括号</td>
      <td>⌃-m</td>
    </tr>
    <tr>
      <td>缩进所选文字</td>
      <td>⌘-]</td>
    </tr>
    <tr>
      <td>前进所选文字</td>
      <td>⌘-[</td>
    </tr>
    <tr>
      <td>加入行</td>
      <td>⌘-j</td>
    </tr>
    <tr>
      <td>移动单词到开头</td>
      <td>⌥-b</td>
    </tr>
    <tr>
      <td>移动单词到末尾</td>
      <td>⌥-f</td>
    </tr>
    <tr>
      <td>移动到行起始位</td>
      <td>⌃-a</td>
    </tr>
    <tr>
      <td>移动到行末</td>
      <td>⌃-e</td>
    </tr>
    <tr>
      <td>移动行到上面</td>
      <td>⌘-⌃-↑</td>
    </tr>
    <tr>
      <td>移动行到下面</td>
      <td>⌘-⌃-↓</td>
    </tr>
    <tr>
      <td>移动文件到顶部</td>
      <td>⌘-↑</td>
    </tr>
    <tr>
      <td>移动文件到底部</td>
      <td>⌘-↓</td>
    </tr>
    <tr>
      <td>移动到行的一个字符</td>
      <td>⌘-←</td>
    </tr>
    <tr>
      <td>移动到行的最后一个字符</td>
      <td>⌘-→</td>
    </tr>
    <tr>
      <td>移动左边的字符</td>
      <td>⌘-⌃-b</td>
    </tr>
    <tr>
      <td>移动右边的字符</td>
      <td>⌘-⌃-f</td>
    </tr>
    <tr>
      <td>移动到单词的开头</td>
      <td>⌥-⇧-b</td>
    </tr>
    <tr>
      <td>移动到单词的末尾</td>
      <td>⌥-⇧-f</td>
    </tr>
    <tr>
      <td>移动整个单词</td>
      <td>⌃-⇧-w</td>
    </tr>
    <tr>
      <td>选择到行的第一个字符</td>
      <td>⌥-⇧-a</td>
    </tr>
    <tr>
      <td>选择到行的最后一个字符</td>
      <td>⌥-⇧-e</td>
    </tr>
    <tr>
      <td>选择到相同的位置</td>
      <td>⌥-⇧-n</td>
    </tr>
    <tr>
      <td>选择到上一行相同的位置</td>
      <td>⌥-⇧-p</td>
    </tr>
    <tr>
      <td>选择到文件头</td>
      <td>⌘-⇧-↑</td>
    </tr>
    <tr>
      <td>选择到文件尾</td>
      <td>⌘-⇧-↓</td>
    </tr>
    <tr>
      <td>选择全部</td>
      <td>⌘-a</td>
    </tr>
    <tr>
      <td>选择到下一个</td>
      <td>⌘-d</td>
    </tr>
    <tr>
      <td>选择行</td>
      <td>⌘-L</td>
    </tr>
    <tr>
      <td>切换注释</td>
      <td>⌘-/</td>
    </tr>
  </tbody>
</table>




<br/>


<h3 id="2.9">字符变化</h3>


<hr />

<table style="padding: 10px; width: 100%;">
  <thead>
    <tr>
      <th>任务</th>
      <th>按键</th>
    </tr>
  </thead>

  <tbody>
    <tr style="color: red;">
      <td>将Tab变成空格</td>
      <td>⌥-⌘-[</td>
    </tr>
    <tr style="color: red;">
      <td>将空格变成Tab</td>
      <td>⌥-⌘-]</td>
    </tr>
    <tr>
      <td>变成大写</td>
      <td>⌘-k-u</td>
    </tr>
    <tr>
      <td>变成小写</td>
      <td>⌘-k-L</td>
    </tr>
  </tbody>
</table>




<br/>


<h3 id="2.10">注释</h3>


<hr />

<table style="padding: 10px; width: 100%;">
  <thead>
    <tr>
      <th>任务</th>
      <th>按键</th>
    </tr>
  </thead>

  <tbody>
    <tr style="color: red;">
      <td>切换注释</td>
      <td>⌘-/</td>
    </tr>
  </tbody>
</table>




<br/>


<h3 id="2.11">编辑器视图任务</h3>


<hr />

<table style="padding: 10px; width: 100%;">
  <thead>
    <tr>
      <th>任务</th>
      <th>按键</th>
    </tr>
  </thead>

  <tbody>
    <tr>
      <td>垂直拆分面板</td>
      <td>⌘-k-↓</td>
    </tr>
    <tr>
      <td>水平拆分面板</td>
      <td>⌘-k-→</td>
    </tr>
    <tr>
      <td>垂直导航面板</td>
      <td>⌘-k ⌘-↓</td>
    </tr>
    <tr>
      <td>水平导航面板</td>
      <td>⌘-k ⌘-→</td>
    </tr>
    <tr>
      <td>切换全屏</td>
      <td>⌃-⌘-f</td>
    </tr>
    <tr style="color: red;">
      <td>切换树</td>
      <td>⌘-\</td>
    </tr>
  </tbody>
</table>




<br/>


<h3 id="2.12">文件任务</h3>


<hr />

<table style="padding: 10px; width: 100%;">
  <thead>
    <tr>
      <th>任务</th>
      <th>按键</th>
    </tr>
  </thead>

  <tbody>
    <tr>
      <td>模糊搜索文件</td>
      <td>⌘-t</td>
    </tr>
    <tr>
      <td>寻找并打开文件</td>
      <td>⌘-b</td>
    </tr>
    <tr>
      <td>找最近更改但是还未跟踪的文件（git）</td>
      <td>⌘-⇧-b</td>
    </tr>
    <tr>
      <td>打开树</td>
      <td>⌃-0</td>
    </tr>
    <tr>
      <td>切换到树</td>
      <td>⌘-&#92;</td>
    </tr>
    <tr style="color: red;">
      <td>增加文件</td>
      <td>a</td>
    </tr>
    <tr style="color: red;">
      <td>移动文件</td>
      <td>m</td>
    </tr>
    <tr style="color: red;">
      <td>删除文件</td>
      <td>⌫</td>
    </tr>
    <tr>
      <td>重新打开文件</td>
      <td>⌘-⇧-t</td>
    </tr>
  </tbody>
</table>




<br/>


<h3 id="2.13">查找和替换</h3>


<hr />

<table style="padding: 10px; width: 100%;">
  <thead>
    <tr>
      <th>任务</th>
      <th>按键</th>
    </tr>
  </thead>

  <tbody>
    <tr>
      <td>在当前文件查找字符串</td>
      <td>⌘-f</td>
    </tr>
    <tr>
      <td>整个项目中查找字符串</td>
      <td>⇧-⌘-f</td>
    </tr>
    <tr>
      <td>跳到匹配的字符串</td>
      <td>⌘-g</td>
    </tr>
    <tr style="color: red;">
      <td>跳到前面匹配的字符串</td>
      <td>⇧-⌘-g</td>
    </tr>
    <tr>
      <td>跳到后面匹配的字符串</td>
      <td>⌘-d</td>
    </tr>
    <tr style="color: red;">
      <td>选择所有匹配的字符串</td>
      <td>⌃-⌘-g</td>
    </tr>
    <tr>
      <td>替换当前文件的字符串</td>
      <td>⌥-⌘-f</td>
    </tr>
  </tbody>
</table>




<br/>




<h3 id="2.14">字体任务</h3>


<hr />

<table style="padding: 10px; width: 100%;">
  <thead>
    <tr>
      <th>任务</th>
      <th>按键</th>
    </tr>
  </thead>

  <tbody>
    <tr>
      <td>增加字体大小</td>
      <td>cmd-+</td>
    </tr>
    <tr>
      <td>减少字体大小</td>
      <td>cmd—</td>
    </tr>
  </body>
</table>




<br/>




<h3 id="2.15">语法</h3>


<hr />

<table style="padding: 10px; width: 100%;">
  <thead>
    <tr>
      <th>任务</th>
      <th>按键</th>
    </tr>
  </thead>

  <tbody>
    <tr>
      <td>选择语法</td>
      <td>⌃-⇧-L</td>
    </tr>
  </tbody>
</table>




<br/>




<h3 id="2.16">搜索任务</h3>


<hr />

<table style="padding: 10px; width: 100%;">
  <thead>
    <tr>
      <th>任务</th>
      <th>按键</th>
    </tr>
  </thead>

  <tbody>
    <tr>
      <td>搜索符号</td>
      <td>⌘-r</td>
    </tr>
    <tr>
      <td>整个项目中搜索符号</td>
      <td>⌘-⇧-r</td>
    </tr>
  </tbody>
</table>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Routing]]></title>
    <link href="http://TsaiKoga.github.com/blog/2015/08/03/routing/"/>
    <updated>2015-08-03T14:55:00+08:00</updated>
    <id>http://TsaiKoga.github.com/blog/2015/08/03/routing</id>
    <content type="html"><![CDATA[<h3>目录：</h3>

<h4><a href="#2.1">2.1 路由的两个目标</a></h4>

<h4><a href="#2.2">2.2 routes.rb文件</a></h4>

<h5><a href="#2.2.1">2.2.1 路由规则</a></h5>

<h5><a href="#2.2.2">2.2.2 限制请求方法</a></h5>

<h5><a href="#2.2.3">2.2.3 URL 模式</a></h5>

<h5><a href="#2.2.4">2.2.4 段键</a></h5>

<h5><a href="#2.2.5">2.2.5 聚焦于id字段</a></h5>

<h5><a href="#2.2.6">2.2.6 可选的段键</a></h5>

<h5><a href="#2.2.7">2.2.7 重定向路由</a></h5>

<h5><a href="#2.2.8">2.2.8 格式段format</a></h5>

<h5><a href="#2.2.9">2.2.9 路由作为Rack的端点</a></h5>

<h5><a href="#2.2.10">2.2.10 接收头</a></h5>

<h5><a href="#2.2.11">2.2.11 段键约束</a></h5>

<h5><a href="#2.2.12">2.2.12 根路由</a></h5>

<h4><a href="#2.3">2.3 路径匹配</a></h4>

<h4><a href="#2.4">2.4 命名路由</a></h4>

<h5><a href="#2.4.1">2.4.1 创建一个命名路由</a></h5>

<h5><a href="#2.4.2">2.4.2 name_path vs name_url</a></h5>

<h5><a href="#2.4.3">2.4.3 给你的路由命名</a></h5>

<h5><a href="#2.4.4">2.4.4 参数糖</a></h5>

<h5><a href="#2.4.5">2.4.5 你的糖中还有糖吗？</a></h5>

<h4><a href="#2.5">2.5 作用域的路由规则</a></h4>

<h5><a href="#2.5.1">2.5.1 Controller</a></h5>

<h5><a href="#2.5.2">2.5.2 路径前缀</a></h5>

<h5><a href="#2.5.3">2.5.3 命名前缀</a></h5>

<h5><a href="#2.5.4">2.5.4 命名空间</a></h5>

<h5><a href="#2.5.5">2.5.5 捆绑约束</a></h5>

<h4><a href="#2.6">2.6 路由列表</a></h4>

<h2 id='2.1'>2.1 路由的两个目标</h2>


<p>路由系统做两件事：</p>

<ol>
<li><p>通过请求匹配对应的controller的action方法</p></li>
<li><p>为你的方法（像link_to  redirect_to）动态生成URL</p></li>
</ol>


<p>路由定义了一个规则，用来作为匹配URL的模板和作为创建url的蓝图，这种规则会按照惯例自动生成（例如REST资源）。这种规则包括静态子字符串和斜杠（模仿URL的写法），和作为与url的值相符合的位置(segment key)段参数的key。</p>

<p>一个路由包括一个或多个硬编码的段参数key形成键值对，然后通过params方法进入对应的controller的action中。键（:controller和:action）决定哪个controller的哪个action被调用。路由中的其他键值对的定义得到了参考。</p>

<p>来看一个例子：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">get</span> <span class="s1">&#39;recipes/:ingredient&#39;</span> <span class="o">=&gt;</span> <span class="s2">&quot;recipes#index&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>在这个例子中，你可以找到：</p>

<ul>
<li><p>静态字符串（recipes）</p></li>
<li><p>斜杠（/）</p></li>
<li><p>段参数key（:ingredient）</p></li>
<li><p>controller和action的映射（recipes#index）</p></li>
<li><p>HTTP动词抑制方法（get）</p></li>
</ul>


<p>路由有许多丰富的语法，但不是意味着这个是最复杂的，也不是最简单的；由于实在是太多了，一个简单的路由，想这个例子，必须<strong>提供足够的信息去匹配现存的url</strong>并且<strong>可以生成新的url</strong>，路由语法的设计就是来解决这两个过程的。</p>

<br />




<h2 id="2.2">2.2 routes.rb文件</h2>


<hr />

<p>路由定义在config/routes.rb文件中，根据 Listing2.1 这个文件创建于你创建你的Rails应用时并且还有命令教你如何使用，</p>

<h6>Listing 2.1: The default routes.rb file</h6>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="ss">Example</span><span class="p">:</span><span class="ss">:Application</span><span class="o">.</span><span class="n">routes</span><span class="o">.</span><span class="n">draw</span> <span class="k">do</span>
</span><span class='line'>  <span class="c1"># The priority is based upon order of creation: first created -&gt; highest</span>
</span><span class='line'>  <span class="c1"># priority.</span>
</span><span class='line'>  <span class="c1"># See how all your routes lay out with &quot;rake routes&quot;.</span>
</span><span class='line'>  <span class="c1"># You can have the root of your site routed with &quot;root&quot;</span>
</span><span class='line'>  <span class="c1"># root to: &#39;welcome#index&#39;</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># Example of regular route:</span>
</span><span class='line'>  <span class="c1">#   get &#39;products/:id&#39; =&gt; &#39;catalog#view&#39;</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># Example of named route that can be invoked with</span>
</span><span class='line'>  <span class="c1"># purchase_url(id: product.id)</span>
</span><span class='line'>  <span class="c1">#  get &#39;products/:id/purchase&#39; =&gt; &#39;catalog#purchase&#39;, as: :purchase</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># Example resource route (maps HTTP verbs to controller actions</span>
</span><span class='line'>  <span class="c1">#automatically):</span>
</span><span class='line'>  <span class="c1">#   resources :products</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># Example resource route with options:</span>
</span><span class='line'>  <span class="c1"># resources :products do</span>
</span><span class='line'>  <span class="c1">#   member do</span>
</span><span class='line'>  <span class="c1">#     get &#39;short&#39;</span>
</span><span class='line'>  <span class="c1">#     post &#39;toggle&#39;</span>
</span><span class='line'>  <span class="c1">#   end</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">#   collection do</span>
</span><span class='line'>  <span class="c1">#     get &#39;sold&#39;</span>
</span><span class='line'>  <span class="c1">#   end</span>
</span><span class='line'>  <span class="c1"># end</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># Example resource route with sub-resources:</span>
</span><span class='line'>  <span class="c1">#   resources :products do</span>
</span><span class='line'>  <span class="c1">#       resources :comments, :sales</span>
</span><span class='line'>  <span class="c1">#       resource :seller</span>
</span><span class='line'>  <span class="c1">#   end</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># Example resource route with more complex sub-resources:</span>
</span><span class='line'>  <span class="c1">#   resources :products do</span>
</span><span class='line'>  <span class="c1">#     resources :comments</span>
</span><span class='line'>  <span class="c1">#     resources :sales do</span>
</span><span class='line'>  <span class="c1">#        get &#39;recent&#39;, on: :collection</span>
</span><span class='line'>  <span class="c1">#     end</span>
</span><span class='line'>  <span class="c1">#   end</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># Example resource route within a namespace:</span>
</span><span class='line'>  <span class="c1">#   namespace :admin do</span>
</span><span class='line'>  <span class="c1">#     # Directs /admin/products/* to Admin::ProductsController</span>
</span><span class='line'>  <span class="c1">#     # (app/controllers/admin/products_controller.rb)</span>
</span><span class='line'>  <span class="c1">#     resources :products</span>
</span><span class='line'>  <span class="c1">#   end</span>
</span></code></pre></td></tr></table></div></figure>


<p>这个文件由Example::Application.routes 的draw 方法调用构成的，方法用到一个块，从文件的第二行到倒数第二行都是块的内容，
在运行时，块在ActionDispatch::Routing::Mapper实例中估值，你可以通过它设置整个路由系统。</p>

<p>路由系统不得不寻找一个匹配URL的模式，它尝试着辨识或匹配url产生的参数，按着定义的顺序执行；也就是，按照 routes.rb 里面的顺序。
如果所给的路由匹配失败，匹配历程将查找下一个再匹配，直到成功匹配，查询才结束。</p>

<br/>




<h3 id="2.2.1">2.2.1 路由规则</h3>


<hr />

<p>最基础的定义路由方法是提供URL的模式加上一个通过特殊参数:to 映射的controller类action方法。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">get</span> <span class="s1">&#39;products/:id&#39;</span><span class="p">,</span> <span class="ss">to</span><span class="p">:</span> <span class="s1">&#39;products#show&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>这是比较通用的，提供一个简写形式：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">get</span> <span class="s1">&#39;products/:id&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;products#show&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>David曾经公开评价过这种简写形式背后的设计决定，他说这是从2个来源汲取灵感的：</p>

<ol>
<li>因为我们一直在使用controller作为小写这种模式，而且在:controller => “main”的定义中也没有“Controller”这部分。</li>
<li>采用Ruby模式#表示你正在谈论一个实例方法，它的影响甚至被部分混合。Main#index会让你认为存在Main这个对象，然而没有；
每次输出MainController#index将会成为一个麻烦。也是同样地原因我们考虑过:controller => “main” 和 :controller => “MainController”。给了这些限制，我想“main#index”是迄今为止最好的选择。</li>
</ol>


<br/>




<h3 id="2.2.2">2.2.2 限制请求方法</h3>


<hr />

<p>Rails4，限制HTTP方法被用来操作路由。
如果你用match 命令去定义一个路由，你会通过via这个可选参数来完成：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">match</span> <span class="s1">&#39;products/:id&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;products#show&#39;</span><span class="p">,</span> <span class="ss">via</span><span class="p">:</span> <span class="ss">:get</span>
</span></code></pre></td></tr></table></div></figure>


<p>Rails提供更简洁的方法去表达这种限制，通过设计好的http方法来替换原来的match命令：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">get</span> <span class="s1">&#39;products/:id&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;products#show&#39;</span>
</span><span class='line'><span class="n">post</span><span class="s1">&#39; products&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;products#create&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>如果，处于某些原因，你想使用多个http方法限制路由，可以通过将这些动词方法构造成数组，然后传递给:via即可：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">match</span> <span class="s1">&#39;products/:id&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;products#show&#39;</span><span class="p">,</span> <span class="ss">via</span><span class="p">:</span> <span class="o">[</span><span class="ss">:get</span><span class="p">,</span><span class="ss">:post</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>定义一个路由没有定义他的http方法，将会使Rails抛出RuntimeError 异常。
然而这里不作为推荐，一个路由仍然可以匹配任何的http方法，只要传递:any到:via即可</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">match</span> <span class="s1">&#39;products&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;products#index&#39;</span><span class="p">,</span> <span class="ss">via</span><span class="p">:</span> <span class="ss">:any</span>
</span></code></pre></td></tr></table></div></figure>




<br/>




<h3 id="2.2.3">2.2.3 URL 模式</h3>


<hr />

<p>请记住，模式字符串中不需要对应每个字段，段键(segment keys ：表示url字符串中得参数符号)；事实上每个连接都需要controller和action，举个例子，你可以写如下的路由：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">get</span> <span class="s2">&quot;:id&quot;</span> <span class="o">=&gt;</span> <span class="s2">&quot;products#show&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>它将会被如下的URL辨别：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="ss">http</span><span class="p">:</span><span class="sr">//</span><span class="ss">localhost</span><span class="p">:</span><span class="mi">3000</span><span class="o">/</span><span class="mi">8</span>
</span></code></pre></td></tr></table></div></figure>


<p>这个路由系统将设置params[:id]为8（基于:id的段键位置与url中得8位置相匹配），并且它会执行product这个controller的show方法。当然，在视觉上看这个路由有点微小。另一方面，下面例子的路由包含静态字符串products/，在URL模式中：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">match</span> <span class="s1">&#39;products/:id&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;products#show&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>在这个字符串锚文本的识别过程中，任何左边不包含products/的URL将不符合此路由。</p>

<p>至于URL的产生，路由中的静态字符串将会简单地代替路由系统生成URL。URL生成器生成URL是使用路由的模式字符串作为蓝图的。模式字符串规定了子串products。</p>

<p>讲到这里，你心中应该了解到路由的这两种双重的意图了&mdash;识别/生成，这也是为什么之前强调了几次的目的。
这也有专门用来记住的两个原则：</p>

<ol>
<li><p>同样的规则决定了识别和生成。整个系统都是这样建立起来的，你不再需要去写规则。你每写一次规则，逻辑将在两个方向流动。</p></li>
<li><p>URL将由路由系统生成（link_to 等），url <a href="http://example.com/products/19201">http://example.com/products/19201</a> 的结果没有包含当用户遵循它时应该发生的一丝线索&mdash;除了它的路由规则。路由规则提供了必要的信息去触发controller和action。有些人看着URL但是不知道路由规则，将不知道url映射到哪个controller和action。</p></li>
</ol>


<br/>




<h3 id="2.2.4">2.2.4 段键</h3>


<hr />

<p>URL的模式字符串可以包含参数（用一个符号表示），并称为段键。
在下面的路由声明中，:id就是段键：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">get</span> <span class="s1">&#39;products/:id&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;products#show&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>当这个路由去匹配url请求时，该模式的:id部分将作为匹配部分，并且挑选片段的值。
举个例子，下面这个url的:id的值将会是4：<a href="http://example.com/products/4">http://example.com/products/4</a></p>

<p>这个路由，当他匹配的时候，将会总是带着用户到product controller的show这个action方法，你不久将会看到基于片段匹配controller和action的技术。在单引号中得:id符号将是路由的段键（可以将它视为一种变量类型），它的工作就是被一个值锁上。</p>

<p>上面例子的意思是params[:id]的值将会被设置成4，你可以在product controller中的show方法中读取这个值。</p>

<p>当你需要生成一串url，你必须提供一个值能连接url中模式字符串的段键。一个最简单的理解（并且最原始）的方式是使用hash，像这样：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">link_to</span> <span class="s2">&quot;Products&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="ss">controller</span><span class="p">:</span> <span class="s2">&quot;products&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="ss">action</span><span class="p">:</span> <span class="s2">&quot;show&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nb">id</span><span class="p">:</span> <span class="mi">1</span>
</span></code></pre></td></tr></table></div></figure>


<p>就像你知道的那样，它确实有像当今共同的生成路由的方法，名叫具名路由，在hash中明确地提供了controller和action。然而，现在我们是回顾路由的基本知识。</p>

<p>在上面的link_to中，我们提供了三个参数，其中两个将会匹配路由中得硬编码和段键；第三个，:id将会分配给url模式中相符合的段键值。</p>

<p>非常重要的是理解link_to不需要知道是否提供硬编码或是段值。只需要知道（或者希望）那三个值，绑定着那三个键，就能足够精确一个路由和模式字符串；因此，能够生成自动生成URL的蓝图。</p>

<h4>i:硬编码参数</h4>

<p>你总是有可能插入额外的硬编码参数到定义的路由的，尽管这个它对url的匹配无任何作用：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">get</span> <span class="s1">&#39;products/special&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;products#show&#39;</span><span class="p">,</span> <span class="ss">special</span><span class="p">:</span> <span class="s1">&#39;true&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>提醒你，我不支持上述这个例子的做法；对我来说（从风格问题上讲）指出不同的action，而不是插入一个分句，</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">get</span> <span class="s1">&#39;products/special&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;products#special&#39;</span>
</span></code></pre></td></tr></table></div></figure>




<br/>




<h3 id="2.2.5">2.2.5 聚焦于id字段</h3>


<hr />

<p>注意，对待URL中的:id字段并不是魔法，它只是一个当做一个值的名字对待而已。如果你想要，可以改变Rails的规则，例如将:id改为:blah，但是你也不得不在你的controller中得action像下面这样做：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="vi">@product</span><span class="o">=</span><span class="no">Product</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="n">params</span><span class="o">[</span><span class="ss">:blah</span><span class="o">]</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>:id这个字段仅仅是一个惯例，它映射了一个action的普遍行为，就是操作一条特定的数据库记录。路由主要的工作是确定controller和对应的action被执行。通过:id的hash，你去数据库获取想要的记录：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">ProductsController</span> <span class="o">&lt;</span> <span class="no">ApplicationController</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">show</span>
</span><span class='line'>    <span class="vi">@product</span> <span class="o">=</span> <span class="no">Product</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="n">params</span><span class="o">[</span><span class="ss">:id</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<br/>




<h3 id="2.2.6">2.2.6 可选的段键</h3>


<hr />

<p>Rails3 引入定义URL可选部分的模式，最简单的阐述这种方法的方式是看下面例子，这是从旧版本的config/routes.rb 文件底部的例子：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">match</span> <span class="s1">&#39;:controller(/:action(/:id(.:format)))&#39;</span><span class="p">,</span> <span class="ss">via</span><span class="p">:</span> <span class="ss">:any</span>
</span></code></pre></td></tr></table></div></figure>


<p>注意圆括号是用来定义可选段键的，有点像正则表达式中的可选组合。</p>

<br/>




<h3 id="2.2.7">2.2.7 重定向路由</h3>


<hr />

<p>你可以在直接在路由定义中直接编写一个redirect重定向，只要使用redirect方法：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">get</span> <span class="s2">&quot;/foo&quot;</span><span class="p">,</span> <span class="ss">to</span><span class="p">:</span> <span class="n">redirect</span><span class="p">(</span><span class="s1">&#39;/bar&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>redirect的参数url可以是一个相对地址也可以是一个绝对地址。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">get</span> <span class="s2">&quot;/google&quot;</span><span class="p">,</span><span class="ss">to</span><span class="p">:</span> <span class="n">redirect</span><span class="p">(</span><span class="s1">&#39;http://google.com/&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>redirect方法可以使用一个块，接收params请求作为他的参数；举个例子，做一个web服务端api的快速版本：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">match</span><span class="s2">&quot;/api/v1/:api&quot;</span><span class="p">,</span><span class="ss">to</span><span class="p">:</span>
</span><span class='line'>    <span class="n">redirect</span> <span class="p">{</span><span class="o">|</span><span class="n">params</span><span class="o">|</span> <span class="s2">&quot;/api/v2/</span><span class="si">#{</span><span class="n">params</span><span class="o">[</span><span class="ss">:api</span><span class="o">].</span><span class="n">pluralize</span><span class="si">}</span><span class="s2">&quot;</span> <span class="p">},</span> <span class="ss">via</span><span class="p">:</span> <span class="ss">:any</span>
</span></code></pre></td></tr></table></div></figure>


<p>redirect也接受:status参数：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">match</span> <span class="s2">&quot;/api/v1/:api&quot;</span><span class="p">,</span> <span class="ss">:to</span><span class="o">=&gt;</span>
</span><span class='line'>  <span class="n">redirect</span><span class="p">(</span><span class="ss">status</span><span class="p">:</span> <span class="mi">302</span><span class="p">)</span> <span class="p">{</span><span class="o">|</span><span class="n">params</span><span class="o">|</span> <span class="s2">&quot;/api/v2/</span><span class="si">#{</span><span class="n">params</span><span class="o">[</span><span class="ss">:api</span><span class="o">].</span><span class="n">pluralize</span><span class="si">}</span><span class="s2">&quot;</span> <span class="p">},</span> <span class="ss">via</span><span class="p">:</span> <span class="ss">:any</span>
</span></code></pre></td></tr></table></div></figure>


<p>redirect 返回的是ActionDispatch::Routing::Redirect的实例，看一下它的源代码：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">ActionDispatch</span>
</span><span class='line'>  <span class="k">module</span> <span class="nn">Routing</span>
</span><span class='line'>    <span class="k">class</span> <span class="n">redirect</span>
</span><span class='line'>      <span class="c1"># :nodoc: ...</span>
</span><span class='line'>      <span class="k">def</span> <span class="nf">call</span><span class="p">(</span><span class="n">env</span><span class="p">)</span>
</span><span class='line'>        <span class="n">req</span> <span class="o">=</span> <span class="no">Request</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">env</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1"># If any of the path parameters has a invalid encoding then </span>
</span><span class='line'>        <span class="c1"># raise since it&#39;s likely to trigger errors further on.</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">req</span><span class="o">.</span><span class="n">symbolized_path_parameters</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">key</span><span class="p">,</span> <span class="n">value</span><span class="o">|</span>
</span><span class='line'>          <span class="k">unless</span> <span class="n">value</span><span class="o">.</span><span class="n">valid_encoding?</span>
</span><span class='line'>          <span class="k">raise</span> <span class="ss">ActionController</span><span class="p">:</span><span class="ss">:BadRequest</span><span class="p">,</span>
</span><span class='line'>          <span class="s2">&quot;Invalid parameter: </span><span class="si">#{</span><span class="n">key</span><span class="si">}</span><span class="s2"> =&gt; </span><span class="si">#{</span><span class="n">value</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>        <span class="k">end</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">uri</span> <span class="o">=</span> <span class="no">URI</span><span class="o">.</span><span class="n">parse</span><span class="p">(</span><span class="n">path</span><span class="p">(</span><span class="n">req</span><span class="o">.</span><span class="n">symbolized_path_parameters</span><span class="p">,</span> <span class="n">req</span><span class="p">))</span> <span class="n">uri</span><span class="o">.</span><span class="n">scheme</span> <span class="o">||=</span> <span class="n">req</span><span class="o">.</span><span class="n">scheme</span>
</span><span class='line'>      <span class="n">uri</span><span class="o">.</span><span class="n">host</span> <span class="o">||=</span> <span class="n">req</span><span class="o">.</span><span class="n">host</span>
</span><span class='line'>      <span class="n">uri</span><span class="o">.</span><span class="n">port</span> <span class="o">||=</span> <span class="n">req</span><span class="o">.</span><span class="n">port</span> <span class="k">unless</span> <span class="n">req</span><span class="o">.</span><span class="n">standard_port?</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">body</span> <span class="o">=</span> <span class="sx">%(&lt;html&gt;&lt;body&gt;You are being &lt;a href=&quot;</span><span class="si">#{</span><span class="ss">ERB</span><span class="p">:</span><span class="ss">:Util</span><span class="o">.</span><span class="n">h</span><span class="p">(</span><span class="n">uri</span><span class="o">.</span><span class="n">to_s</span><span class="p">)\</span> <span class="si">}</span><span class="sx">&quot;&gt;redirected&lt;/a&gt;.&lt;/body&gt;&lt;/html&gt;)</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">headers</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>              <span class="s1">&#39;Location&#39;</span> <span class="o">=&gt;</span> <span class="n">uri</span><span class="o">.</span><span class="n">to_s</span><span class="p">,</span>
</span><span class='line'>              <span class="s1">&#39;Content-Type&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;text/html&#39;</span><span class="p">,</span>
</span><span class='line'>              <span class="s1">&#39;Content-Length&#39;</span> <span class="o">=&gt;</span> <span class="n">body</span><span class="o">.</span><span class="n">length</span><span class="o">.</span><span class="n">to_s</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>      <span class="o">[</span><span class="n">status</span><span class="p">,</span> <span class="n">headers</span><span class="p">,</span> <span class="o">[</span><span class="n">body</span><span class="o">]</span> <span class="o">]</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>      <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<br/>




<h3 id="2.2.8">2.2.8 格式段format</h3>


<hr />

<p>我们来重新访问之前的默认路由：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">match</span> <span class="s1">&#39;:controller(/:action(/:id(.:format)))&#39;</span><span class="p">,</span> <span class="ss">via</span><span class="p">:</span> <span class="ss">:any</span>
</span></code></pre></td></tr></table></div></figure>


<p>.:format将匹配id字段后面.之后的值，举个例子，像如下的url：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="ss">http</span><span class="p">:</span><span class="sr">//</span><span class="ss">localhost</span><span class="p">:</span><span class="mi">3000</span><span class="o">/</span><span class="n">products</span><span class="o">/</span><span class="n">show</span><span class="o">/</span><span class="mi">3</span><span class="o">.</span><span class="n">json</span>
</span></code></pre></td></tr></table></div></figure>


<p>在这里，params[:format]将会被设置成为json。:format很特别，它在controller的action中有一个作用，这个作用与调用respond_to方法有关。</p>

<p>respond_to方法允许你的action依据请求的格式返回不同的结果，这里的product_controller的show方法提供了html和json两种格式：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">show</span>
</span><span class='line'>  <span class="vi">@product</span> <span class="o">=</span> <span class="no">Product</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="n">params</span><span class="o">[</span><span class="ss">:id</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>  <span class="n">respond_to</span> <span class="k">do</span> <span class="o">|</span><span class="nb">format</span><span class="o">|</span>
</span><span class='line'>    <span class="nb">format</span><span class="o">.</span><span class="n">html</span>
</span><span class='line'>    <span class="nb">format</span><span class="o">.</span><span class="n">json</span> <span class="p">{</span> <span class="n">render</span> <span class="ss">json</span><span class="p">:</span> <span class="vi">@product</span><span class="o">.</span><span class="n">to_json</span>  <span class="p">}</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>这个respond_to的块中有两个分句，html分句是由format.html组成，对于html格式的请求将采用正常渲染方式，而json分句包含一个代码块；如果json被请求，那么json中的代码块将会被执行，并且其结果将会返回到客户端。</p>

<p>这里有个使用curl命令的结果：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>curl http://localhost:3000/products/show/1.json -i
</span><span class='line'>HTTP/1.1 200 OK
</span><span class='line'>Content-Type: application/json; <span class="nv">charset</span><span class="o">=</span>utf-8
</span><span class='line'>Content-Length:81
</span><span class='line'>Connection:Keep-Alive
</span><span class='line'>
</span><span class='line'><span class="o">{</span><span class="s2">&quot;created_at&quot;</span>:<span class="s2">&quot;2013-02-09T18:25:03.513Z&quot;</span>,
</span><span class='line'> <span class="s2">&quot;description&quot;</span>:<span class="s2">&quot;Keyboard&quot;</span>,
</span><span class='line'> <span class="s2">&quot;id&quot;</span>:<span class="s2">&quot;1&quot;</span>,
</span><span class='line'> <span class="s2">&quot;maker&quot;</span>:<span class="s2">&quot;Apple&quot;</span>,
</span><span class='line'> <span class="s2">&quot;updated_at&quot;</span>:<span class="s2">&quot;2013-02-09T18:25:03.513Z&quot;</span><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>URL最后以.json结尾会导致respond_to选择json分支，并且返回json表达的结果。</p>

<p>如果请求的格式不包含在respond_to的块里面，rails不会抛出异常，Rails会返回406 Not Acceptable status，告诉你无法处理这种请求。</p>

<p>如果你想要在respond_to的块里设置其他情况的处理，你可以使用any方法，这将会告诉rails处理那些没有被清晰定义的其他请求格式。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">show</span>
</span><span class='line'>  <span class="vi">@product</span> <span class="o">=</span> <span class="no">Product</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="n">params</span><span class="o">[</span><span class="ss">:id</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>  <span class="n">respond_to</span> <span class="k">do</span> <span class="o">|</span><span class="nb">format</span><span class="o">|</span>
</span><span class='line'>    <span class="nb">format</span><span class="o">.</span><span class="n">html</span>
</span><span class='line'>    <span class="nb">format</span><span class="o">.</span><span class="n">json</span> <span class="p">{</span> <span class="n">render</span> <span class="ss">json</span><span class="p">:</span> <span class="vi">@product</span><span class="o">.</span><span class="n">to_json</span>  <span class="p">}</span>
</span><span class='line'>    <span class="nb">format</span><span class="o">.</span><span class="n">any</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>你只要告诉any方法该如何处理那个格式的请求或者有那个对应格式的视图模板，否则你将会得到 MissingTemplate 异常。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>ActionView::MissingTemplate<span class="o">(</span>Missingtemplateproducts/show, application/show with <span class="o">{</span>:locale<span class="o">=</span>&gt;<span class="o">[</span>:en<span class="o">]</span>, :formats<span class="o">=</span>&gt;<span class="o">[</span>:xml<span class="o">]</span>, :handlers<span class="o">=</span>&gt;<span class="o">[</span>:erb, :builder, :raw, :ruby, :jbuilder, :coffee<span class="o">]}</span>.<span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>




<br/>




<h3 id="2.2.9">2.2.9 路由作为Rack的端点</h3>


<hr />

<p>在这一章的路由中你会见到可选的参数:to的用法，最有意思的是:to的值将会作为指向Rack的端点(Rack Endpoint)，看看下面简单的例子：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">get</span> <span class="s2">&quot;/hello&quot;</span><span class="p">,</span> <span class="ss">to</span><span class="p">:</span> <span class="nb">proc</span><span class="p">{</span><span class="o">|</span><span class="n">env</span><span class="o">|</span> <span class="o">[</span> <span class="mi">200</span><span class="p">,</span> <span class="p">{},</span> <span class="o">[</span><span class="s2">&quot;Helloworld&quot;</span><span class="o">]</span> <span class="o">]</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>路由到controllers是非常松耦合的！最简洁的语法是（像&#8221;items#show&#8221;）依靠controller类的action方法去返回执行action请求的Rack Endpoint。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&gt;&gt;</span> <span class="no">ItemsController</span><span class="o">.</span><span class="n">action</span><span class="p">(</span><span class="ss">:show</span><span class="p">)</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="c1">#&lt;Proc:0x01e96cd0@...&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>派发基于Rack应用的能力，像由Sinatra创建的app，可以实现使用amount方法。
amount方法接收一个:at可选项可以说明基于Rack的应用映射的路由。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">HelloApp</span> <span class="o">&lt;</span> <span class="ss">Sinatra</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class='line'>  <span class="n">get</span> <span class="s2">&quot;/&quot;</span> <span class="k">do</span>
</span><span class='line'>    <span class="s2">&quot;Hello World!&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="ss">Example</span><span class="p">:</span><span class="ss">:Application</span><span class="o">.</span><span class="n">routes</span><span class="o">.</span><span class="n">draw</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">mount</span> <span class="no">HelloApp</span><span class="p">,</span> <span class="ss">at</span><span class="p">:</span> <span class="s1">&#39;/hello&#39;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>当然，更简洁的方式是：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">mount</span> <span class="no">HelloApp</span> <span class="o">=&gt;</span> <span class="s1">&#39;/hello&#39;</span>
</span></code></pre></td></tr></table></div></figure>




<br/>




<h3 id="2.2.10">2.2.10 接收头</h3>


<hr />

<p>你可以通过设置请求的接收头（Accept Headers）来触发respond_to的其他分句，当你这样做了，就不需要在URL末尾加上.:format。（然而，由于http客户端的不一致，现实使用这种技术并不是很可靠）。</p>

<p>下面使用curl的例子，没有定义.json格式，但是不需要将接收头设置成application/json。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="vg">$curl</span> <span class="o">-</span><span class="n">i</span> <span class="o">-</span><span class="n">H</span> <span class="s2">&quot;Accept: application/json&quot;</span>
</span><span class='line'><span class="ss">http</span><span class="p">:</span><span class="sr">//</span><span class="ss">localhost</span><span class="p">:</span><span class="mi">3000</span><span class="o">/</span><span class="n">products</span><span class="o">/</span><span class="n">show</span><span class="o">/</span><span class="mi">1</span>
</span><span class='line'><span class="no">HTTP</span><span class="o">/</span><span class="mi">1</span><span class="o">.</span><span class="mi">1</span> <span class="mi">200</span> <span class="no">OK</span>
</span><span class='line'><span class="no">Content</span><span class="o">-</span><span class="ss">Type</span><span class="p">:</span> <span class="n">application</span><span class="o">/</span><span class="n">json</span><span class="p">;</span><span class="n">charset</span><span class="o">=</span><span class="n">utf</span><span class="o">-</span><span class="mi">8</span>
</span><span class='line'><span class="no">Content</span><span class="o">-</span><span class="ss">Length</span><span class="p">:</span> <span class="mi">81</span>
</span><span class='line'><span class="ss">Connection</span><span class="p">:</span> <span class="no">Keep</span><span class="o">-</span><span class="no">Alive</span>
</span><span class='line'>
</span><span class='line'><span class="p">{</span><span class="s2">&quot;created_at&quot;</span><span class="ss">:&quot;2013-02-09T18:25:03.513Z&quot;</span><span class="p">,</span>
</span><span class='line'>   <span class="s2">&quot;description&quot;</span><span class="ss">:&quot;Keyboard&quot;</span><span class="p">,</span>
</span><span class='line'>   <span class="s2">&quot;id&quot;</span><span class="ss">:&quot;1&quot;</span><span class="p">,</span>
</span><span class='line'>   <span class="s2">&quot;maker&quot;</span><span class="ss">:&quot;Apple&quot;</span><span class="p">,</span>
</span><span class='line'>   <span class="s2">&quot;updated_at&quot;</span><span class="ss">:&quot;2013-02-09T18:25:03.513Z&quot;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<br/>




<h3 id="2.2.11">2.2.11 段键约束</h3>


<hr />

<p>有时候你不仅仅需要辨认一个路由，还需要辨别比现在更细粒度的组件或字段，你可以使用:constraint选项进行限制（可能需要正则表达式）。</p>

<p>举个例子，如果id为非数值，你可以路由许多show 请求到一个错误的action。你可以创建两个路由，一个处理id为数值的路由，另一个处理错误的路由。</p>

<h4>i:隐式锚文本</h4>

<blockquote><p>如果我们使用下面的限制：</p>

<p>constraints: {:id => /\d+/}</p>

<p>乍一看，好像会匹配&#8221;foo32bar&#8221;。其实不会，因为rails隐式锚文本会在表达式前后增加终结符。</p>

<p>事实上，像这样在表达式前后增加\A 和 \Z会导致Rails抛出异常。</p></blockquote>

<p>事实上，我们经常给:id增加限制，rails提供了更加简洁的方式：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">get</span> <span class="s1">&#39;:controller/show/:id&#39;</span> <span class="o">=&gt;</span> <span class="ss">:show</span><span class="p">,</span> <span class="nb">id</span><span class="p">:</span> <span class="sr">/\d+/</span>
</span><span class='line'><span class="n">get</span> <span class="s1">&#39;:controller/show/:id&#39;</span> <span class="o">=&gt;</span> <span class="ss">:show_error</span>
</span></code></pre></td></tr></table></div></figure>


<p>正则表达式中的路由非常有用，特别是当你的路由中组件只是值不同时。但是，它们并不能作为数据完整性检查的替代品。你可能仍然需要确定你所处理的值是对于你的项目是有用或合适的。</p>

<p>从例子看，你可能总结为:constraints 检查params中的元素。然而，你也可以利用:constraints来检查任何一个请求“返回字符串的属性”，就像:subdomain和:referrer。对于匹配请求的方法，则不支持返回为数值或布尔型的，并且将会抛出神秘的异常。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># only allow users admin subdomain to do old-school routing</span>
</span><span class='line'><span class="n">get</span> <span class="s1">&#39;:controller/:action/:id&#39;</span> <span class="o">=&gt;</span> <span class="ss">:show</span><span class="p">,</span> <span class="ss">constraints</span><span class="p">:</span> <span class="p">{</span><span class="ss">subdomain</span><span class="p">:</span> <span class="s1">&#39;admin&#39;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>如果由于某些原因，你需要更加强大的限制性检查，有时候需要访问请求req，然后通过接受一个块或其他相应call的对象作为值来限制。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># protect records with id under 100</span>
</span><span class='line'> <span class="n">get</span><span class="s1">&#39;records/:id&#39;</span><span class="o">=&gt;</span><span class="s2">&quot;records#protected&quot;</span><span class="p">,</span>
</span><span class='line'> <span class="ss">constraints</span><span class="p">:</span> <span class="nb">proc</span> <span class="p">{</span><span class="o">|</span><span class="n">req</span><span class="o">|</span> <span class="n">req</span><span class="o">.</span><span class="n">params</span><span class="o">[</span><span class="ss">:id</span><span class="o">].</span><span class="n">to_i</span> <span class="o">&lt;</span> <span class="mi">100</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<br/>




<h3 id="2.2.12">2.2.12 根路由</h3>


<hr />

<p>config/routes.rb文件的默认第8行，你会见到：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># You can have the root of your site routed with &quot;root&quot;</span>
</span><span class='line'><span class="c1"># root to: &#39;welcome#index&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>上述代码的作用是，当你的浏览器连接：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="ss">http</span><span class="p">:</span><span class="sr">//ex</span><span class="n">ample</span><span class="o">.</span><span class="n">com</span> <span class="c1"># Note the lack of &quot;/anything&quot; at the end!</span>
</span></code></pre></td></tr></table></div></figure>


<p>路由会说：“我不需要任何值，我不需要任何东西，我已经知道是哪个controller的哪个action了，我现在就去触发它。”</p>

<p>在一个最新创建的路由中，这一行是被注释掉的，因为并不是默认需要到的。你需要确定你写的应用URL不应该做什么。
下面是简单的对于空路由的例子：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">root</span> <span class="ss">:to</span> <span class="o">=&gt;</span> <span class="s2">&quot;welcome#index&quot;</span>
</span><span class='line'><span class="n">root</span> <span class="ss">:to</span> <span class="o">=&gt;</span> <span class="s2">&quot;pages#home&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">#Shorthand syntax</span>
</span><span class='line'><span class="n">root</span> <span class="s2">&quot;user_sessions#new&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>定义空路由给那些只用域名的url连接你的站点的用户有东西可以看。</p>

<p>当你没有建立根路由，默认Rails会连接到因特网controller为Rails::WelcomeController 的页面。</p>

<p>在之前rails版本中，新创建的Rails项目通过引入public/目录下地index.html文件都把这些自动完成了。所有public/目录下的静态文本的层次结构将匹配你的应用中提出的URL方案，结果导致静态内容被服务而不是触发路由规则。
事实上，Web服务器会服务这些静态内容而而不需要Rails参与。</p>

<h3>注意路由顺序：</h3>

<blockquote><p>路由都是为了“辨别”和“产生”而按顺序排列在config/routes.rb文件中。</p></blockquote>

<br/>




<h2 id="2.3">2.3 路径匹配</h2>


<p>在某些情况下，你可能需要抓取一个或更多的路由组件并且不需要一个个匹配它们的位置参数。举个例子，你的URL可能映射成一个目录结构。如果有人连接：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>/items/list/base/books/fiction/dickens
</span></code></pre></td></tr></table></div></figure>


<p>你想通过items/list这action访问剩下的三个字段，但是，有时可能仅有三个字段：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>/items/list/base/books/fiction
</span></code></pre></td></tr></table></div></figure>


<p>或者5个：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>/items/list/base/books/fiction/dickens/little_dorrit
</span></code></pre></td></tr></table></div></figure>


<p>所以，在特殊情况下，你需要一个路由去匹配URI的第二个组件后面的所有东西，你可以通过星号通配符进行路径匹配。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">get</span> <span class="s1">&#39;items/list/*specs&#39;</span><span class="p">,</span><span class="ss">controller</span><span class="p">:</span> <span class="s1">&#39;items&#39;</span><span class="p">,</span> <span class="ss">action</span><span class="p">:</span> <span class="s1">&#39;list&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>现在items/list这个action可以访问一串不同数量的以/分开字段的URL了，可以通过params[:specs]访问：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">list</span>
</span><span class='line'> <span class="n">specs</span> <span class="o">=</span> <span class="n">params</span><span class="o">[</span><span class="ss">:specs</span><span class="o">]</span> <span class="c1"># e.g, &quot;base/books/fiction/dickens&quot;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h3>匹配键值对</h3>

<blockquote><p>路径匹配应该对字段的临时查询提供一个普遍的机制基础。如果让你通过下面形式设计的URI方案：</p>

<p><a href="http://localhost:3000/items/q/field1/value1/field2/value2/...">http://localhost:3000/items/q/field1/value1/field2/value2/&#8230;</a></p>

<p>用这种方法发出的请求会返回一连串所有匹配每个字段的产品。</p>

<p>换句话说， <a href="http://localhost:3000/items/q/year/1939/material/wood">http://localhost:3000/items/q/year/1939/material/wood</a> 会产生一系列在1993年生产的木材。完成这个路由将是这个样子：</p></blockquote>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">get</span> <span class="s1">&#39;items/q/*specs&#39;</span><span class="p">,</span> <span class="ss">controller</span><span class="p">:</span> <span class="s2">&quot;items&quot;</span><span class="p">,</span> <span class="ss">action</span><span class="p">:</span> <span class="s2">&quot;query&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<blockquote><p>当然，你将不得不像这样去写action查询：</p></blockquote>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">query</span>
</span><span class='line'>  <span class="vi">@items</span> <span class="o">=</span> <span class="no">Item</span><span class="o">.</span><span class="n">where</span><span class="p">(</span><span class="no">Hash</span><span class="o">[</span><span class="n">params</span><span class="o">[</span><span class="ss">:specs</span><span class="o">].</span><span class="n">split</span><span class="p">(</span><span class="s2">&quot;/&quot;</span><span class="p">)</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>  <span class="k">if</span> <span class="vi">@items</span><span class="o">.</span><span class="n">empty?</span>
</span><span class='line'>    <span class="n">flash</span><span class="o">[</span><span class="ss">:error</span><span class="o">]</span> <span class="o">=</span> <span class="s2">&quot;Can&#39;t find items with those properties&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="n">render</span> <span class="ss">:index</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Hash的类方法中括号是几个意思啊？他将一维数组转化成键值对hash！进一步证明，深入了解ruby是一个先决条件，让你成为一个专业的rails开发者。</p>

<br/>




<h2 id="2.4">2.4 命名路由</h2>


<p>事实上，你在这里学习的东西将直接进入我们在第3章中的相关路由的检查中。</p>

<p>命名路由这个方法是为了让作为程序员的你的生活更加简单，就应用程序而言，没有什么表面上看得见的效果。当你命名一个路由，一个新的方法将被定义并且在你的controller和view中使用，这个方法叫做name_url（name是你给路由的name），并且调用这个方法，使用合理的参数使路由产生相应的URL。</p>

<p>另外，有一个方法叫做name_path也会被创建，它会产生URL中没有协议和host的部分。</p>

<br/>




<h3 id="2.4.1">2.4.1 创建一个命名路由</h3>


<hr />

<p>为路由命名的方法是在路由规则中使用:as参数：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">get</span> <span class="s1">&#39;help&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;help#index&#39;</span><span class="p">,</span> <span class="ss">as</span><span class="p">:</span> <span class="s1">&#39;help&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>在这个例子中，你将可以得到两个方法：help_url和help_path，你可以在使用到url时用这两个方法：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">link_to</span> <span class="s2">&quot;Help&quot;</span><span class="p">,</span> <span class="n">help_path</span>
</span></code></pre></td></tr></table></div></figure>


<p>当然，对辨识和产生也有效，该模式字符串包括静态字符串组件“help”。因此，你看到超链接的路径是：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>/help
</span></code></pre></td></tr></table></div></figure>


<p>当有人点击这个link，help controller的index方法将会被调用。</p>

<h3>Xavier 说：</h3>

<blockquote><p>你可以在 console 中直接使用app 对象测试命名路由：</p></blockquote>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'> <span class="o">&gt;&gt;</span> <span class="n">app</span><span class="o">.</span><span class="n">clients_path</span>
</span><span class='line'> <span class="o">=&gt;</span> <span class="s2">&quot;/clients&quot;</span>
</span><span class='line'>
</span><span class='line'> <span class="o">&gt;&gt;</span> <span class="n">app</span><span class="o">.</span><span class="n">clients_url</span>
</span><span class='line'> <span class="o">=&gt;</span> <span class="s2">&quot;http://www.example.com/clients&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>命名路由给你省下很多生成路由的功夫，虽然如此，但是你还是需要为你的路由模式字符串任何段键提供相对应的值。</p>

<br/>




<h3 id="2.4.2"> 2.4.2 name_path vs name_url</h3>


<hr />

<p>当你创建一个命名路由，你几乎就是创建了两个helper方法，在之前的例子中，那两个路由方法分别是helper_path 和 helper_url，不同的是helper_url产生的是整个url，包括域名和协议。然而，_path产生的仅仅是路径部分。（有时候作为绝对路径或相对路径）</p>

<p>根据HTTP规范，重定向可以定义一个可以被编译的URI，这意味着它是一个完全合格的网址。因此，如果你想要坚持严谨，当你使用命名路由作为redirect_to的参数时，你可能需要总是运用_url版本。</p>

<p>其实redirect_to可以完美支持命名路由helper方法<em>path生成的相对路径。事实上，除了重定向(redirect)，还有永久链接（permalink）和一些其他情况，Rails都建议用</em>path代替_url方法，每当你这么做，基于HTTP头部请求、document的一个元素或是URL，他都会产生较短的字符串和用户代理（浏览器或其他的东西）可以推断出完全合格的URL。</p>

<p>如果你在练习这篇文章的代码之时，你可能会发现基本上<em>url和</em>path没什么区别。但是，我更倾向于在一般讨论中使用<em>url这种风格，而在view中使用</em>path风格（例如link_to或form_for）。这基本是书写风格方面的问题。使用<em>url更普遍，使用</em>path则更专业。</p>

<h3>使用字面的URL</h3>

<blockquote><p>如果你想要，你可以将路径或URL硬编码作为link_to或是redirect_to的字符串参数，举个例子：</p></blockquote>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">link_to</span> <span class="s2">&quot;Help&quot;</span><span class="p">,</span> <span class="ss">controller</span><span class="p">:</span> <span class="s2">&quot;main&quot;</span><span class="p">,</span> <span class="ss">action</span><span class="p">:</span> <span class="s2">&quot;help&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<blockquote><p>可以使用下面来替代：</p></blockquote>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">link_to</span> <span class="s2">&quot;Help&quot;</span><span class="p">,</span> <span class="s2">&quot;/main/help&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<blockquote><p>然而，在路由系统中使用字面路径或字面URL，你需要自己维护他（如果这是适合你做的方法，你当然可以使用Ruby的字符串插值技术插入值，但这真的符合Rails的两大原则吗？）</p></blockquote>

<br/>




<h3 id="2.4.3">2.4.3 给你的路由命名</h3>


<hr />

<p>最好的命名方法是按照REST的惯例，在另一个方面，你还需要自上而下的考虑，那就是，你需要在你的应用中写怎样的代码让创建路由成为可能。</p>

<p>举个例子，调用link_to:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">link_to</span> <span class="s2">&quot;Auction of </span><span class="si">#{</span><span class="n">item</span><span class="o">.</span><span class="n">name</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="ss">controller</span><span class="p">:</span> <span class="s2">&quot;items&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="ss">action</span><span class="p">:</span> <span class="s2">&quot;show&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nb">id</span><span class="p">:</span> <span class="n">item</span><span class="o">.</span><span class="n">id</span>
</span></code></pre></td></tr></table></div></figure>


<p>这个路由规则匹配路径是（最普通的路由）</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">get</span> <span class="s2">&quot;item/:id&quot;</span> <span class="o">=&gt;</span> <span class="s2">&quot;items#show&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>可以确定的是这样简短的路由会更加好看，毕竟，路由规则总是定义了controller和action。
下面这是item命名路由的很好的候选：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">get</span> <span class="s2">&quot;item/:id&quot;</span> <span class="o">=&gt;</span> <span class="s2">&quot;items#show&quot;</span><span class="p">,</span> <span class="ss">as</span><span class="p">:</span> <span class="s2">&quot;item&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>通过在link_to中引入item_path来改善产生路由：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">link_to</span> <span class="s2">&quot;Auctionof</span><span class="si">#{</span><span class="n">item</span><span class="o">.</span><span class="n">name</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">,</span> <span class="n">item_path</span><span class="p">(</span><span class="nb">id</span><span class="p">:</span> <span class="n">item</span><span class="o">.</span><span class="n">id</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>给路由一个简短的命名，使我们省略一些查询路由的工作，提高效率，</p>

<br/>




<h3 id="2.4.4">2.4.4 参数糖</h3>


<hr />

<p>事实上，你给item_path的参数可以更短。如果你需要像命名路由提供一个id参数，完全可以直接将这个:id的值作为参数。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">link_to</span> <span class="s2">&quot;Auction of </span><span class="si">#{</span><span class="n">item</span><span class="o">.</span><span class="n">name</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">,</span> <span class="n">item_path</span><span class="p">(</span><span class="n">item</span><span class="o">.</span><span class="n">id</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>语法糖更加牛B：你可以传一个对象，Rails自动获取其中的id：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">link_to</span> <span class="s2">&quot;Auction of </span><span class="si">#{</span><span class="n">item</span><span class="o">.</span><span class="n">name</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">,</span> <span class="n">item_path</span><span class="p">(</span><span class="n">item</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>这些原则继承命名路由中模式字符串的其他段键，举个例子，如果你有一个路由像：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">get</span> <span class="s2">&quot;auction/:auction_id/item/:id&quot;</span> <span class="o">=&gt;</span> <span class="s2">&quot;items#show&quot;</span><span class="p">,</span> <span class="ss">as</span><span class="p">:</span> <span class="s2">&quot;item&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>你可以这样调用它：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">link_to</span> <span class="s2">&quot;Auction of </span><span class="si">#{</span><span class="n">item</span><span class="o">.</span><span class="n">name</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">,</span> <span class="n">item_path</span><span class="p">(</span><span class="n">auction</span><span class="p">,</span> <span class="n">item</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>然后你会得到像下面的路径：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>/auction/5/item/11
</span></code></pre></td></tr></table></div></figure>


<p>在这里，我们让Rails自动推断auction和item的id值，它是通过你所传递给命名路由helper方法的参数（这个参数不管是否hash）调用to_param方法。只要你按照顺序给他们传递参数，就能获得对应的id值。</p>

<br/>




<h3 id="2.4.5">2.4.5 你的糖中还有糖吗？</h3>


<hr />

<p>而且，你不需要让Rails路由生成id值插入URL中，你可以通过在你的model中覆盖 to_param 方法来改变这个值。</p>

<p>假设你想要你的auction的item的描述信息出现在你的URL中。那么，在你的model中item.rb文件，请覆盖to_params方法；
在这里，我们覆盖它，让它提供一个“munged” （除去标点符号和加入连字符）。使用parameterize方法添加到Active Support的string中，它会使你的字符串转化成适合url的漂亮字符串。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">to_param</span>
</span><span class='line'> <span class="n">description</span><span class="o">.</span><span class="n">parameterize</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>随后，调用item_path(auction, item)方法，将会产生如下内容：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>/auction/3/item/cello-bow
</span></code></pre></td></tr></table></div></figure>


<p>当然，如果你在调用处区域用“cello-bow”代替id值，你将需要再次挖出对象。
博客应用利用这种技术创建slugs用来作为永久链接通常有一个单独字段来存储毁掉版本的部分路径的标题。
这样，我们可以这样做：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Item</span><span class="o">.</span><span class="n">where</span><span class="p">(</span><span class="n">munged_description</span><span class="p">:</span> <span class="n">params</span><span class="o">[</span><span class="ss">:id</span><span class="o">]</span><span class="p">)</span><span class="o">.</span><span class="n">first!</span>
</span></code></pre></td></tr></table></div></figure>


<p>去查找正确的item记录。（没错，你可以在路由中调用id以外的其他东西使他更加清楚）</p>

<h3>Courtenay 说：</h3>

<blockquote><p>为什么在URL中不使用数字表示呢？</p>

<p>首先，你的竞争者可以通过url知道你创建了多少个auction。</p>

<p>连续数字的id也允许蜘蛛自动偷窃你的内容，成为进入你数据库的窗口。</p>

<p>使用文字使url更加好看。</p></blockquote>

<br/>




<h2 id="2.5">2.5 作用域的路由规则</h2>


<p>Rails提供各种方法给相关路由规则捆绑在一起。这都基于使用scope方法和它的各种快捷方式。打个比方，你想要给auctions添加如下路由：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">get</span> <span class="s1">&#39;auctions/new&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;auctions#new&#39;</span>
</span><span class='line'><span class="n">get</span> <span class="s1">&#39;auctions/edit/:id&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;auctions#edit&#39;</span>
</span><span class='line'><span class="n">post</span> <span class="s1">&#39;auctions/pause/:id&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;auctions#pause&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>你可以dry你的routes.rb文件，使用scope方法代替:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">scope</span> <span class="ss">controller</span><span class="p">:</span> <span class="ss">:auctions</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">get</span> <span class="s1">&#39;auctions/new&#39;</span> <span class="o">=&gt;</span> <span class="ss">:new</span>
</span><span class='line'>    <span class="n">get</span> <span class="s1">&#39;auctions/edit/:id&#39;</span> <span class="o">=&gt;</span> <span class="ss">:edit</span>
</span><span class='line'>    <span class="n">post</span> <span class="s1">&#39;auctions/pause/:id&#39;</span> <span class="o">=&gt;</span> <span class="ss">:pause</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>接着，你可以再次dry它，通过在scope方法添加:path参数：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">scope</span> <span class="ss">path</span><span class="p">:</span> <span class="s1">&#39;/auctions&#39;</span><span class="p">,</span> <span class="ss">controller</span><span class="p">:</span> <span class="ss">:auctions</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">get</span> <span class="s1">&#39;new&#39;</span> <span class="o">=&gt;</span> <span class="ss">:new</span>
</span><span class='line'>  <span class="n">get</span> <span class="s1">&#39;edit/:id&#39;</span> <span class="o">=&gt;</span> <span class="ss">:edit</span>
</span><span class='line'>  <span class="n">post</span> <span class="s1">&#39;pause/:id&#39;</span> <span class="o">=&gt;</span> <span class="ss">:pause</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<br/>




<h3 id="2.5.1">2.5.1 Controller</h3>


<hr />

<p>scope方法接收一个:controller项（或者可以理解为接收一个符号作为第一个参数并且会被假定为controller）。因此，下面两种定义方式是相同的：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">scope</span> <span class="ss">controller</span><span class="p">:</span> <span class="ss">:auctions</span> <span class="k">do</span>
</span><span class='line'><span class="n">scope</span> <span class="ss">:auctions</span> <span class="k">do</span>
</span></code></pre></td></tr></table></div></figure>


<p>为了使之更为明显，你可以使用controller方法替代scope方法，本质上也是一种语法糖：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">controller</span> <span class="ss">:auctions</span> <span class="k">do</span>
</span></code></pre></td></tr></table></div></figure>




<br/>




<h3 id="2.5.2">2.5.2 路径前缀</h3>


<hr />

<p>scope方法接收一个:path选项进行限制（或者你可以理解为接收一字符串作为第一个参数并且会被作为路径的前缀），
因此，下面两种定义是相同的：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">scope</span> <span class="ss">path</span><span class="p">:</span> <span class="s1">&#39;/auctions&#39;</span> <span class="k">do</span>
</span><span class='line'><span class="n">scope</span> <span class="s1">&#39;/auctions&#39;</span> <span class="k">do</span>
</span></code></pre></td></tr></table></div></figure>


<p>Rails4有一个新功能，可以给:path传递符号代替原来的字符串作为参数，看下面定义：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">scope</span> <span class="ss">:auctions</span><span class="p">,</span> <span class="ss">:archived</span> <span class="k">do</span>
</span></code></pre></td></tr></table></div></figure>


<p>将scope下地所有路由嵌套在&#8221;/auctions/archived&#8221;路径下</p>

<br/>




<h3 id="2.5.3">2.5.3 命名前缀</h3>


<hr />

<p>scope方法也可以接收:as选项,它可以影响产生命名路由的helper方法。
例如，路由：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">scope</span> <span class="ss">:auctions</span><span class="p">,</span> <span class="ss">as</span><span class="p">:</span> <span class="s1">&#39;admin&#39;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">get</span> <span class="s1">&#39;new&#39;</span> <span class="o">=&gt;</span> <span class="ss">:new</span><span class="p">,</span> <span class="ss">as</span><span class="p">:</span> <span class="s1">&#39;new_auction&#39;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>将会产生URL的helper方法admin_new_auction_url.</p>

<br/>




<h3 id="2.5.4">2.5.4 命名空间</h3>


<hr />

<p>URL可以使用命名空间namespace方法进行分组，这是一个语法糖，被module包裹，将命名前缀和路径前缀设置为一个声明。
命名空间namespace方法将第一个参数转化为字符串，这就是为什么一些代码例子你会看到它接收一个符号：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">namespace</span> <span class="ss">:auctions</span><span class="p">,</span> <span class="ss">:controller</span> <span class="o">=&gt;</span> <span class="ss">:auctions</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">get</span> <span class="s1">&#39;new&#39;</span> <span class="o">=&gt;</span> <span class="ss">:new</span>
</span><span class='line'>  <span class="n">get</span> <span class="s1">&#39;edit/:id&#39;</span> <span class="o">=&gt;</span> <span class="ss">:edit</span>
</span><span class='line'>  <span class="n">post</span> <span class="s1">&#39;pause/:id&#39;</span> <span class="o">=&gt;</span> <span class="ss">:pause</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<br/>




<h3 id="2.5.5">2.5.5 捆绑约束</h3>


<hr />

<p>如果你发现你在相关的路由中重复写了一些相似的段键约束，你可以将它们捆绑在一起，然后在scope方法中使用:constraints选项</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">scope</span> <span class="ss">controller</span><span class="p">:</span> <span class="ss">:auctions</span><span class="p">,</span> <span class="ss">constraints</span><span class="p">:</span> <span class="p">{</span><span class="ss">:id</span><span class="o">=&gt;</span><span class="sr">/\d+/</span><span class="p">}</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">get</span> <span class="s1">&#39;edit/:id&#39;</span> <span class="o">=&gt;</span> <span class="ss">:edit</span>
</span><span class='line'>  <span class="n">post</span> <span class="s1">&#39;pause/:id&#39;</span> <span class="o">=&gt;</span> <span class="ss">:pause</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>它就像是给定的scope需要一个路由子规则来约束。事实上，如果你给一个没有接收段键值的规则加上约束，将会导致路由破坏。
既然你是嵌套的，你可能要使用的约束方法:constraints，它只是一种使规则定义更紧凑的语法糖。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">scope</span> <span class="ss">path</span><span class="p">:</span> <span class="s1">&#39;/auctions&#39;</span><span class="p">,</span> <span class="ss">controller</span><span class="p">:</span> <span class="ss">:auctions</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">get</span> <span class="s1">&#39;new&#39;</span> <span class="o">=&gt;</span> <span class="ss">:new</span>
</span><span class='line'>  <span class="n">constraints</span> <span class="nb">id</span><span class="p">:</span> <span class="sr">/\d+/</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">get</span> <span class="s1">&#39;edit/:id&#39;</span> <span class="o">=&gt;</span> <span class="ss">:edit</span>
</span><span class='line'>    <span class="n">post</span> <span class="s1">&#39;pause/:id&#39;</span> <span class="o">=&gt;</span> <span class="ss">:pause</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>为了重用模块化，你可以提供一个约束方法与有matches?方法的对象。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">DateFormatConstraint</span>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">matches?</span><span class="p">(</span><span class="n">request</span><span class="p">)</span>
</span><span class='line'>    <span class="n">request</span><span class="o">.</span><span class="n">params</span><span class="o">[</span><span class="ss">:date</span><span class="o">]</span> <span class="o">=~</span> <span class="sr">/\A\d{4}-\d\d-\d\d\z/</span> <span class="c1"># YYYY-MM-DD</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># inroutes.rb</span>
</span><span class='line'><span class="n">constraints</span><span class="p">(</span><span class="no">DateFormatConstraint</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">get</span> <span class="s1">&#39;since/:date&#39;</span> <span class="o">=&gt;</span> <span class="ss">:since</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>在这个特殊的例子中（DateFormatConstraint），如果一个图谋不轨或怀有恶意的用户在URL中输入不好的格式的日期作为参数，Rails将会返回404状态码代替抛出异常。</p>

<br/>




<h2 id="2.6">2.6 路由列表</h2>


<p>一个好用的路由列表在Rails项目中被作为标准的rake任务使用，通过在你的应用目录下输入rake routes调用它。举个例子，这里输出一个routes文件包含仅仅一个resources :products规则：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>rake routes
</span><span class='line'>  products      GET   /products<span class="o">(</span>.:format<span class="o">)</span>            products#index
</span><span class='line'>                POST   /products<span class="o">(</span>.:format<span class="o">)</span>           products#create
</span><span class='line'>  new_product   GET    /products/new<span class="o">(</span>.:format<span class="o">)</span>       products#new
</span><span class='line'>  edit_product  GET    /products/:id/edit<span class="o">(</span>.:format<span class="o">)</span>  products#edit
</span><span class='line'>  product       GET    /products/:id<span class="o">(</span>.:format<span class="o">)</span>       products#show
</span><span class='line'>                PATCH  /products/:id<span class="o">(</span>.:format<span class="o">)</span>       products#update
</span><span class='line'>                PUT    /products/:id<span class="o">(</span>.:format<span class="o">)</span>       products#update
</span><span class='line'>                DELETE /products/:id<span class="o">(</span>.:format<span class="o">)</span>       products#destroy
</span></code></pre></td></tr></table></div></figure>


<p>输出分为四列，前两列是可选的并且包含路由名和http方法约束，当提供这两列的内容，第三列包含URL映射的字符串。最后，第四列指示路由应该映射哪个controller和哪个action，加上已经定义的路由段键约束。</p>

<p>注意路由任务可以选择一个controller作为环境来查找，看下面例子：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>rake routes <span class="nv">CONTROLLER</span><span class="o">=</span>products
</span></code></pre></td></tr></table></div></figure>


<p>这将会列出所有与ProductsController相关的路由。</p>

<br/>




<h2>总结</h2>


<p>上半篇帮助你全面了解Rails的普通路由规则和路由系统的两个怎样的目的。</p>

<ul>
<li><p>识别传入的请求并且映射到相应的controller和action，以及额外的变量。</p></li>
<li><p>识别URL参数方法（例如link_to）匹配相应路径，以便生成适当的HTML链接。</p></li>
</ul>


<p>我们通过在定义路由时使用一些先进的技术如正则表达式和通配符，还有在scope方法下捆绑共享相关路由来创立属于我们自己的路由。</p>

<p>最后，再继续进行之前，我们应该确保你理解如何命名路由工作，以及为什么它们让你变成更容易，让你的视图代码更加简洁。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails Enviroments and Configuration]]></title>
    <link href="http://TsaiKoga.github.com/blog/2015/07/25/rails-enviroments-and-configuration/"/>
    <updated>2015-07-25T13:03:00+08:00</updated>
    <id>http://TsaiKoga.github.com/blog/2015/07/25/rails-enviroments-and-configuration</id>
    <content type="html"><![CDATA[<p>对于 Rails 的环境和配置，这里翻译了一篇文章。如果有翻译错的地方，欢迎指出。</p>

<h2>目录：</h2>

<h4><a href="#1.1">1.1 Bunlder</a></h4>

<h5><a href="#1.1.1">1.1.1 Gemfile</a></h5>

<h6><a href="#1.1.1.1">1.1.1.1 直接从Git仓库加载 gems</a></h6>

<h6><a href="#1.1.1.2">1.1.1.2 从文件系统加载gem</a></h6>

<h5><a href="#1.1.2">1.1.2 安装Gem</a></h5>

<h5><a href="#1.1.3">1.1.3 Gem Locking</a></h5>

<h5><a href="#1.1.4">1.1.4 Gem Packages</a></h5>

<h4><a href="#1.2">1.2 启动和应用设置</a></h4>

<h5><a href="#1.2.1">1.2.1 application.rb</a></h5>

<h6><a href="#1.2.1.1">1.2.1.1 修改加载路径</a></h6>

<h6><a href="#1.2.1.2">1.2.1.2 Time Zones</a></h6>

<h6><a href="#1.2.1.3">1.2.1.3 Localization</a></h6>

<h6><a href="#1.2.1.4">1.2.1.4 Generator 的默认设置</a></h6>

<h5><a href="#1.2.2">1.2.2 Initializers</a></h5>

<h6><a href="#1.2.2.1">1.2.2.1 Backtrace Silencers</a></h6>

<h6><a href="#1.2.2.2">1.2.2.2 过滤参数日志</a></h6>

<h6><a href="#1.2.2.3">1.2.2.3 Inflections</a></h6>

<h6><a href="#1.2.2.4">1.2.2.4 自定义MIME Types</a></h6>

<h6><a href="#1.2.2.5">1.2.2.5 Secret Token</a></h6>

<h6><a href="#1.2.2.6">1.2.2.6 Session Store</a></h6>

<h6><a href="#1.2.2.7">1.2.2.7 参数包装</a></h6>

<h5><a href="#1.2.3">1.2.3 额外的配置</a></h5>

<h6><a href="#1.2.3.1">1.2.3.1 Log-Level覆盖</a></h6>

<h6><a href="#1.2.3.2">1.2.3.2 Schema Dumper</a></h6>

<h4><a href="#1.3">1.3 开发模式</a></h4>

<h5><a href="#1.3.1">1.3.1 自动加载类</a></h5>

<h5><a href="#1.3.2">1.3.2 Eager Load</a></h5>

<h5><a href="#1.3.3">1.3.3 错误报告</a></h5>

<h5><a href="#1.3.4">1.3.4 缓存</a></h5>

<h5><a href="#1.3.5">1.3.5 抛出发送错误</a></h5>

<h5><a href="#1.3.6">1.3.6 反对通知</a></h5>

<h5><a href="#1.3.7">1.3.7 慢查询的解释</a></h5>

<h5><a href="#1.3.8">1.3.8 待迁移错误页面</a></h5>

<h5><a href="#1.3.9">1.3.9 Assets的Debug模式</a></h5>

<h4><a href="#1.4">1.4 测试模式</a></h4>

<h4><a href="#1.5">1.5生产模式</a></h4>

<h5><a href="#1.5.1">1.5.1 Assets</a></h5>

<h4><a href="#1.6">1.6 日志</a></h4>

<h5><a href="#1.6.1">1.6.1 Rails的日志文件</a></h5>

<h5><a href="#1.6.2">1.6.2 标记日志</a></h5>

<h5><a href="#1.6.3">1.6.3 日志文件分析</a></h5>

<h6><a href="#1.6.3.1">1.6.3.1 Rails::Subscriber.colorize_logging</a></h6>

<h4><a href="#1.6.4">1.6.4 总结</a></h4>

<p>除了 RAILS_ENV 可以开启所需的环境，你也可以通过设置RACK_ENV 可以设置默认环境(development, production, test)</p>

<h2 id="1.1"> 1.1 Bundler</h2>


<p>Bundler 虽然不是Rails4 的特定工具，但是它却能够很好地解决你应用的gems依赖。
Bundler 通过一个配置文件Gemfile 中解决一些列版本的gems依赖。</p>

<h3 id="1.1.1"> 1.1.1 Gemfile</h3>


<hr />

<p>在你的Rails应用的根目录下，这个文件定义了你的Rails应用所有依赖，包括你所用的Rails 版本。Gemfile的基础语法很简单，如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">gem</span> <span class="s1">&#39;kaminari&#39;</span>
</span><span class='line'><span class="n">gem</span> <span class="s1">&#39;nokogiri&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>可以将这些gem依赖放在一个或多个环境中，具体做法是定义一个或多个环境符号的块，如下例子：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">group</span> <span class="ss">:development</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">gem</span> <span class="s1">&#39;pry-rails&#39;</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">group</span> <span class="ss">:test</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">gem</span> <span class="s1">&#39;capybara&#39;</span>
</span><span class='line'>  <span class="n">gem</span> <span class="s1">&#39;database_cleaner&#39;</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">group</span> <span class="ss">:development</span><span class="p">,</span> <span class="ss">:test</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">gem</span> <span class="s1">&#39;rspec-rails&#39;</span>
</span><span class='line'>  <span class="n">gem</span> <span class="s1">&#39;factory_girl_rails&#39;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>这个gem 方法还接受第二个可选参数，也就是Rubygem的版本号，如果此参数为空，则会自动下载最新稳定的版本。
如何定义这第二个参数呢？看以下例子：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">gem</span> <span class="s1">&#39;nokogiri&#39;</span><span class="p">,</span> <span class="s1">&#39;1.5.6&#39;</span>
</span><span class='line'><span class="n">gem</span> <span class="s1">&#39;pry-rails&#39;</span><span class="p">,</span> <span class="s1">&#39;&gt; 0.2.2&#39;</span>
</span><span class='line'><span class="n">gem</span> <span class="s1">&#39;decent_exposure&#39;</span><span class="p">,</span> <span class="s1">&#39;~&gt;2.0.1&#39;</span>
</span><span class='line'><span class="n">gem</span> <span class="s1">&#39;draper&#39;</span><span class="p">,</span> <span class="s1">&#39;1.0.0.beta6&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>有些时候，你的gem需要用require语句加载进来，在这种情况下，你只需要在gem 的最右边声明就行了。
如：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">gem</span> <span class="s1">&#39;webmock&#39;</span><span class="p">,</span> <span class="nb">require</span><span class="p">:</span> <span class="s1">&#39;webmock/rspec&#39;</span>
</span></code></pre></td></tr></table></div></figure>




<h4 id="1.1.1.1"> 1.1.1.1 直接从Git仓库加载 gems</h4>


<hr />

<p>现在我们可以从<a href="https://rubygems.org">https://rubygems.org</a> 下载gems,也可以非常简单的从gem的仓库获取这个gem，如下代码：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">gem</span> <span class="s1">&#39;carrierwave&#39;</span><span class="p">,</span> <span class="ss">git</span><span class="p">:</span> <span class="s1">&#39;git@github.com:jnicklas/carrierwave.git&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>如果这个gem的源代码放在github上面，可以直接用:github ：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">gem</span> <span class="s1">&#39;carrierwave&#39;</span><span class="p">,</span> <span class="ss">github</span><span class="p">:</span><span class="s1">&#39;jnicklas/carrierwave&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>如果有几个gemspec共用一个git仓库，可以像如下代码操作:mZ    git &lsquo;git://github.com/rails/rails.git&rsquo;</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">gem</span> <span class="s1">&#39;railties&#39;</span>
</span><span class='line'><span class="n">gem</span> <span class="s1">&#39;action_pack&#39;</span>
</span><span class='line'><span class="n">gem</span> <span class="s1">&#39;active_model&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>另外，你可以通过gem的所属仓库，指定对应的ref，branch或者是tag：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">git</span> <span class="s1">&#39;git://github.com/rails/rails.git&#39;</span><span class="p">,</span> <span class="ss">ref</span><span class="p">:</span> <span class="s2">&quot;4aded&quot;</span>
</span><span class='line'><span class="n">git</span> <span class="s1">&#39;git://github.com/rails/rails.git&#39;</span><span class="p">,</span> <span class="ss">branch</span><span class="p">:</span> <span class="s1">&#39;3-2-stable&#39;</span>
</span><span class='line'><span class="n">git</span> <span class="s1">&#39;git://github.com/rails/rails.git&#39;</span><span class="p">,</span> <span class="ss">tag</span><span class="p">:</span> <span class="s1">&#39;v3.2.11&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">gem</span> <span class="s1">&#39;nokogiri&#39;</span><span class="p">,</span> <span class="ss">git</span><span class="p">:</span> <span class="s1">&#39;git://github.com/tenderlove/nokogiri.git&#39;</span><span class="p">,</span> <span class="n">ref</span> <span class="o">=&gt;</span> <span class="s1">&#39;0eec4&#39;</span>
</span></code></pre></td></tr></table></div></figure>




<h4 id="1.1.1.2"> 1.1.1.2 从文件系统加载gem</h4>


<hr />

<p>有时候你在开发模式下，想要加载一个gem（例如你fork了一个gem，作了修改，但是没有提交，想测试一下）可以使用:path：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">gem</span> <span class="s1">&#39;nokogiri&#39;</span><span class="p">,</span> <span class="ss">path</span><span class="p">:</span> <span class="s1">&#39;~/code/nokogiri&#39;</span>
</span></code></pre></td></tr></table></div></figure>




<h3 id="1.1.2"> 1.1.2 安装Gem</h3>


<hr />

<p>当你对Gemfile做了修改，调用install命令确保Gemfile所有依赖都有效。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>bundle install
</span><span class='line'>Fetching gem metadata from https://rubygems.org/.........
</span><span class='line'>Fetching gem metadata from https://rubygems.org/.........
</span><span class='line'>Fetching git://github.com/rails/rails.git
</span><span class='line'>Fetching git://github.com/rails/activerecord-deprecated_finders.git
</span><span class='line'>Fetching git://github.com/rails/arel.git
</span><span class='line'>Fetching git://github.com/rails/coffee-rails.git
</span><span class='line'>Fetching git://github.com/rails/sprockets-rails.git
</span><span class='line'>Fetching git://github.com/rails/sass-rails.git
</span><span class='line'>Installing rake <span class="o">(</span>10.0.3<span class="o">)</span>
</span><span class='line'>Installing i18n <span class="o">(</span>0.6.1<span class="o">)</span>
</span><span class='line'>.........
</span></code></pre></td></tr></table></div></figure>


<p>install命令会更新所有你的Gemfile中不与其他依赖冲突的最新版本依赖。</p>

<h3 id="1.1.3"> 1.1.3 Gem Locking</h3>


<hr />

<p>每一次更新或安装Gem，Bundler都会计算你项目的gem依赖树，并将结果存储在Gemfile.lock文件中。所以，从这点看，在使用Gem时，Gemfile将会被锁定，Bundler只会加载特定的版本的Gem。</p>

<h3 id="1.1.4"> 1.1.4 Gem Packages</h3>


<hr />

<p>你可以将你所有的gems打包到vendor/cache目录中，使用如下命令：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>bundle Package
</span></code></pre></td></tr></table></div></figure>


<p>当运行bundle install时，将会直接使用vendor/cache目录中的gem而不连接<a href="https://rubygems.org">https://rubygems.org</a></p>

<p>注意：无Rails的脚本运行要加上bundle exec 来初始化，如：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>bundle <span class="nb">exec </span>guard
</span></code></pre></td></tr></table></div></figure>


<p>Bundler还可以为你所有的可执行bundle创建binstubs。通过调用bundle install带上参数&mdash;binstubs，就会在你的根目录下创建一个bin目录，其中包括一些RubyGems环境的可执行脚本：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1">#!/usr/bin/env ruby</span>
</span><span class='line'><span class="c1">#</span>
</span><span class='line'><span class="c1"># This file was generated by Bundler.</span>
</span><span class='line'><span class="c1">#</span>
</span><span class='line'><span class="c1"># The application &#39;guard&#39; is installed as part of a gem, and</span>
</span><span class='line'><span class="c1"># this file is here to facilitate running it.</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;pathname&#39;</span>
</span><span class='line'><span class="no">ENV</span><span class="o">[</span><span class="s1">&#39;BUNDLE_GEMFILE&#39;</span><span class="o">]</span> <span class="o">||=</span> <span class="no">File</span><span class="o">.</span><span class="n">expand_path</span><span class="p">(</span><span class="s2">&quot;../../Gemfile&quot;</span><span class="p">,</span>
</span><span class='line'>                                           <span class="no">Pathname</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="bp">__FILE__</span><span class="p">)</span><span class="o">.</span><span class="n">realpath</span><span class="p">)</span>
</span><span class='line'><span class="n">mZ</span>    <span class="nb">require</span> <span class="s1">&#39;rubygems&#39;</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;bundler/setup&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="nb">load</span> <span class="no">Gem</span><span class="o">.</span><span class="n">bin_path</span><span class="p">(</span><span class="s1">&#39;guard&#39;</span><span class="p">,</span><span class="s1">&#39;guard&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>使用binstubs，可以不用加bundle exec 而直接从bin/目录执行脚本.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>bin/guard
</span></code></pre></td></tr></table></div></figure>


<p>你还可以将./bin加入$PATH路径，然后就可以轻松的执行：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>guard
</span></code></pre></td></tr></table></div></figure>


<p>使用Rails4创建项目，会自动创建binstubs，创建了bin/bundle, bin/rails,bin/rake，更新特定的stubs，可以使用下列命令：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>rake rails:update:bin
</span></code></pre></td></tr></table></div></figure>




<h2 id="1.2"> 1.2 启动和应用设置</h2>


<hr />

<p>用Rails开启进程处理请求（例如：rails sever），第一件事就是加载config/boot.rb文件。
建立整个rails栈，主要引用三个文件：</p>

<blockquote><p>boot.rb: 建立bunlder和加载路径
application.rb: 加载rails的gems，为gems定义rails环境，进行应用配置
environments.rb:运行所有初始化</p></blockquote>

<h3 id="1.2.1"> 1.2.1 application.rb</h3>


<hr />

<p>config/application.rb是Rails应用设置的主要文件，也是config/environments.rb最先加载的文件。
让我们一步一步来看这个文件，application.rb的下一行，一旦config/boot.rb加载，轮子就转动</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="no">File</span><span class="o">.</span><span class="n">expand_path</span><span class="p">(</span><span class="s1">&#39;../boot&#39;</span><span class="p">,</span><span class="bp">__FILE__</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>对于下面这行代码：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;rails/all&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>这你可以更改，将你所想要的组件加载进来，而不是加载所有的rails组件。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># To pick the frameworks you want, remove &#39;require &quot;rails/all&quot;&#39;</span>
</span><span class='line'><span class="c1"># and list the framework railties that you want:</span>
</span><span class='line'><span class="c1"># </span>
</span><span class='line'><span class="c1"># require &quot;active_model/railtie&quot;</span>
</span><span class='line'><span class="c1"># require &quot;active_record/railtie&quot;</span>
</span><span class='line'><span class="c1"># require &quot;action_controller/railtie&quot;</span>
</span><span class='line'><span class="c1"># require &quot;action_mailer/railtie&quot; </span>
</span><span class='line'><span class="c1"># require &quot;action_view/railtie&quot;</span>
</span><span class='line'><span class="c1"># require &quot;sprockets/railtie&quot;</span>
</span><span class='line'><span class="c1"># require &quot;rails/test_unit/railtie&quot;</span>
</span></code></pre></td></tr></table></div></figure>




<h4 id="1.2.1.1"> 1.2.1.1 修改加载路径</h4>


<hr />

<p>默认的rails会寻找标准目录如：app/models 或是app/controllers,自动作为加载路径，你也可以自己添加目录到加载路径：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># Custom directories with classes and modules you want to be auto loadable</span>
</span><span class='line'><span class="c1">#config.autoload_paths += %W(#{config.root}/extras)</span>
</span></code></pre></td></tr></table></div></figure>


<p>注意：config.root指向你的rails应用的根目录，因此如果你需要，想要用一个presenters的目录代替原有的models，可以这么做：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">config</span><span class="o">.</span><span class="n">autoload_paths</span> <span class="o">+=</span> <span class="sx">%W(</span><span class="si">#{</span><span class="n">config</span><span class="o">.</span><span class="n">root</span><span class="si">}</span><span class="sx">/app/presenters)</span>
</span></code></pre></td></tr></table></div></figure>


<p>这里的%W方法作为以空白隔开元素的数组，使代码构建更加方便。</p>

<h4 id="1.2.1.2"> 1.2.1.2 Time Zones</h4>


<hr />

<p>rails4默认的time zones是utc，你也可以覆盖它的默认值：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># Set Time.zone default to the specified zone and make activerecord</span>
</span><span class='line'><span class="c1"># auto-convert to this zone.</span>
</span><span class='line'><span class="c1"># Run &quot;rake-Dtime&quot; for a list of tasks for finding time zone names.</span>
</span><span class='line'><span class="n">config</span><span class="o">.</span><span class="n">time_zone</span> <span class="o">=</span> <span class="s1">&#39;CentralTime(US&amp;Canada)&#39;</span>
</span></code></pre></td></tr></table></div></figure>




<p><h4 id="1.2.1.3"> 1.2.1.3 Localization</h3></p>

<hr />

<p>Rails默认的语言Locale是:en 英文，你也可以在配置文件进行修改：</p>

<p><figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># The default locale is :en and all translations from</span>
</span><span class='line'><span class="c1"># config/locales/<em>.rb,yml are auto loaded.</span>
</span><span class='line'><span class="c1"># config.i18n.load_path += Dir[Rails.root.join(&#39;my&#39;,&#39;locales&#39;,</span>
</span><span class='line'>                                             <span class="c1"># &#39;</em>.{rb,yml}&#39;)]</span>
</span><span class='line'><span class="c1"># config.i18n.default_locale = :de</span>
</span></code></pre></td></tr></table></div></figure></p>

<p><h4 id="1.2.1.4"> 1.2.1.4 Generator 的默认设置</h4></p>

<hr />

<p>generator脚本可以根据你的工具链做出特定假定；在这里设置确定的值可以减少命令行参数的输入。
例如：运用没有features的Rspec和haml作为模板引擎时，我们可以这么做：</p>

<p><figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># Configure generators values. Many other options are available,</span>
</span><span class='line'><span class="c1"># be sure to check the documentation.</span>
</span><span class='line'><span class="n">config</span><span class="o">.</span><span class="n">generators</span> <span class="k">do</span> <span class="o">|</span><span class="n">g</span><span class="o">|</span>
</span><span class='line'>  <span class="n">g</span><span class="o">.</span><span class="n">template_engine</span> <span class="ss">:haml</span>
</span><span class='line'>  <span class="n">g</span><span class="o">.</span><span class="n">test_framework</span> <span class="ss">:rspec</span><span class="p">,</span> <span class="ss">fixture</span><span class="p">:</span> <span class="kp">false</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>注意：rubygems的一些gems像rspec-rails,haml-rails,factory_gril_rails已经为你做了这些处理的。</p>

<p><h3 id="1.2.2"> 1.2.2 Initializers</h3></p>

<hr />

<p>Rails2介绍了一个概念，将配置设置放入config/initializers目录中建立的一个小的ruby文件，config/initializers目录中的文件会在程序启动后被自动加载。</p>

<p>你可以增加自己需要的配置设置，通过再initializers目录中建立ruby文件，很多人喜欢在这个目录中建立文件设置常量，为了安全这些常量的值放在yml文件中，通过initializers目录中的rb文件进行引入并赋予常量。</p>

<p><h4 id="1.2.2.1">1.2.2.1 Backtrace Silencers</h4></p>

<hr />

<p>没人喜欢很长的exception的回溯跟踪，rails 有个机制可以减少回溯的层数（这种方法是删除行）。</p>

<p><figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># You can add backtrace silencers for libraries that you&#39;re using but</span>
</span><span class='line'><span class="c1"># don&#39;t wish to see in your backtraces.</span>
</span><span class='line'><span class="no">Rails</span><span class="o">.</span><span class="n">backtrace_cleaner</span><span class="o">.</span><span class="n">add_silencer</span><span class="p">{</span><span class="o">|</span><span class="n">line</span><span class="o">|</span><span class="n">line</span><span class="o">=~</span><span class="sr">/my_noisy_library/</span><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># You can also remove all the silencers if you&#39;re trying to debug a</span>
</span><span class='line'><span class="c1"># problem that might stem from framework code.</span>
</span><span class='line'><span class="no">Rails</span><span class="o">.</span><span class="n">backtrace_cleaner</span><span class="o">.</span><span class="n">remove_silencers!</span>
</span></code></pre></td></tr></table></div></figure></p>

<p><h4 id="1.2.2.2"> 1.2.2.2 过滤参数日志</h4></p>

<hr />

<p>当有请求到你的rails应用，默认的，rails的logs文件有一些细节：请求路径,http 方法，Ip地址和参数。倘若黑客利用某些方法得到你的日志文件，那么他就能看到这些敏感信息，包括密码信息。</p>

<p>filter_parameter_logging.rb 初始化器可以让你设置哪些请求参数需要从你的log文件中过滤掉。
如果rails 接收到请求参数被你设置的filter_parameters收集了，将会在你的log文件中标记为[FILTERED]。</p>

<p><figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># Configure sensitive parameters which will be filtered from the log file.</span>
</span><span class='line'><span class="no">Rails</span><span class="o">.</span><span class="n">application</span><span class="o">.</span><span class="n">config</span><span class="o">.</span><span class="n">filter_parameters</span> <span class="o">+=</span> <span class="o">[</span><span class="ss">:password</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure></p>

<p><h4 id="1.2.2.3"> 1.2.2.3 Inflections<h4></p>

<hr />

<p>Rails 有一个Infector类，它负责将字符串变为单复数，类名变表名，模块化类名，类名变外键名等（其中一些操作有滑稽的名字，如：dasherize）
默认的，对于一些不可数的名词，ActiveSupport这个gem的infections.rb文件中。
大多数时候，Infector类有一份得体的工作，就是把类名转化为相应复数的表名。</p>

<p><figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>rails console
</span><span class='line'>&gt;&gt; ActiveSupport::Inflector.pluralize <span class="s2">&quot;project&quot;</span>
</span><span class='line'><span class="o">=</span>&gt; <span class="s2">&quot;projects&quot;</span>
</span><span class='line'>&gt;&gt; ActiveSupport::Inflector.pluralize <span class="s2">&quot;virus&quot;</span>
</span><span class='line'><span class="o">=</span>&gt; <span class="s2">&quot;viri&quot;</span>
</span><span class='line'>&gt;&gt; <span class="s2">&quot;pensum&quot;</span>.pluralize <span class="c"># Inflector features are mixed into String by default</span>
</span><span class='line'><span class="o">=</span>&gt; <span class="s2">&quot;pensums&quot;</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>然而，你可以为infector添加新规则：在config/initializers/inflections.rb 文件：</p>

<p><figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="ss">ActiveSupport</span><span class="p">:</span><span class="ss">:Inflector</span><span class="o">.</span><span class="n">inflections</span><span class="p">(</span><span class="ss">:en</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">inflect</span><span class="o">|</span>
</span><span class='line'>  <span class="n">inflect</span><span class="o">.</span><span class="n">plural</span> <span class="sr">/^(ox)$/i</span><span class="p">,</span> <span class="s1">&#39;\1en&#39;</span>
</span><span class='line'>  <span class="n">inflect</span><span class="o">.</span><span class="n">singular</span> <span class="sr">/^(ox)en/i</span><span class="p">,</span> <span class="s1">&#39;\1&#39;</span>
</span><span class='line'>  <span class="n">inflect</span><span class="o">.</span><span class="n">irregular</span> <span class="s1">&#39;person&#39;</span><span class="p">,</span> <span class="s1">&#39;people&#39;</span>
</span><span class='line'>  <span class="n">inflect</span><span class="o">.</span><span class="n">uncountable</span> <span class="sx">%w( fish sheep  )</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></p>

<p><figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">activesupport</span><span class="o">/</span><span class="nb">test</span><span class="o">/</span><span class="n">inflector_test_cases</span><span class="o">.</span><span class="n">rb</span><span class="err">文件有一长串用</span><span class="no">Infector</span><span class="err">正确处理的复数转化列表，例如：</span>
</span><span class='line'>    <span class="s2">&quot;datum&quot;</span> <span class="o">=&gt;</span> <span class="s2">&quot;data&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;medium&quot;</span> <span class="o">=&gt;</span> <span class="s2">&quot;media&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;analysis&quot;</span> <span class="o">=&gt;</span> <span class="s2">&quot;analyses&quot;</span>
</span></code></pre></td></tr></table></div></figure></p>

<p><h4 id="1.2.2.4"> 1.2.2.4 自定义MIME Types</h4></p>

<hr />

<p>Rails支持标准的MIME TYPES设置(*/*, text/html, text/plain, text/javascript, text/css, text/calendar, text/csv, application/xml, application/rss+xml, application/atom+xml, application/x-yaml, multipart/form-data, application/x-www-form-urlencoded, application/json)：</p>

<p><table><tbody>
<tr><td><em>Short name</em></td> <td>respond_to<em> symbol</em></td>  <td><em>Aliases and Explanations</em> </td></tr>
<tr><td>text/html</td>  <td>:html, :xhtml </td>      <td>application/xhtml+xml</td></tr>
<tr><td>text/plain</td> <td>:text, :txt  </td>   <td>                 </td></tr>
<tr><td>text/javascript</td> <td>:js      </td> <td> application/javascript, application/x-javascript </td></tr>
<tr><td>text/css</td> <td>:css</td>   <td> Cascading style sheets     </td></tr>
<tr><td>text/calendar</td> <td>:ics</td>  <td>iCalendar format for sharing meeting requests and tasks </td></tr>
<tr><td>text/csv</td>  <td>:csv</td> <td> Comma-separated values </td></tr>
<tr><td>application/xml</td> <td>:xml</td> <td>   text/xml, application/x-xml </td></tr>
<tr><td>application/rss+xml</td> <td>:rss</td> <td>Really Simple Syndication format for web feeds</td></tr>
<tr><td>application/atom+xml</td> <td>:atom</td> <td>Atom Syndication Format for web feeds</td></tr>
<tr><td>application/x-yaml</td> <td>:yaml</td> <td>text/yaml &ndash; The human-readable data serialization format</td></tr>
<tr><td>application/x-www-form- urlencoded</td> <td>url_encoded_form</td> <td>The default content type of HTML forms</td></tr>
<tr><td>multipart/form-data</td> <td>:multipart_form</td> <td>Used for HTML forms that contain files, non-ASCII data, and
binary data</td></tr>
<tr><td>application/json</td> <td>:json</td> <td>text/x-json, application/jsonrequest-JavaScript Object Notation</td></tr>
</tbody></table></p>

<p>如果项目需要响应其他MIME TYPE，你需要再mime_types.rb文件中进行登记：</p>

<p><figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># Add new mime types for use in respond_to blocks:</span>
</span><span class='line'><span class="c1"># Mime::Type.register &quot;text/richtext&quot; ,:rtf</span>
</span><span class='line'><span class="c1"># Mime::Type.register_alias &quot;text/html&quot;, :iphone</span>
</span></code></pre></td></tr></table></div></figure></p>

<p><h4 id="1.2.2.5">1.2.2.5 Secret Token</h4></p>

<hr />

<p>有些的黑客可以在服务器不知情的情况下修改该cookies内容，通过数字签名发送给浏览器cookies,而Rails能探测他们是否被捣鼓。
这和secret_token.rb文件有关，这个initializer有secret key，伴随着你的应用随机产生，用来标记cookie。</p>

<p><figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># Your secret key for verifying the integrity of signed cookies.</span>
</span><span class='line'><span class="c1"># If you change this key, all old signed cookies will become invalid!</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Make sure the secret is at least 30 characters and all random,</span>
</span><span class='line'><span class="c1"># no regular words or you&#39;ll be exposed to dictionary attacks.</span>
</span><span class='line'><span class="c1"># You can use <code>rake secret</code> to generate a secure secret key.</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Make sure your secret_key_base is kept private</span>
</span><span class='line'><span class="c1"># if you&#39;re sharing your code publicly.</span>
</span><span class='line'><span class="ss">Example</span><span class="p">:</span><span class="ss">:Application</span><span class="o">.</span><span class="n">config</span><span class="o">.</span><span class="n">secret_key_base</span> <span class="o">=</span> <span class="s1">&#39;f32b1a3755e05a3d&hellip;&#39;</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>rake secret 可以重新生成secret key。</p>

<p><h4 id="1.2.2.6">1.2.2.6 Session Store</h4></p>

<hr />

<p>Rails4 session cookies加密使用的是最新cookis加密存储策略，session_store.rb这个initializer通过设置session store的type和key来配置你的应用的session存储。</p>

<p><figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="ss">Example</span><span class="p">:</span><span class="ss">:Application</span><span class="o">.</span><span class="n">config</span><span class="o">.</span><span class="n">session_store</span> <span class="ss">:encrypted_cookie_store</span><span class="p">,</span> <span class="ss">key</span><span class="p">:</span> <span class="s1">&#39;_example_session&#39;</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>session cookies 是用secret_token.rb中的secret_key_base来标记的，如果你感到困惑，可以更改secret_token.rb 的secret key值，或者运行rake secret 来重新生成secret key。</p>

<p><h4 id="1.2.2.7">1.2.2.7 参数包装<h4></p>

<hr />

<p>Rails3.1后引入的，wrap_parameters.rb这个initializer能配置你的应用与javascript mvc框架交互。（例如：backbone.js）</p>

<p><figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># Enable parameter wrapping for JSON. You can disable this by setting</span>
</span><span class='line'><span class="c1"># :format to an empt yarray.</span>
</span><span class='line'><span class="no">ActiveSupport</span><span class="o">.</span><span class="n">on_load</span><span class="p">(</span><span class="ss">:action_controller</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">wrap_parameters</span> <span class="nb">format</span><span class="p">:</span> <span class="o">[</span><span class="ss">:json</span><span class="o">]</span> <span class="k">if</span> <span class="nb">respond_to?</span><span class="p">(</span><span class="ss">:wrap_parameters</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># To enable root element in JSON for ActiveRecord objects.</span>
</span><span class='line'><span class="c1"># ActiveSupport.on_load(:active_record) do</span>
</span><span class='line'><span class="c1">#   self.include_root_in_json = true</span>
</span><span class='line'><span class="c1"># end</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>这样到底会发生什么呢？当你向controller提交json参数时，rails将参数包裹到一个嵌套的hash中，并用controller的名字作为这个hash的key，例如：</p>

<p><figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="p">{</span><span class="s2">&quot;title&quot;</span><span class="p">:</span> <span class="s2">&quot;The Rails4 Way&quot;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>将上诉代码提交到ArticlesController,将会转化成下列样子：</p>

<p><figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="p">{</span> <span class="s2">&quot;title&quot;</span><span class="p">:</span> <span class="s2">&quot;The Rails 4 Way&quot;</span><span class="p">,</span><span class="s2">&quot;article&quot;</span><span class="o">=&gt;</span><span class="p">{</span><span class="s2">&quot;title&quot;</span><span class="ss">:&quot; The Rails 4 Way&quot;</span><span class="p">}</span>  <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<p><h3 id="1.2.3">1.2.3 额外的配置</h3></p>

<hr />

<p>大多数配置选项我们可以在application.rb文件和标准的initializers文件中找到例子，这里还有一些额外的选项，你可以将它添加到额外的intializers文件中。</p>

<p><h4 id="1.2.3.1">1.2.3.1 Log-Level覆盖</h4></p>

<hr />

<p>默认的log Level是:debug，如果你有需要，也可以覆盖它；</p>

<p><figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># Force all environments to use the same logger level</span>
</span><span class='line'><span class="c1"># (by default production uses:info, the others :debug)</span>
</span><span class='line'><span class="n">config</span><span class="o">.</span><span class="n">log_level</span> <span class="o">=</span> <span class="ss">:debug</span>
</span></code></pre></td></tr></table></div></figure></p>

<p><h4 id="1.2.3.2">1.2.3.2 Schema Dumper</h4></p>

<hr />

<p>每一次，当你运行测试代码，Rails将会用自动导出schema.rb的脚本把你的development数据库的schema导出到你的test数据库中，类似ActiveRecord的迁移脚本，事实上，他们用了相同的API。</p>

<p>如果你正在做一个与schema dumper有冲突的事，你有可能需要用SQL将它转化为旧方式schema dumper。（见注释）</p>

<p><figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># Use SQL instead of ActiveRecord&#39;s schema dumper when creating the</span>
</span><span class='line'><span class="c1"># test database. This is necessary if your schema can&#39;t be completely</span>
</span><span class='line'><span class="c1"># dumped by the schema dumper, for example, if you have constraints</span>
</span><span class='line'><span class="c1"># or db-specific column types</span>
</span><span class='line'><span class="n">config</span><span class="o">.</span><span class="n">active_record</span><span class="o">.</span><span class="n">schema_format</span> <span class="o">=</span> <span class="ss">:sql</span>
</span></code></pre></td></tr></table></div></figure></p>

<p><h2 id="1.3">1.3 开发模式</h2></p>

<p>开发模式是rails的默认模式，也是作为开发者最长时间使用的模式，</p>

<p><figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># File: config/environments/development.rb</span>
</span><span class='line'><span class="ss">Example</span><span class="p">:</span><span class="ss">:Application</span><span class="o">.</span><span class="n">configure</span> <span class="k">do</span>
</span><span class='line'>  <span class="c1"># Settings specified here will take precedence over those in</span>
</span><span class='line'>  <span class="c1"># config/application.rb.</span>
</span></code></pre></td></tr></table></div></figure></p>

<p><h3 id="1.3.1">1.3.1 自动加载类</h3></p>

<hr />

<p>当你在开发模式下的一个好处是快速反馈机制，当你改变代码时，只要重新刷新浏览器，就能立即看见所改的变化。</p>

<p>这个行为是由config.cache_classes设置的：</p>

<p><figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># In the development environment your application&#39;s code is reloaded on</span>
</span><span class='line'><span class="c1"># every request. This slows down response time but is perfect for</span>
</span><span class='line'><span class="c1"># development since you don&#39;t have to restart the webserver when you</span>
</span><span class='line'><span class="c1"># make code changes.</span>
</span><span class='line'><span class="n">config</span><span class="o">.</span><span class="n">cache_classes</span> <span class="o">=</span> <span class="kp">false</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>当cache_classes为true时，Rails会运用Ruby的require去加载类，如果是false，则会用load去加载类。</p>

<ul>
<li><p>当require 一个ruby文件时，ruby解释器会执行它并且进行缓存；如果文件再次被requirmZ会忽略这次require。</p></li>
<li><p>而当你load 一个ruby文件时，不管它之前被load过几次，ruby解释器都会再次执行它。</p></li>
</ul>


<p><h4 id="1.3.1.1">1.3.1.1 The Rails Class Loader类加载器</h4></p>

<hr />

<p>在平常老版本的ruby中，不需要为了匹配脚本的内容而更改脚本的名字。在Rails中你会发现Ruby文件的名字与类或模块有联系。
Rails利用了Ruby对未知常量的回调机制，当Rails遇到未定义的常量时，它会利用类加载器(Class Loader)基于文件名的惯例去寻找并require需要的Ruby脚本。</p>

<p>那么你一定会问了，类加载器是如何找到需要的Ruby脚本的？我们已经在前面讨论了initializer.rb在Rails启动进程中的作用，Rails有一个加载路径(LOAD_PATH)的概念，默认加载路径包括你的Rails应用中任何地方的目录。</p>

<p>想要看到项目加载路径的内容，在console中输入：$LOAD_PATH</p>

<p><figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$rails</span> console
</span><span class='line'>Loading development environment.
</span><span class='line'>&gt;&gt;<span class="nv">$LOAD_PATH</span>
</span><span class='line'><span class="o">=</span>&gt; <span class="o">[</span><span class="s2">&quot;/usr/local/lib/ruby/&hellip; # about 20 lines of output&quot;</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>典型的Rails项目至少有60条加载路径，你可以试一试。</p>

<p><h4 id="1.3.1.2">1.3.1.2 Rails, Modules, and Auto-Loading Code</h4></p>

<hr />

<p>在Ruby中，如果你想从应用中加载其他文件的代码，你需要require声明；然而，Rails为Ruby增加一个默认行为通过建立一个简单的惯例能让Rails在大多数情况下自动加载你的代码。
如果你用过rails console，你就会发现你不用明确地require 任何代码。</p>

<p>现在我来告诉你这是如何实现的：
如果Rails遇到未定义的类或模块，它将会用以下惯例去猜测如何加载该类或模块：</p>

<p>如果该类或模块没有嵌套，则在常量名之间插入下划线：</p>

<ul>
<li><p>EstimationCalculator 将会插入：require &ldquo;estimation_calculator&rdquo;</p></li>
<li><p>KittTurboBoost 将会插入：require &ldquo;kitt_turbo_boost&rdquo;</p></li>
</ul>


<p>如果类或模块被嵌套，则会对每个模块做如上操作，并且形成对应的子目录，例如：
&ndash; MacGyver::SwissArmyKnife 变成：require &ldquo;mac_gyver/swiss_army_knife&rdquo;</p>

<ul>
<li>Example::ReallyRatherDeeply::NestedClass 变成：&#8221;example/really_rather_deeply/nested_class&#8221;，如果还没加载，Rails将会去example/really_rather_deeply/目录下寻找nested_class.rb文件，这个example/really_rather_deeply/目录会在Ruby的加载路径中查找（app/,lib/或者插件的lib/目录）</li>
</ul>


<p>所以，如果你按照rails这个规则，就基本不用怎么明确地指mZe)要加载的文件了。</p>

<p><h3 id="1.3.2">1.3.2 Eager Load</h3></p>

<hr />

<p>为了在开发模式下加快启动Rails服务的时间，你的代码一般被禁止eager loaded，你可以通过config.eager_load进行设置。</p>

<p><figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># Do not eager load code on boot.</span>
</span><span class='line'><span class="n">config</span><span class="o">.</span><span class="n">eager_load</span> <span class="o">=</span> <span class="kp">false</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>在生产模式下，你会将这个值设置为true，它会复制你的应用的大部分内容到内存中，提高web服务器的读写性能，就像Unicorn一样。</p>

<p><h3 id="1.3.3">1.3.3 错误报告</h3></p>

<p>&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;来自localhost的请求，当你想要在开发时，能够产生有用的错误信息包括debug信息（错误出现的行号等）那么设置consider_all_requests_local为true就能使rails产生这些友好的信息。</p>

<p><figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">config</span><span class="o">.</span><span class="n">consider_all_requests_local</span> <span class="o">=</span> <span class="kp">true</span>
</span></code></pre></td></tr></table></div></figure></p>

<p><h3 id="1.3.4">1.3.4 缓存</h3></p>

<hr />

<p>在开发模式下你一般不希望缓存行为，你真正需要它的时候是你想要去测试缓存是否正确。</p>

<p><figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">config</span><span class="o">.</span><span class="n">action_controller</span><span class="o">.</span><span class="n">perform_caching</span> <span class="o">=</span> <span class="kp">true</span> <span class="c1"># for testing in development model.</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>记住：当你测试完要设置为false。</p>

<p><h3 id="1.3.5">1.3.5 抛出发送错误</h3></p>

<hr />

<p>在开发模式下，rails会假定你不需要ActionMailer去抛出发送错误的异常，这个是基于config.action_mailer.raise_delivery_errors设置的。邮件发送功能不需要在开发模式下运行，特别是windows等其他平台。</p>

<p><figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># Don&#39;t care if the mailer can&#39;t send.</span>
</span><span class='line'><span class="n">config</span><span class="o">.</span><span class="n">action_mailer</span><span class="o">.</span><span class="n">raise_delivery_errors</span> <span class="o">=</span> <span class="kp">false</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>如果你真的需要在开发模式下发送邮件用来测试或排除错误，那么你可以将它设置为true。</p>

<p><h3 id="1.3.6">1.3.6 反对通知</h3></p>

<hr />

<p>当你想停止使用特定功能时，反对警告是非常有用的，config.active_support.deprecation允许你设置如何收到反对警告。在开发模式下，默认是出现在log文件中。</p>

<p><figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># Print deprecation notices to the Rails logger.</span>
</span><span class='line'><span class="n">config</span><span class="o">.</span><span class="n">active_support</span><span class="o">.</span><span class="n">deprecation</span> <span class="o">=</span> <span class="ss">:log</span>
</span></code></pre></td></tr></table></div></figure></p>

<p><h3 id="1.3.7">1.3.7 慢查询的解释</h3></p>

<hr />

<p>Rails3.2后引入的，Active Record现在监视SQL查询的门槛已经被设立。当查询花费时间超过这个设定的门槛，这个查询计划将被记录为警告。
而这个门槛的时间是由config.active_record.auto_explain_threshold_in_seconds 设置的：</p>

<p><figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># Log the query plan for queries taking more than this (works)</span>
</span><span class='line'><span class="c1"># with SQLite, MySQL, and PostgreSQL).</span>
</span><span class='line'><span class="n">config</span><span class="o">.</span><span class="n">active_record</span><span class="o">.</span><span class="n">auto_explain_threshold_in_seconds</span> <span class="o">=</span> <span class="mi">0</span><span class="o">.</span><span class="mi">5</span>
</span></code></pre></td></tr></table></div></figure></p>

<p><h3 id="1.3.8">1.3.8 待迁移错误页面</h3></p>

<hr />

<p>在Rails前面版本中，如果待迁移任务需要执行，web服务将会启动失败。
在Rails4中将会以一个错误页面展示，指示开发者运行rake db:migrate RAILS_ENV=development去解决这个问题。</p>

<p><figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># Raise an error on page load if there are pending migrations</span>
</span><span class='line'><span class="n">config</span><span class="o">.</span><span class="n">active_record</span><span class="o">.</span><span class="n">migration_error</span> <span class="o">=</span> <span class="ss">:page_load</span>
</span></code></pre></td></tr></table></div></figure></p>

<p><h3 id="1.3.9">1.3.9 Assets的Debug模式</h3></p>

<hr />

<p>Rails3.1引入Assets Pipeline，一个可以连接和缩小javascript和css的assets。
默认的，在开发模式下，javascript和css还是放在各自不同的目录中。
设置config.assets.debug 为false，将会导致Sprockets对所有assets进行连接和运行预处理器。</p>

<p><figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># Debug mode disables concatenation and preprocessing of assets.</span>
</span><span class='line'><span class="n">config</span><span class="o">.</span><span class="n">assets</span><span class="o">.</span><span class="n">debug</span> <span class="o">=</span> <span class="kp">true</span>
</span></code></pre></td></tr></table></div></figure></p>

<p><h2 id="1.4">1.4 测试模式</h2></p>

<p>无论你在测试环境下运行rails， RAILS_ENV的值为test，然后下面的设置将会起作用。</p>

<p><figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># File: config/environments/test.rb</span>
</span><span class='line'><span class="ss">Example</span><span class="p">:</span><span class="ss">:Application</span><span class="o">.</span><span class="n">configure</span> <span class="k">do</span>
</span><span class='line'>  <span class="c1"># Settings specified here will take precedence over those in</span>
</span><span class='line'>  <span class="c1"># config/application.rb.</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># The test environment is used exclusively to run your application&#39;s</span>
</span><span class='line'>  <span class="c1"># test suite. You never need to work with it otherwise. Remember that</span>
</span><span class='line'>  <span class="c1"># your test database is &quot;scratch space&quot; for the test suite and is wiped</span>
</span><span class='line'>  <span class="c1"># and recreated between test runs. Don&#39;t rely on the data there!</span>
</span><span class='line'>  <span class="n">config</span><span class="o">.</span><span class="n">cache_classes</span> <span class="o">=</span> <span class="kp">true</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># Do not eager load code on boot. This avoids loading your whole</span>
</span><span class='line'>  <span class="c1"># application just for the purpose of running a single test. If you are</span>
</span><span class='line'>  <span class="c1"># using a tool that preloads Rails for running tests, you may have to</span>
</span><span class='line'>  <span class="c1"># set it to true.</span>
</span><span class='line'>  <span class="n">config</span><span class="o">.</span><span class="n">eager_load</span> <span class="o">=</span> <span class="kp">false</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># Configure static asset server for tests with Cache-Control for</span>
</span><span class='line'>  <span class="c1"># performance.</span>
</span><span class='line'>  <span class="n">config</span><span class="o">.</span><span class="n">serve_static_assets</span> <span class="o">=</span> <span class="kp">true</span>
</span><span class='line'>  <span class="n">config</span><span class="o">.</span><span class="n">static_cache_control</span> <span class="o">=</span> <span class="s2">&quot;public, max-age=3600&quot;</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># Show full error reports and disable caching.</span>
</span><span class='line'>  <span class="n">config</span><span class="o">.</span><span class="n">consider_all_requests_local</span> <span class="o">=</span> <span class="kp">true</span>
</span><span class='line'>  <span class="n">config</span><span class="o">.</span><span class="n">action_controller</span><span class="o">.</span><span class="n">perform_caching</span> <span class="o">=</span> <span class="kp">false</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># Raise exceptions instead of rendering exception templates.</span>
</span><span class='line'>  <span class="n">config</span><span class="o">.</span><span class="n">action_dispatch</span><span class="o">.</span><span class="n">show_exceptions</span> <span class="o">=</span> <span class="kp">false</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># Disable request forgery protection in test environment.</span>
</span><span class='line'>  <span class="n">config</span><span class="o">.</span><span class="n">action_controller</span><span class="o">.</span><span class="n">allow_forgery_protection</span> <span class="o">=</span> <span class="kp">false</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># Tell Action Mailer not to deliver emails to the real world.</span>
</span><span class='line'>  <span class="c1"># The :test delivery method accumulates sent emails in the</span>
</span><span class='line'>  <span class="c1"># ActionMailer::Base.deliveries array.</span>
</span><span class='line'>  <span class="n">config</span><span class="o">.</span><span class="n">action_mailer</span><span class="o">.</span><span class="n">delivery_method</span> <span class="o">=</span> <span class="ss">:test</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># Print deprecation notices to the stderr.</span>
</span><span class='line'>  <span class="n">config</span><span class="o">.</span><span class="n">active_support</span><span class="o">.</span><span class="n">deprecation</span> <span class="o">=</span> <span class="ss">:stderr</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></p>

<h3>i: 自定义环境</h3>

<p><em>如果有需要，你可以给你的rails应用自定一个额外的环境，通过复制一个已经存在的环境文件(在config/environments目录中)。
自定义环境的一个共同的用法是建立一个额外的生产模式配置（例如：staging和QA development模式）。
在开发平台，你拥有进入正式环境数据库的权利吗？哈哈，使用 triage 环境就在合理不过了。运用开发模式作为正常的环境，但是数据库连接生产服务器的数据库。当你想要快速诊断生产环境下的问题，这非常有用。</em></p>

<p><h2 id="1.5">生产模式</h2></p>

<p>最后，当你部署自己的项目并接受公共请求时，生产模式是你的rails应用运行的环境。
生产模式与其他模式有一些显著的区别，不仅仅是速度的提升。</p>

<p><figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># File:config/environments/production.rb</span>
</span><span class='line'>  <span class="c1"># Settings specified here will take precedence over those in</span>
</span><span class='line'>  <span class="c1"># config/application.rb.</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># Code is not reloaded between requests.</span>
</span><span class='line'>  <span class="n">config</span><span class="o">.</span><span class="n">cache_classes</span> <span class="o">=</span> <span class="kp">true</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># Eager load code on boot. This eager loads most of Rails and</span>
</span><span class='line'>  <span class="c1"># your application in memory, allowing both thread web servers</span>
</span><span class='line'>  <span class="c1"># and those relying on copy on write to perform better.</span>
</span><span class='line'>  <span class="c1"># Rake tasks automatically ignore this option for performance.</span>
</span><span class='line'>  <span class="n">config</span><span class="o">.</span><span class="n">eager_load</span> <span class="o">=</span> <span class="kp">true</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># Full error reports are disabled and caching is turned on.</span>
</span><span class='line'>  <span class="n">config</span><span class="o">.</span><span class="n">consider_all_requests_local</span> <span class="o">=</span> <span class="kp">false</span>
</span><span class='line'>  <span class="n">config</span><span class="o">.</span><span class="n">action_controller</span><span class="o">.</span><span class="n">perform_caching</span> <span class="o">=</span> <span class="kp">true</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># Enable Rack::Cache to put a simple HTTP cache in front of your</span>
</span><span class='line'>  <span class="c1"># application</span>
</span><span class='line'>  <span class="c1"># Add <code>rack-cache</code> to your Gemfile before enabling this.</span>
</span><span class='line'>  <span class="c1"># For large-scale production use, consider using a caching reverse proxy</span>
</span><span class='line'>  <span class="c1"># like nginx, varnish or squid.</span>
</span><span class='line'>  <span class="c1"># config.action_dispatch.rack_cache = true</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># Disable Rails&#39;s static asset server (Apache or nginx will</span>
</span><span class='line'>  <span class="c1"># already do this).</span>
</span><span class='line'>  <span class="n">config</span><span class="o">.</span><span class="n">serve_static_assets</span> <span class="o">=</span> <span class="kp">false</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># Compress JavaScripts and CSS.</span>
</span><span class='line'>  <span class="n">config</span><span class="o">.</span><span class="n">assets</span><span class="o">.</span><span class="n">js_compressor</span> <span class="o">=</span> <span class="ss">:uglifier</span>
</span><span class='line'>  <span class="c1"># config.assets.css_compressor = :sass</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># Whether to fallback to assets pipeline if a precompiled</span>
</span><span class='line'>  <span class="c1"># asset is missed.</span>
</span><span class='line'>  <span class="n">config</span><span class="o">.</span><span class="n">assets</span><span class="o">.</span><span class="n">compile</span> <span class="o">=</span> <span class="kp">false</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># Generate digests for assets URLs.</span>
</span><span class='line'>  <span class="n">config</span><span class="o">.</span><span class="n">assets</span><span class="o">.</span><span class="n">digest</span> <span class="o">=</span> <span class="kp">true</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># Version of your assets, change this if you want to expire</span>
</span><span class='line'>  <span class="c1"># all your assets.</span>
</span><span class='line'>  <span class="n">config</span><span class="o">.</span><span class="n">assets</span><span class="o">.</span><span class="n">version</span> <span class="o">=</span> <span class="s1">&#39;1.0&#39;</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># Specifies the header that your server uses for sending files.</span>
</span><span class='line'>  <span class="c1"># config.action_dispatch.x_sendfile_header = &quot;X-Sendfile&quot; # for Apache</span>
</span><span class='line'>  <span class="c1"># config.action_dispatch.x_sendfile_header = &#39;X-Accel-Redirect&#39;</span>
</span><span class='line'>  <span class="c1"># for nginx</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># Force all access to the app over SSL, use Strict-Transport-Security,</span>
</span><span class='line'>  <span class="c1"># and use secure cookies.</span>
</span><span class='line'>  <span class="c1"># config.force_ssl = true</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># Set to :debug to see everything in the log.</span>
</span><span class='line'>  <span class="n">config</span><span class="o">.</span><span class="n">log_level</span> <span class="o">=</span> <span class="ss">:info</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># Prepend all log lines with the following tags.</span>
</span><span class='line'>  <span class="c1"># config.log_tags = [ :subdomain, :uuid  ]</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># Use a different logger for distributed setups.</span>
</span><span class='line'>  <span class="c1"># config.logger = ActiveSupport::TaggedLogging.new(SyslogLogger.new)</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># Use a different cache store in production</span>
</span><span class='line'>  <span class="c1"># config.cache_store = :mem_cache_store</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># Enable serving of images, stylesheets, and JavaScripts from an</span>
</span><span class='line'>  <span class="c1"># asset server.</span>
</span><span class='line'>  <span class="c1"># config.action_controller.asset_host = &quot;<a href="http://assets.example.com&amp;quot;">http://assets.example.com&amp;quot;</a></span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># Precompile additional assets.</span>
</span><span class='line'>  <span class="c1"># application.js, application.css, and all non-JS/CSS in app/assets</span>
</span><span class='line'>  <span class="c1"># folder are already added.</span>
</span><span class='line'>  <span class="c1"># config.assets.precompile += %w( search.js  )</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># Ignore bad email addresses and do not raise email delivery errors.</span>
</span><span class='line'>  <span class="c1"># Set this to true and configure the email server for immediate delivery</span>
</span><span class='line'>  <span class="c1"># to raise delivery errors.</span>
</span><span class='line'>  <span class="c1"># config.action_mailer.raise_delivery_errors = false</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># Enable locale fallbacks for I18n (makes lookups for any locale fall</span>
</span><span class='line'>  <span class="c1"># back to the I18n.default_locale when a translation can not be found).</span>
</span><span class='line'>  <span class="n">config</span><span class="o">.</span><span class="n">i18n</span><span class="o">.</span><span class="n">fallbacks</span> <span class="o">=</span> <span class="kp">true</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># Send deprecation notices to registered listeners.</span>
</span><span class='line'>  <span class="n">config</span><span class="o">.</span><span class="n">active_support</span><span class="o">.</span><span class="n">deprecation</span> <span class="o">=</span> <span class="ss">:notify</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># Log the query plan for queries taking more than this (works</span>
</span><span class='line'>  <span class="c1"># with SQLite, MySQL, and PostgreSQL).</span>
</span><span class='line'>  <span class="c1"># config.active_record.auto_explain_threshold_in_seconds = 0.5</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># Disable automatic flushing of the log to improve performance.</span>
</span><span class='line'>  <span class="c1"># config.autoflush_log = false</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># Use default logging formatter so that PID and timestamp</span>
</span><span class='line'>  <span class="c1"># are not suppressed.</span>
</span><span class='line'>  <span class="n">config</span><span class="o">.</span><span class="n">log_formatter</span> <span class="o">=</span> <span class="o">::</span><span class="ss">Logger</span><span class="p">:</span><span class="ss">:Formatter</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></p>

<p><h3 id="1.5.1">1.5.1 Assets</h3></p>

<hr />

<p>在生产模式下，assets是默认由assets pipeline预处理的。所有的文件包括application.js和application.css的assets清单被压缩和连接到他们各自的同名文件中，位于public/assets目录中。</p>

<p>如果被请求的assets不存在public/assets目录中，rails将会抛出异常。
设置config.assets.compile为true，可以在生产模式下启用live assets做后备。</p>

<p>在assets pipeline预处理时，application.css和application.js是被唯一加载的stylesheets/javascript清单文件。
想要加载其他assets，在定义config.assets.precompile的地方设置就行了：</p>

<p><figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">config</span><span class="o">.</span><span class="n">assets</span><span class="o">.</span><span class="n">precompile</span> <span class="o">+=</span> <span class="sx">%w( administration.css  )</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>像Rails大多数特征一样，Asset Pipeline 的用法完全是可选的，config.assets.enabled设置为false</p>

<p><h3 id="1.5.2">1.5.2 Asset 主机</h3></p>

<hr />

<p>默认地，Rails通过当前主机的public/ 目录连接assets，但是你可以直接将assets连接到一个assets服务器。config.action_controller.asset_host在后面章节会讲到。</p>

<p><h2 id="1.6">1.6 日志</h2></p>

<p>Rails的大多数编程环境<em>（models, controllers, view templates）有logger属性</em>，遵从Log4r接口或默认Ruby1.8+Logger类。</p>

<p>无法在你的代码中获得日志的引用？利用Rails.logger 方法你可以在任何地方引用日志。
我们非常容易创建一个新的日志，见下面例子：</p>

<p><figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>irb
</span><span class='line'>&gt; require <span class="s1">&#39;logger&#39;</span>
</span><span class='line'><span class="o">=</span>&gt; <span class="nb">true</span>
</span><span class='line'>
</span><span class='line'>irb<span class="o">(</span>main<span class="o">)</span>:002:0&gt; <span class="nv">logger</span> <span class="o">=</span> Logger.new <span class="nv">STDOUT</span>
</span><span class='line'><span class="o">=</span>&gt;#&lt;Logger:0x32db4c@level<span class="o">=</span>0,@progname<span class="o">=</span>nil,@logdev<span class="o">=</span>
</span><span class='line'><span class="c">#&lt;Logger::LogDevice:0x32d9bc&hellip;&gt;</span>
</span><span class='line'>
</span><span class='line'>&gt; logger.warn <span class="s2">&quot;do not want!!!&quot;</span>
</span><span class='line'>W, <span class="o">[</span>2013-02-01T10:59:26.896825 <span class="c">#6243] WARN &mdash; : do not want!!!</span>
</span><span class='line'><span class="o">=</span>&gt; <span class="nb">true</span>
</span><span class='line'>
</span><span class='line'>&gt; logger.info <span class="s2">&quot;in your logger, giving info&quot;</span>
</span><span class='line'>I, <span class="o">[</span>2013-02-01T10:59:42.478325 <span class="c">#6243] INFO &mdash; : in your logger, giving info</span>
</span><span class='line'><span class="o">=</span>&gt; <span class="nb">true</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>你可以利用logger将信息加入日志无论它什么时候产生，这些日志信息运用对应程度的方法。
标准的日志程度有：</p>

<ul>
<li><p><strong>debug</strong> : 运用debug捕获数据和有用的应用状态来排除错误。这种级别通常不会被捕获到production日志中。</p></li>
<li><p><strong>info</strong> : 运用info捕获信息报文。我喜欢运用这种日志级别在良好应用程序情况下记录非正常事件的时间戳。</p></li>
<li><p><strong>warn</strong> : 用warn级别捕获那些不平常的可能值得调查的事件。有时候，我会抛出warning日志去阻止用户做一些我不允许做的事情。
我的目的是对那些坏恶意的用户或是漏洞继续保持我的应用的界面友好性。如下例子：</p></li>
</ul>


<p><figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">create</span>
</span><span class='line'>  <span class="k">begin</span>
</span><span class='line'>    <span class="n">group</span><span class="o">.</span><span class="n">add_member</span><span class="p">(</span><span class="n">current_user</span><span class="p">)</span>
</span><span class='line'>    <span class="n">flash</span><span class="o">[</span><span class="ss">:notice</span><span class="o">]</span> <span class="o">=</span> <span class="s2">&quot;Successfully joined </span><span class="si">#{</span><span class="n">scene</span><span class="o">.</span><span class="n">display_name</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>  <span class="k">rescue</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:RecordInvalid</span>
</span><span class='line'>    <span class="n">flash</span><span class="o">[</span><span class="ss">:error</span><span class="o">]</span> <span class="o">=</span> <span class="s2">&quot;You are already a member of </span><span class="si">#{</span><span class="n">group</span><span class="o">.</span><span class="n">name</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>    <span class="n">logger</span><span class="o">.</span><span class="n">warn</span> <span class="s2">&quot;A user tried to join a group twice. UI should</span>
</span><span class='line'><span class="s2">    not have allowed it.&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="n">redirect_to</span> <span class="ss">:back</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></p>

<ul>
<li><p><strong>error</strong> : 运用error级别捕获那些不需要重新启动服务的错误信息。</p></li>
<li><p><strong>fatal</strong> : 可以想象最坏情况的发生：你的应用挂了，并且需要手动重启。</p></li>
</ul>


<p><h3 id="1.6.1">1.6.1 Rails的日志文件</h3></p>

<hr />

<p>Rails的log目录中有三个对应三种标准环境的log文件，随着时间的增长，这些文件会不断变大。这里介绍一个rake任务，可以简单地清理这些log文件：</p>

<p><figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>rake log:clear <span class="c"># Truncates all *.log files in log/ to zero bytes</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>当你在工作时，log/development.log显得非常有用，许多程序员会在他们编程时打开另一个终端并持续显示开发模式下的日志尾部信息：</p>

<p><figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>tail -f log/development.log
</span><span class='line'>
</span><span class='line'>Article Load <span class="o">(</span>0.2ms<span class="o">)</span>  SELECT <span class="s2">&quot;articles&quot;</span>.* FROM <span class="s2">&quot;articles&quot;</span> WHERE
</span><span class='line'>  <span class="s2">&quot;articles&quot;</span>.<span class="s2">&quot;id&quot;</span> <span class="o">=</span> <span class="nv">$1</span> LIMIT 1  <span class="o">[[</span><span class="s2">&quot;id&quot;</span>, <span class="s2">&quot;1&quot;</span><span class="o">]]</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>在development的日志中各种有价值的信息是非常有用的。举个例子，每次你发一个请求，一串有用的信息将会出现在你的日志中，这是我项目的样本：</p>

<p><figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>Started GET<span class="s2">&quot;/user_photos/1&quot;</span> <span class="k">for </span>127.0.0.1 at 2007-06-0617:43:13
</span><span class='line'>  Processing by UserPhotosController#show as HTML
</span><span class='line'>  Parameters: <span class="o">{</span><span class="s2">&quot;/users/8-Obie-Fernandez/photos/406&quot;</span><span class="o">=</span>&gt;nil,
</span><span class='line'>  <span class="s2">&quot;action&quot;</span><span class="o">=</span>&gt;<span class="s2">&quot;show&quot;</span>, <span class="s2">&quot;id&quot;</span><span class="o">=</span>&gt;<span class="s2">&quot;406&quot;</span>, <span class="s2">&quot;controller&quot;</span><span class="o">=</span>&gt;<span class="s2">&quot;user_photos&quot;</span>,
</span><span class='line'>  <span class="s2">&quot;user_id&quot;</span><span class="o">=</span>&gt;<span class="s2">&quot;8-Obie-Fernandez&quot;</span><span class="o">}</span>
</span><span class='line'>  User Load <span class="o">(</span>0.4ms<span class="o">)</span>  SELECT * FROM users WHERE <span class="o">(</span>users.<span class="s1">&#39;id&#39;</span> <span class="o">=</span> 8<span class="o">)</span>
</span><span class='line'>  Photo Load <span class="o">(</span>0.9ms<span class="o">)</span>  SELECT * FROM photos WHERE <span class="o">(</span>photos.<span class="s1">&#39;id&#39;</span> <span class="o">=</span> 406
</span><span class='line'>  AND <span class="o">(</span>photos.resource_id <span class="o">=</span> 8 AND photos.resource_type <span class="o">=</span> <span class="s1">&#39;User&#39;</span><span class="o">))</span>
</span><span class='line'>  CACHE <span class="o">(</span>0.0ms<span class="o">)</span>   SELECT * FROM users WHERE <span class="o">(</span>users.<span class="s1">&#39;id&#39;</span> <span class="o">=</span> 8<span class="o">)</span>
</span><span class='line'>Rendered adsense/<em>medium_rectangle<span class="o">(</span>1.5ms<span class="o">)</span>
</span><span class='line'>  User Load <span class="o">(</span>0.5ms<span class="o">)</span> SELECT * FROM users WHERE <span class="o">(</span>users.<span class="s1">&#39;id&#39;</span> <span class="o">=</span> 8<span class="o">)</span>
</span><span class='line'>  LIMIT 1
</span><span class='line'>  SQL <span class="o">(</span>0.4ms<span class="o">)</span> SELECT count<span class="o">(</span>*<span class="o">)</span> AS count_all FROM messages WHERE
</span><span class='line'>  <span class="o">(</span>messages.receiver_id <span class="o">=</span> 8 AND <span class="o">(</span>messages.<span class="s1">&#39;read&#39;</span> <span class="o">=</span> 0<span class="o">))</span>
</span><span class='line'>Rendered layouts/</em>header<span class="o">(</span>25.3ms<span class="o">)</span>
</span><span class='line'>Rendered adsense/<em>leaderboard<span class="o">(</span>0.4ms<span class="o">)</span>
</span><span class='line'>Rendered layouts/</em>footer<span class="o">(</span>0.8ms<span class="o">)</span>
</span><span class='line'>Rendered photos/show.html.erb within layouts/application.html.erb<span class="o">(</span>38.9ms<span class="o">)</span>
</span><span class='line'>Completed in 99ms<span class="o">(</span>Views:37.4ms|ActiveRecord:12.3ms<span class="o">)</span> with 200
</span></code></pre></td></tr></table></div></figure></p>

<p>下列列出日志中所有数据项包括的内容：</p>

<ul>
<li><p>controller和action的调用</p></li>
<li><p>发出请求的的远程计算机IP地址</p></li>
<li><p>请求发生的时间戳</p></li>
<li><p>请求的<em>session ID</em></p></li>
<li><p>请求的参数hash</p></li>
<li><p>请求的数据库信息，包括话费的时间和数据库执行语句</p></li>
<li><p>缓存查询的命中信息：包括话费的时间和SQL语句从缓存中触发结果而不是往返数据库。</p></li>
<li><p>渲染每个模板视图的输出及其话费的时间</p></li>
<li><p>完成一个请求的合计时间</p></li>
<li><p>数据库操作和渲染的时间分析</p></li>
<li><p>HTTP的状态码和响应客户端的URL</p></li>
</ul>


<p><h3 id="1.6.2">1.6.2 标记日志</h3></p>

<hr />

<p>日志信息有大范围数量信息，想要跟踪问题或特殊请求显得非常困难。为了减轻这种情况，Rails3.2引入了一种可以标记日志信息的能力。
最简单的方法去添加标记到你的日志文件，就是去包含一个响应请求对象的方法，设置config.log_tags。
举例，设置config.log_tags 去包含:subdomain：</p>

<p><figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">config</span><span class="o">.</span><span class="n">log_tags</span> <span class="o">=</span> <span class="o">[</span><span class="ss">:subdomain</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>这将导致对每个日志信息请求前面都加上一个子域：</p>

<p><figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="o">[</span>admin<span class="o">]</span>Started GET <span class="s2">&quot;/articles&quot;</span> <span class="k">for </span>127.0.0.1 at 2013-02-01 11:49:09-0500
</span></code></pre></td></tr></table></div></figure></p>

<p><h3 id="1.6.3">1.6.3 日志文件分析</h3></p>

<hr />

<p>一些非正式的分析，可以使用development日志的输出和一些常识判断。
<strong>性能：</strong> 更明显的分析之一是研究你的应用的性能。你的请求越快，你的rails进程就能处理越多的请求。这就是为什么性能数据通常用每秒来表示请求，这样你就可以通过查找渲染和查询语句来分析为什么花费那么长时间。</p>

<p>要意识到日志文件记录的报告并不是非常准确，这点很重要。事实上，如果单单从内部本身很难衡量事物的时间，错误可能更多。
为任何给定的请求加上渲染和数据库时间百分比，不会总是接近100%的。</p>

<p>但是，尽管在纯粹客观的意义上不准确，在同一个应用中对数据报告时间进行主观判断也是完美的。它给你一个途径去判断这个action是不是比之前花费更长的时间；或者是不是比其他的action速度更快或更慢，等等。</p>

<p><strong>SQL查询：</strong>
Active Record 没有像预期的那样执行？事实上，记录在日志文件的Active Record可以帮助你排除一些由复杂的查询导致的问题。</p>

<p><strong>鉴别N+1选择问题：</strong>
无论什么时候，当你在展示一条关联其他记录的记录时，你可能会面对一种叫做N+1的选择问题。你将会意识到这些<em>选择语句只有主键的值是不同的</em>。</p>

<p>举个例子，下面是一个真实的项目中日志文件片段，当FlickrPhoto 实例被加载时产生的N+1问题：</p>

<p><figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>FlickrPhoto Load <span class="o">(</span>1.3ms<span class="o">)</span> SELECT * FROM flickr_photos WHERE
</span><span class='line'><span class="o">(</span>flickr_photos.resource_id <span class="o">=</span> 15749 AND flickr_photos.resource_type <span class="o">=</span>
</span><span class='line'> <span class="s1">&#39;Place&#39;</span> AND <span class="o">(</span>flickr_photos.<span class="s1">&#39;profile&#39;</span> <span class="o">=</span> 1<span class="o">))</span> ORDER BY updated_at desc
</span><span class='line'>LIMIT 1
</span><span class='line'>
</span><span class='line'>FlickrPhoto Load <span class="o">(</span>1.7ms<span class="o">)</span> SELECT * FROM flickr_photos WHERE
</span><span class='line'><span class="o">(</span>flickr_photos.resource_id <span class="o">=</span> 15785 AND flickr_photos.resource_type <span class="o">=</span>
</span><span class='line'><span class="s1">&#39;Place&#39;</span> AND <span class="o">(</span>flickr_photos.<span class="s1">&#39;profile&#39;</span> <span class="o">=</span> 1<span class="o">))</span> ORDER BY updated_at desc
</span><span class='line'>LIMIT 1
</span><span class='line'>
</span><span class='line'>FlickrPhoto Load <span class="o">(</span>1.4ms<span class="o">)</span> SELECT * FROM flickr_photos WHERE
</span><span class='line'><span class="o">(</span>flickr_photos.resource_id <span class="o">=</span> 15831 AND flickr_photos.resource_type <span class="o">=</span>
</span><span class='line'><span class="s1">&#39;Place&#39;</span> AND <span class="o">(</span>flickr_photos.<span class="s1">&#39;profile&#39;</span> <span class="o">=</span> 1<span class="o">))</span> ORDER BY updated_at desc
</span><span class='line'>LIMIT 1
</span></code></pre></td></tr></table></div></figure></p>

<p>等等，是不是觉得很熟悉？
幸运的是，这些语句执行速度还是非常快的，每条接近0.0015 秒。缺少减轻的因素，我将面临一连串待处理的性能问题。当你的数据库在一个单独的机器上，这个问题将非常严重，他将处理每一条查询而造成网络延迟。</p>

<p>N+1问题并不可怕，很多时候只需要在特定的查询语句使用includes方法就能解决问题。</p>

<h3>i: 关注分离（Separation of Concerns）</h3>

<p> <em>一个精心设计的MVC应用遵循一定的协议：逻辑层数据库操作必然在model中执行，视图完成渲染任务。一般而言，你的controller需要渲染视图，必须通过model到数据库获取数据。在Rails中，controller完成对model查询的数据的处理并进行视图的渲染。</em></p>

<p>在渲染过程中进行数据库的访问是一种非常不好的做法。直接从模板的代码中调用数据库方法背离了<strong>关注分离</strong>原则，简直是一个恶梦。</p>

<p>然而有其他方法可以在你渲染模板时含蓄的访问数据库，通过model进行封装，可能用lazy loading关联触发。
我们可以不容置疑地说这是不好的做法吗？其实这很难说。有一些情况是需要在渲染时访问数据库的（如利用片段缓存的）。</p>

<h3>i: 使用备用的Logging schemes</h3>

<p>这很简单，仅仅只要指定一个和Ruby的Logger兼容的类，像ActiveRecord::Base.logger。David曾经说过一个厉害的黑客必须具备交换日志的能力。在控制台会话期间，为了在控制台看到你的SQL语句生成正确，需要指定一个新的Logger实例指向STDOUT到ActiveRecord::Base.logger。
Jamis也完整地写了关于这个的技术博文：<a href="http://weblog.jamisbuck.org/2007/1/31/more-on-watching-activerecord">http://weblog.jamisbuck.org/2007/1/31/more-on-watching-activerecord</a></p>

<p><h4 id="1.6.3.1">1.6.3.1  Rails::Subscriber.colorize_logging</h4></p>

<hr />

<p>告诉Rails是否使用ANSI代码使日志语句有颜色，颜色可以帮助我们更好地阅读日志文件（除了windows），当你使用系统日志时，也可能使问题复杂化。
默认是true，如果你发现你的软件不支持ANSI代码日志文件颜色化功能，请将它改为false。</p>

<p>以下片段是带有ANSI代码的日志片段：</p>

<p><figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>^<span class="o">[[</span>4;36;1mSQL <span class="o">(</span>0.0ms<span class="o">)</span>^<span class="o">[[</span>0m ^<span class="o">[[</span>0;1mMysql::Error: Unknown table
</span><span class='line'><span class="s1">&#39;expense_reports&#39;</span>:DROPTABLEexpense_reports^<span class="o">[[</span>0m
</span><span class='line'>  ^<span class="o">[[</span>4;35;1mSQL <span class="o">(</span>3.2ms<span class="o">)</span>^<span class="o">[[</span>0m ^<span class="o">[[</span>0mCREATE TABLE expense_reports <span class="o">(</span><span class="s1">&#39;id&#39;</span>
</span><span class='line'>int<span class="o">(</span>11<span class="o">)</span> DEFAULT NULL auto_increment PRIMARYKEY,<span class="s1">&#39;user_id&#39;</span> int<span class="o">(</span>11<span class="o">))</span>
</span><span class='line'>                    &hellip;<span class="o">]]</span>..<span class="o">]]</span>..<span class="o">]]</span>..<span class="o">]]</span>..<span class="o">]]</span>..<span class="o">]]</span>..<span class="o">]]</span>
</span></code></pre></td></tr></table></div></figure></p>

<h4>Wilson 说：</h4>

<blockquote><p>我见过的几乎没有人知道怎样将日志颜色化，-R选项。</p></blockquote>

<h4>i: 系统日志syslog</h4>

<p>像Unix系统的系统都有一个系统服务叫做系统日志。因为各种原因，它可能是一个更好的选择。</p>

<ul>
<li><p>更细粒度控制日志级别和内容</p></li>
<li><p>多个Rails应用的日志整合输出</p></li>
<li><p>如果你使用多系统远程日志功能，多个rails应用的日志整合输出是可能的，比起单独处理每个应用程序服务器上的单独日志文件好得多。</p></li>
</ul>


<p><h3 id="1.6.4">1.6.4 总结</h3></p>

<hr />

<p>我们结束了Rails之旅，这章简要覆盖了bundler的一些细节，并且评估了不同环境下rails的执行，和如何加载它的依赖，包括你的应用代码。并且深入查看application.rb文件和如何更改每种模式来自定义符合我们胃口的Rails的行为。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PS 查看进程]]></title>
    <link href="http://TsaiKoga.github.com/blog/2014/04/23/ps-cha-kan-jin-cheng/"/>
    <updated>2014-04-23T13:53:00+08:00</updated>
    <id>http://TsaiKoga.github.com/blog/2014/04/23/ps-cha-kan-jin-cheng</id>
    <content type="html"><![CDATA[<p>如果你使用Linux进行操作，不可避免要接触ps命令，他可以显示进程。</p>

<p>首先，我们来介绍一下进程：</p>

<p>1.<strong> 进程 </strong></p>

<hr />

<p>linux上进程有5种状态:</p>

<blockquote><ol>
<li>运行(正在运行或在运行队列中等待)</li>
<li>中断(休眠中, 受阻, 在等待某个条件的形成或接受到信号)</li>
<li>不可中断(收到信号不唤醒和不可运行, 进程必须等待直到有中断发生)</li>
<li>僵死(进程已终止, 但进程描述符存在, 直到父进程调用wait4()系统调用后释放)</li>
<li>停止(进程收到SIGSTOP, SIGSTP, SIGTIN, SIGTOU信号后停止运行运行</li>
</ol>
</blockquote>

<br/>


<p>2.<strong> 常用的PS参数</strong></p>

<hr />

<p>1）ps a    显示现行终端机下的所有程序，包括其他用户的程序。</p>

<p>2）ps -A   显示所有程序。</p>

<p>3）ps c    列出程序时，显示每个程序真正的指令名称，而不包含路径，参数或常驻服务的标示。</p>

<p>4）ps -e   此参数的效果和指定&#8221;A&#8221;参数相同。</p>

<p>5）ps e    列出程序时，显示每个程序所使用的环境变量。</p>

<p>6）ps f    用ASCII字符显示树状结构，表达程序间的相互关系。</p>

<p>7）ps -H   显示树状结构，表示程序间的相互关系。</p>

<p>8）ps -N   显示所有的程序，除了执行ps指令终端机下的程序之外。</p>

<p>9）ps s    采用程序信号的格式显示程序状况。</p>

<p>10）ps S   列出程序时，包括已中断的子程序资料。</p>

<p>11）ps -t &lt;终端机编号> 　指定终端机编号，并列出属于该终端机的程序的状况。</p>

<p>12）ps u 　以用户为主的格式来显示程序状况。</p>

<p>13）ps x 　显示所有程序，不以终端机来区分。</p>

<p>14）ps -l  較長,較詳細的顯示該PID的信息</p>

<br/>


<p>3.<strong> 最常用的ps aux 命令解析 </strong></p>

<hr />

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="c"># ps aux |more</span>
</span><span class='line'>    USER       PID        %CPU %MEM   VSZ  RSS  TTY                   STAT     START   TIME     COMMAND
</span><span class='line'>    root         1        0.0  0.0     4772  564 ?                     S        Sep22   0:03     init <span class="o">[</span>3<span class="o">]</span>
</span><span class='line'>    root         2        0.0  0.0     0    0        ?                 S        Sep22   0:03     <span class="o">[</span>migration/0<span class="o">]</span>
</span><span class='line'>    root         3        0.0  0.0     0    0        ?                 SN      Sep22   0:00     <span class="o">[</span>ksoftirqd/0<span class="o">]</span>
</span><span class='line'>    root         4        0.0  0.0     0    0        ?                 S        Sep22   0:02     <span class="o">[</span>migration/1<span class="o">]</span>
</span><span class='line'>    root         5        0.0  0.0     0    0        ?                 SN      Sep22   0:00     <span class="o">[</span>ksoftirqd/1<span class="o">]</span>
</span><span class='line'>    root         6        0.0  0.0     0    0        ?                 Ss+     Sep22   0:02     <span class="o">[</span>migration/2<span class="o">]</span>
</span><span class='line'>    root         7        0.0  0.0     0    0        ?                 SN      Sep22   0:00     <span class="o">[</span>ksoftirqd/2<span class="o">]</span>
</span><span class='line'>    root         8        0.0  0.0     0    0        ?                 S        Sep22   0:00     <span class="o">[</span>migration/3<span class="o">]</span>
</span><span class='line'>    root         9        0.0  0.0     0    0        ?                 SN      Sep22   0:00     <span class="o">[</span>ksoftirqd/3<span class="o">]</span>
</span><span class='line'>    root        10        0.0  0.0     0    0        ?                 S&lt;      Sep22    0:00     <span class="o">[</span>migration/4<span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>上面的每一列代表的意思：</p>

<ol>
<li>USER 进程的属主；</li>
<li>PID   进程的ID；</li>
<li>PPID    父进程；</li>
<li>%CPU   进程占用的CPU百分比；</li>
<li>%MEM  占用内存的百分比；</li>
<li>NI        进程的NICE值，数值大，表示较少占用CPU时间；</li>
<li>VSZ     該进程使用的虚拟內存量（KB）；</li>
<li>RSS     該進程占用的固定內存量（KB）（驻留中页的数量）；</li>
<li>TTY     該進程在那個終端上運行（登陸者的終端位置），若與終端無關，則顯示（？）。若為pts/0等，則表示由網絡連接主機進程</li>
<li>WCHAN  當前進程是否正在進行，若為-表示正在進行；</li>
<li>START   該進程被觸發启动时间；</li>
<li>TIME      該进程實際使用CPU運行的时间；</li>
<li>COMMAND   命令的名称和参数；</li>
</ol>


<br/>


<h4>对于Stat的常见状态：</h4>

<p>D 无法中断的休眠状态（通常 IO 的进程）；</p>

<p>R 正在运行可中在队列中可过行的；</p>

<p>S 处于休眠状态；</p>

<p>T 停止或被追踪；</p>

<p>W 进入内存交换  （从内核2.6开始无效）；</p>

<p>X 死掉的进程   （基本很少見）；</p>

<p>Z 僵尸进程；</p>

<p>&lt; 优先级高的进程</p>

<p>N 优先级较低的进程</p>

<p>L 有些页被锁进内存；</p>

<p>s 进程的领导者（在它之下有子进程）；</p>

<p>l 多进程的（使用 CLONE_THREAD, 类似 NPTL pthreads）；</p>

<ul>
<li>位于后台的进程组；</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[敏捷开发]]></title>
    <link href="http://TsaiKoga.github.com/blog/2014/02/25/min-jie-kai-fa/"/>
    <updated>2014-02-25T13:23:00+08:00</updated>
    <id>http://TsaiKoga.github.com/blog/2014/02/25/min-jie-kai-fa</id>
    <content type="html"><![CDATA[<p><img src="http://TsaiKoga.github.com/images/posts/2014-02-25/minjie.jpg" title="敏捷开发图" alt="图片无法显示" /></p>

<h5>敏捷开发的定义：</h5>

<p>是一种<strong>以人为核心、迭代、循环渐进的开发方法</strong>。在敏捷开发中项目被切分为多个子项目，各个子项目的成果都经过测试，具备集成和可运行的特征。简而言之，就是把一个大项目切分成多个<strong>相互联系但可独立运行的子项目</strong>，并<strong>分别完成</strong>。在此过程软件一直处于可使用状态。</p>

<h5>敏捷开发 5 大价值观</h5>

<ol>
<li>沟通: 团队内部的开发人员之间沟通。</li>
<li>简单: 就是指简单的建模，如画一两张图表来代替几十甚至几百行的代码。</li>
<li>反馈: 过度自信是编程的职业病，反馈则是其处方。</li>
<li>勇气: 当你的决策证明是不合适的时候，你就需要做出重大的决策，放弃或重构你的工作，修正你的方向。</li>
<li>谦逊: 这个就不用我解释了。</li>
</ol>


<h5>敏捷开发核心做法</h5>

<ol>
<li>测试驱动开发</li>
<li>结对编程: 指<strong>两位程序员</strong>肩并肩地坐在同一台电脑前<strong>合作完成</strong>同一个设计、同一个算法、同一段代码或同一组测试。</li>
<li>持续集成:</li>
<li>每日站立会议</li>
<li>共同拥有代码</li>
<li>系统隐喻</li>
</ol>


<p> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;除了敏捷开发模式，目前所具有的开发模式还有好几种,如：瀑布模型，快速原型模型，增量模型，螺旋模型，喷泉模型。
 我在大学的实验室中使用 Rails 框架进行开发，使用的是敏捷开发模式。虽然如此，但是我们团队的敏捷开发还是带有其他模型的特征，可能因为我们还是学生团队，不是一个真正意义上的商业团队(我们平常还必须上课)。</p>

<p> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;我先通过我们团队负责的一个项目（在这里我们叫它为ce）来阐述，我们为什么不是真正的敏捷，而是有有快速原型和增量的特征的敏捷，或者说我们是采用混合模式。</p>

<p><span style="text-align:center"><img src="http://TsaiKoga.github.com/images/posts/2014-02-25/zengliang.jpg" title="增量模型图" alt="图片无法显示" /></span></p>

<ol>
<li><p>ce 首先通过实现前台大部分界面（没有功能）的<strong>样品给客户观看并给予讲解</strong>。客户可以清楚的看到有具体形态而无功能的样品，从而有助于客户提出有<strong>针对性的修改意见</strong>。而参与调研的师兄们对<strong>样品进行再次修改</strong>，并再次呈现给客户看，直到双方达成共识为止；之后师兄们就对这些调研后的资料进行讨论并据此形成<strong>规格说明文档</strong>（我们的规格说明文档是前台界面的图片，并用文字等方式对其功能进行阐述，当然还有一些流程图），然后把之前做的不具有功能的<strong>样品抛弃</strong>。很明显这是<strong>结合了快速原型模型</strong>，从而得到它的<strong>优点</strong>：规格说明文档<strong>正确的描述客户的需求</strong>，减少了设计和编码阶段发生的可能性错误。</p></li>
<li><p>当进入开发阶段时，团队要求将这个 ce 项目分成三期；每期有几条流程，而各个阶段的流程互不影响。并在第一期开发结束后部署给企业使用，这样企业就能拥有<strong>充裕的时间学习和适应</strong>此系统,减少一个新系统可能给客户组织带来的冲击。第二期进行开发直至完成后再部署给企业，这样企业已经事先使用过系统，对系统的排斥性不会那么强了。<strong>增量模型是将软件产品作为一系列的增量构件来设计，编码，集成和测试</strong>。而 ce 的这种开发方式明显和增量模型类似,当然，也可以说是<strong>敏捷开发的增量交付</strong>。</p></li>
<li><p>最后，我想要通过实验室的 ce 项目来说明敏捷开发的特征。</p></li>
</ol>


<p><strong>持续集成：</strong>一开始，我已经提到 ce 调研，那时候形成的规格说明文档有项目每个页面的设计方式，这样 ce 的每个模块以及每个页面都已经划分好，剩下的就是开发人员对每个页面的实现。实现一个页面后进行白盒测试，一个模块的所有页面完成时进行集成测试，这符合敏捷开发的方式。</p>

<p><strong>测试驱动开发：</strong>很可惜，团队的成员（包括老成员）没有 <strong>TDD (测试驱动开发)</strong> 的经验，我们使用一个星期的时间学习，最后在讨论中决定不使用 TDD，主要原因是 TDD 讲究先写测试后开发，而我们已经进入了开发阶段；再加上没有经验，如果使用TDD很大可能会拖慢项目进度。</p>

<p><strong>每日站立会议：</strong>我们每天都会在实验室进行工作，并且在每天晚上进行一个名叫<strong>三分钟站立会议</strong>的谈论，这个会议是就是要求每个人用三分钟左右的时间回报当天的工作内容、任务目标及所遇到的问题；我们希望从这次会议<strong>获得团队中每个人的任务进度和状态，从而有效的对进度进行把控</strong>。这就符合敏捷开发的五大价值观的其中两个：<strong>沟通</strong>和<strong>反馈</strong>。</p>

<p>我清楚的记得我当初被任命开发一个叫做“生产通知单”的页面，这个页面设计上不合理，集结了很多表，关系复杂，数据量大，并且由于 Extjs 特性，导致页面加载速度慢。后来团队选择废除这个页面，上千行的代码就这样被废除了。这也符合敏捷开发的一大价值观：<strong>勇气</strong>。</p>

<p><strong>系统拥有共同的代码：</strong>我们使用 Git 对 ce 的代码进行版本管理，由于 Git 巧妙的设计，团队<strong>每个成员都用有 ce 的代码</strong>（可能是各自不同的版本），不会因为仓库的代码错误和丢失而导致项目失败。</p>

<p><strong>代码的评审和重构：</strong>由于进入第一期末尾时，发现有很多 bug ，最终讨论设立一个代码评审人员(一个师兄，他的经验比我们丰富)，他负责对代码进行评审，并将需要重构的代码标记出来形成一个新的任务，将任务授予相应的开发人员。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Linux用户和权限]]></title>
    <link href="http://TsaiKoga.github.com/blog/2013/11/07/linuxyong-hu-he-quan-xian/"/>
    <updated>2013-11-07T16:14:00+08:00</updated>
    <id>http://TsaiKoga.github.com/blog/2013/11/07/linuxyong-hu-he-quan-xian</id>
    <content type="html"><![CDATA[<p>Linux是一个多用户，多任务操作系统。这意味多个用户可以同时使用一个操作系统。虽然便利，但也带来了许多潜在的威胁。
为了解决这些安全性问题,Linux为用户设置了权限。</p>

<h2>用户</h2>

<p>Linxu系统规定了4中不类型的用户：
 1. 超级用户(root)
 2. 文件主(owner)
 3. 同组用户(group)
 4. 可以访问系统的其他用户(others)</p>

<p>用户具有3种不同的存取权限：
 1. 读&reg;;             二进制：100; 十进制：4
 2. 写(w);             二进制：010; 十进制：2
 3. 可执行或查询(x);   二进制：001; 十进制：1</p>

<hr />

<p>他们从左到右排列代表一个用户对文件或目录的存取权限。</p>

<p>可以使用 ls -d 查看目录文件的使用权限。如以下信息：（这些信息都包含在I节点，可以通过 ls -i/&mdash;inode 查看）</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>-rwxr-xr--  2  tsaikoga  group  198  Sep  8  14:06  ..
</span></code></pre></td></tr></table></div></figure>


<ol>
<li>第一个字段中第一个字符标识文件类型，有如下几种表示：</li>
<li>- 普通文件。</li>
<li>d 目录。</li>
<li>b 块设备。</li>
<li>c 字符设备。</li>
<li><p>l 符号链接文件。</p></li>
<li><p>随后9个字符是用户的存取权限:</p></li>
<li>前三个rwx代表可读，可写，可执行。十进制：7；</li>
<li>接着三个代表十进制: 5；</li>
<li>最后十进制为：4；</li>
<li>当为-时，代表没有权限；</li>
<li>当为 s 时，代表文件执行时，把该文件UID或GID赋予执行进程的UID（用户ID）或GID（组ID）；</li>
<li><p>当为 t 时，设置了粘着标志位（留在内存，不被换出）。如果该文件是目录，则在改目录的文件只能被root或文件主删除。如果是可执行文件，该文件执行后，指向其正文段的指针仍留在内存;这样再次执行时，系统能更快地装入文件。</p></li>
<li><p>表示文件链接数</p></li>
<li><p>文件主</p></li>
<li><p>文件所属的组</p></li>
<li><p>文件容量</p></li>
<li><p>修改日期</p></li>
<li><p>文件名</p></li>
</ol>


<hr />

<h2>改变文件权限</h2>

<p>可以通过两个命令改变文件权限：</p>

<ul>
<li><p>chmod
用于改变或设置文件或目录的存取权限。</p></li>
<li><p>chown
用于改变某个文件或目录的所有者或所属组。</p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[项目代码实现]]></title>
    <link href="http://TsaiKoga.github.com/blog/2013/11/06/xiang-mu-dai-ma-shi-xian/"/>
    <updated>2013-11-06T13:14:00+08:00</updated>
    <id>http://TsaiKoga.github.com/blog/2013/11/06/xiang-mu-dai-ma-shi-xian</id>
    <content type="html"><![CDATA[<p> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;转眼间已经到了大四，想想大三和暑假在做的项目，自己在其中参与开发也曾参与管理；提到开发，从一开始对语言和业务都很陌生，任务不能按时完成；到后来逐渐掌握方法，准时完成任务。这个期间是一个逐渐迷失，然后发现问题，之后解决问题的过程。所以，在这里总结一下自己的经验和体会。</p>

<p>在讲述之前先说一下背景:</p>

<h4>背景：</h4>

<blockquote><p>首先，说一下我们所使用的语言和框架：</p>

<ul>
<li>前台：主要是Extjs</li>
<li>后台：Ruby</li>
<li>框架：Rails</li>
</ul>


<p>其次，说明一下我们所做的系统内容和功能：</p>

<ul>
<li>它是一个有关服装的一套生产流程的管理系统，包括板房打板，制作订单和制单，库存管理，采购管理，员工工资预算等内容。</li>
<li>页面所涉及的组件一般为panel（面板），form（表单），grid（表格），tree（树）和window（窗口）。</li>
<li>页面功能一般为对记录进行增删查改，对单据进行打印和导出Excel的功能。</li>
</ul>


<p>最后，讲述以下我们所做的系统复杂性：</p>

<ul>
<li>其实，由前面的内容和功能看好像不复杂，大部分系统都是这样。但是，看似简单的功能，实现并不容易；因为公司涉及流程范围广，系统较大，而系统所需的表有100多张；经常一个页面涉及10多张表，所以查找关联时比较吃力。</li>
</ul>
</blockquote>

<hr />

<p> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;当我开始接触此项目时，团队已经调研完并且设计好了数据库；而我们对数据库和业务都不熟悉；一开始就进入实现阶段常常会产生一个接连一个的问题；面对这些问题，我们探寻一条解决道路，团队开始采取的方法是：</p>

<p>1.业务完全不了解：</p>

<ul>
<li>先<strong>查看</strong>之前调研出来的<strong>流程图</strong>;</li>
<li>要求之前调研的人员对<strong>大体的流程</strong>进行<strong>讲解</strong>（因为流程图这种文档不一定能被第三方所理解，所以必须进行讲解；但是一开始讲解太全不易接受，所以我提议一开始讲大体内容，实现前针对模块的流程进行讲解）;</li>
<li>开发时对所做的<strong>模块流程</strong>进行<strong>讲解</strong>;</li>
</ul>


<p>2.数据库设计问题：</p>

<ul>
<li>对于这个问题，要看问题的大小，组织当时<strong>数据库设计相关人员进行讨论</strong>;</li>
<li>如果易于修改，不会改动太大，不会造成较大影响的，可以进行修改。</li>
<li>若影响较大，寻求其他途径代替，而不改动数据库。</li>
</ul>


<hr />

<p> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;好，现在来讲我的代码实现方法，因为还是学生，不是什么正规公司，在代码设计上不像大公司那样规范；为了完成每一个任务，自己逐渐掌握的一套方法：</p>

<h4>准备:</h4>

<p>1.了解所要做的<strong>线路的流程</strong>，究竟是要干什么：
 理解所要实现的功能，所做的页面比起原来公司方式多了什么好处或修复了什么弊端。这样有助于理解并且找出系统设计的错误，及早改正。</p>

<p>2.查看<strong>数据库</strong>的设计的<strong>有关联的表</strong>：</p>

<ul>
<li>首先可以先看名字，你之后设计的函数或变量名字其实很多可以从数据库的表名或字段名借鉴。</li>
<li>将你前台所需要的字段找出来，你的页面将通过哪张表开始显示这个字段，找出一条搜索路径。（这里是一些大致需要查找的地方，如表单，表格）</li>
</ul>


<p>3.简要<strong>设计函数和分割代码</strong>(这里不是很细致地设计，而只是提出设计，实现是可以按着这个方向编写代码)：</p>

<ul>
<li>根据功能设计前台函数名（这也只能从较高层次上设计，如果熟练了，就知道页面大概要什么函数了，到那时设计起来简单）。</li>
<li>计高内聚低耦合的代码（这个比较难，一开始会因为站在比较高的地方，对一些细致的内容不了解或是业务知识不清晰而做出设计，最后由于一些功能不一致而修改，发现内聚性较差）。</li>
</ul>


<p>4.根据前台功能开始着手<strong>设计后台</strong>，前台所需发的请求，归纳后台需要什么内容，将后台处理过程划分，设计后台方法名。</p>

<h4>实现:</h4>

<p>5.开始着手敲代码实现，在前台这个期间我经历了三个阶段：</p>

<ul>
<li><p>没显示内容：怎么办？只好不停的调试；因为使用js的ext库做前台，所以我会在代码中用console.log()通过chrome的审查元素进行调试。</p>

<p><strong>结论：</strong>第一次还是不要一次性写太多内容；对于前台，你只需要写出那么一个总体显示框架就行了（如：一个布局：上面有个form，下面有个grid，显示出来就行了），之后再逐步细化。</p></li>
<li><p>当前台显示出来后，我认为根据MVC，View要发送请求，必须通过前台的功能实现，所以着手写之前所设计的前台功能代码：增删查改的ajax。但是，这样编代码后思想会很乱，容易分心，效率低下。</p>

<p><strong>结论：</strong>先做号前台页面的显示和最基本的数据显示（包括后台代码）；然后还是前台的一个功能设计出来后，后台根据这个请求实现，完成后台代码后测试这个功能是否可用。</p></li>
<li><p>最后一阶段就是一个一个的功能实现了，接在在一起时出现了问题，这时也只能调试。</p>

<p><strong>结论：</strong>调试时先判断是前台还是后台，这一期间一般发生在后台；如果可以通过提示的错误判断，则判断哪个范围出错，并那个范围进行调试；不然就顺着请求的访问路径测试，逐步调试。</p></li>
</ul>


<h4>总结:</h4>

<blockquote><p>编代码时</p>

<p>1.先整体后局部：做前台先将整体框架显示，再一个一个进行实现，而功能先不做；</p>

<p>2.先简单后复杂（复杂局部实现）：找出前台要显示的基本信息，编写后台实现基本的显示信息，再用一个功能一个功能实现;</p>

<p>3.先局部后整体：在此期间的不断地测试。</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails Assets Pipeline]]></title>
    <link href="http://TsaiKoga.github.com/blog/2013/10/26/rails-assets-pipeline/"/>
    <updated>2013-10-26T10:10:00+08:00</updated>
    <id>http://TsaiKoga.github.com/blog/2013/10/26/rails-assets-pipeline</id>
    <content type="html"><![CDATA[<p>本章我将从三个方面介绍Assets Pipeline:</p>

<ol>
<li>Assets Pipeline的产生背景</li>
<li>Assets Pipeline的定义</li>
<li>Assets Pipeline的主要功能</li>
<li>Assets Pipeline的使用方法</li>
<li>生产环境下的Assets Pipeline</li>
</ol>


<hr />

<h3>背景：</h3>

<p>在Rails项目中，只用<strong>public/文件夹是公开读取</strong>的，所以我们通常会把<strong>javascript,css等静态资源放入</strong>其中，好让浏览器直接读取。但是随着这些静态文件越来越多，如何管理他们成为一个问题，为了加快浏览器下载速度，我们要合并javascript和stylesheet文件，来减少浏览器请求次数，更进一步还会压缩文件来加速下载时间。</p>

<p>  后来,Rails3引进了Assets Pipeline的新功能，它可以让静态资源存放在不同目录下，rails帮你组合压缩，特别是一些javascript插件。没有Assets Pipeline之前，我们必须将javascript复制到public/中浏览器才可以读取。</p>

<blockquote><p>Yahoo!和google都有自己开源的压缩工具<a href="http://yui.github.io/yuicompressor/">YUI Compressor</a>和<a href="https://developers.google.com/closure/compiler">Closure Compile</a>。</p></blockquote>

<hr />

<h3>什么是Assets Pipeline：</h3>

<p>Assets Pipeline是能<strong>使Javascript,CSS的assets（包括自己在assets文件夹中写的erb,sass和coffescript文件）连接、缩小和压缩的一个框架</strong>。这个框架通过它的<strong>中心库Sprokets(将资源预处理，压缩和缩小)</strong>使所有rails开发者从中受益。</p>

<p>assets pipeline是默认启动的，如果想关闭也可以到config/application.rb文件中将如下代码放入：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">config</span><span class="o">.</span><span class="n">assets</span><span class="o">.</span><span class="n">enable</span> <span class="o">=</span> <span class="kp">false</span>
</span></code></pre></td></tr></table></div></figure>


<p>当然，我们也可以在创建项目时，就不产生assets:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">rails</span> <span class="kp">new</span> <span class="n">appname</span> <span class="o">--</span><span class="n">skip</span><span class="o">-</span><span class="n">sprockets</span>
</span></code></pre></td></tr></table></div></figure>


<hr />

<h3>主要功能:</h3>

<ul>
<li><p><strong>连接：(减少浏览器请求数)</strong></p>

<p>  它可以避免浏览器为了渲染页面而不得不发送过多的请求。网页浏览器限制了并行请求的数量， 所以更少的请求能让你的应用程序加载更快。</p>

<p>  Rails 默认将所有的 JavaScript 文件连结成一个主要的 .js 文件，和将所有的 CSS 文件连结成一个主要的 .css 文件。在生产环境中， Rails 给<strong>每个文件名插入一个 MD5 指纹</strong>,以便<strong>文件被网页浏览器缓存</strong>。你可以通过修改指纹使缓存无效，这在你修改文件后会自动发生。</p></li>
<li><p><strong>缩小/压缩：(加快js,css及图片等静态资源下载速度)</strong></p>

<p>  对于 CSS 文件，是通过去除空格和注释来实现的。</p>

<p>  对于 JavsScript, 会有更多的复杂过程。你可以从选项中选择一套构件或者指定你自己的。</p></li>
<li><p><strong>使用索引文件：(建立索引文件提高访问速度)</strong></p>

<p>  Sprockets 对一些特殊的用途会使用名为 index (使用相关扩展) 的文件，作为一系列相关文件的索引。</p></li>
<li><p><strong>高级语言预编译(coffeescript &ndash;> javascript / scss &ndash;> css等)：</strong></p>

<p>  它能你使用更高级的语言来编写资源，然后预编译成实质的资源。默认支持的语言包括 CSS 的 Sass，JavaScript 的 CoffeeScript 和可用于所有资源的 ERB.</p></li>
</ul>


<hr />

<h3>使用方法：</h3>

<p>在 Rails 之前的版本里，所有的资源都放置在 public 的子目录下比如 images, javascript 和 stylesheets. 对于 asset pipeline, 这些资源现在被指定到 <strong>app/assets 目录</strong>。这个<strong>目录下的所有文件都通过 Sprockets 中间件供应</strong>，这个中间件通过引入 sprockets gem 使用。</p>

<h4>资源组织：</h4>

<p>Pipeline assets 可以被放置到一个应用程序中这三个位置中的一个:</p>

<ul>
<li>app/assets 放置属于<strong>应用程序的资源</strong>，比如自选图像，JavaScript 文件和样式文件。</li>
<li>lib/assets 用于不在应用程序<strong>范围内的自有函式库</strong>，或者那些<strong>跨应用程序共通的函式</strong>。</li>
<li>vendor/assets 用于属于<strong>外部实体的资源</strong>，比如 JavaScript 插件和 CSS 框架的代码。</li>
</ul>


<hr />

<ol type="a">
<li><p>搜索路径：</p>

<p>介绍搜索路径时，先来介绍<strong>资源清单</strong>：</p>

<blockquote><ul>
<li><p>资源清单一般是app/assets/stylesheets/application.css和app/assets/javascripts/application.js</p></li>
<li><p>assets pipeline<strong>默认搜索路径将会在app/assets/images和三个资源路径app/assets/、lib/assets/、 vendor/assets下的所有javascripts, stylesheets子目录</strong>，而索引的<strong>文件将由文件清单给出</strong>,如：//= require home 将是 app/assets/javascripts/home.js。</p></li>
<li><p>下图就是一份JS资源清单：</p></li>
</ul>
</blockquote>

<p><img src="http://TsaiKoga.github.com/images/posts/2013-10-26/resource_list.png" title="JS资源清单" alt="无法显示图片" /></p>

<p>刚才已经提到，那是默认的搜索路径，你也可以附加路径：在config/application.rb里添加路径到pipeline。例如：</p></li>
</ol>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'> <span class="n">config</span><span class="o">.</span><span class="n">assets</span><span class="o">.</span><span class="n">paths</span> <span class="o">&lt;&lt;</span> <span class="no">Rails</span><span class="o">.</span><span class="n">root</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="s2">&quot;app&quot;</span><span class="p">,</span> <span class="s2">&quot;assets&quot;</span><span class="p">,</span> <span class="s2">&quot;flash&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<pre><code>_注意：想在**资源清单外引用**的文件必须加载到**预编译列表**里，否则它们在**生产环境**将不可以用。_
</code></pre>

<ol type="a">
<li><p>使用索引文件:</p>

<p>如果你了解数据库，就应该对索引很熟悉。如果一个字段<strong>经常被查找</strong>，你可以将它<strong>建立索引</strong>从而提高访问速度。</p>

<p>Sprockets也采取类似方法，对一些<strong>特殊的用途</strong>会使用名为 index (使用相关扩展) 的文件。</p>

<blockquote><p>例如，如果你的<strong>许多模块都要使用某个 jQuery 函式库</strong>，这个函式库存放在 lib/assets/library_name。 lib/assets/library_name/index.js 会作为<strong>这个库的所有文件的 manifest</strong>. 这个文件可以按顺序包含一组需要使用的文件，或者一个简单的 require_tree 指令。</p></blockquote></li>
<li><p>连接资源代码：</p>

<p><strong>使用标签：</strong></p>

<p>pipeline(在当前的环境上下文中没有被关闭)提供标签访问你的资源,这些文件通过Sprockets获得。</p>

<p>Sprockets 也会搜寻在 config.assets.paths 指定的所有路径，这些路径包括常规的应用程序路径和任何被 Rails engines 添加进来的路径。</p></li>
</ol>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;</span><span class="sx">%= stylesheet_link_tag &quot;application&quot; %&gt;</span>
</span><span class='line'><span class="sx">&lt;%=</span> <span class="n">javascript_include_tag</span> <span class="s2">&quot;application&quot;</span> <span class="sx">%&gt;</span>
</span><span class='line'><span class="sx">&lt;%= image_tag &quot;rails.png&quot; %&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<pre><code>**CSS:**

assets pipeline会**自动解析erb**，你可以在CSS增加扩展名.erb，这样资源中就可以**使用helpers**方法(如：asset\_path)。

使用assets pipeline，**资源路径必须重写**并且sass-rails提供两个helpers方法：-url和-path。

**JS:**

使用erb扩展名可以使用asset\_path的helpers方法。你也可以在coffeescript增加扩展名erb。
</code></pre>

<ol type="a">
<li><p>资源清单和指令：</p>

<p><strong>作用：</strong>Sprockets 使用资源清单文件去<strong>确认哪些资源要引入并供应</strong>的。</p>

<p>这些资源清单文件包含一些 <strong>指令</strong> — 告诉 Sprockets 哪些文件要被<strong>按顺序引入</strong>，然后将它们<strong>连结成单个 CSS 或者 JavaScript 文件的指示</strong>。根据这些指令， Sprockets 加载这些被指定的文件，如果有必要就对它们<strong>进行加工</strong>，接着将它们<strong>连结成单个文件然后压缩</strong>它们 ( 如果 <strong>Rails.application.config.assets.compress</strong> 为 true ).</p>

<p>由于只处理单个文件而不是多个， 浏览器可以发起更少的请求所以页面的加载时间将会大大的缩减。</p>

<p>还记得清单内容吗？之前提到的资源清单。</p>

<p><strong>构成：</strong></p>

<ul>
<li>JS资源清单:</li>
</ul>


<p>那些<strong>以//=开头的注释就是指令</strong>，而 <strong>require 指令</strong>是用于告诉 Sprockets <strong>需要加入</strong>的文件,也不用加扩展名，当资源清单是js文件，Sprockets会假设你加入的是一个.js文件。</p>

<p>  <strong>require_tree</strong> 指令告诉 Sprockets <strong>递归</strong>地去包含在<strong>指定目录下<em>所有</em></strong> 的 JavaScript 文件到<strong>输出里</strong>。 这些<strong>路径必须在资源清单文件中有相关的指定</strong>。 有也可以使用 require_directory 指令，它会将在某个特定目录下所有的 JavaScript 文件包含进去，但不递归。</p></li>
</ol>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'>  <span class="o">//=</span> <span class="nt">require</span> <span class="nt">jquery</span>
</span><span class='line'>  <span class="o">//=</span> <span class="nt">require</span> <span class="nt">jquery_ujs</span>
</span><span class='line'>  <span class="o">//=</span> <span class="nt">require_tree</span> <span class="o">.</span>
</span></code></pre></td></tr></table></div></figure>


<pre><code>  - CSS资源清单：

  用css的注释开头，同样用require引入文件，指令**require_tree**和JS中的一样（**加入当前目录所有stylesheets文件**），require_self将文件中的 CSS (如果有) 放置到 require_self 调用的准确位置。
</code></pre>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'>   <span class="cm">/* ...</span>
</span><span class='line'><span class="cm"> *= require_self</span>
</span><span class='line'><span class="cm"> *= require_tree .</span>
</span><span class='line'><span class="cm"> */</span>
</span></code></pre></td></tr></table></div></figure>


<pre><code>_注意：用到多个sass文件时，用**@import rule**替代Sprockets_指令，Sprockets 指令在 Sass 文件中定义的**变量和 mixins** 都只能在其**被定义的文档**中可用。_
</code></pre>

<ol type="a">
<li><p>预处理：</p>

<p>文件的<strong>扩展名</strong>被用于判断某个资源文件要进入<strong>哪个预处理过程</strong>。</p>

<p><strong>预处理</strong>可以通过<strong>添加其它的扩展</strong>被加入，扩展的<strong>处理顺序</strong>按是<strong>从右到左</strong>。这应该用于需要按顺序处理的过程。编译好的 JavaScript 和 CSS 文件送回给浏览。</p>

<blockquote><p>例如：</p>

<p>app/assets/javascripts/projects.js.erb.coffee，那么现由 CoffeeScript 拦截器先处理。它不能解析 ERB 所以你会碰到问题。</p></blockquote></li>
</ol>


<hr />

<h4>生产环境：</h4>

<ul>
<li><p>预编译资源</p>

<p>Rails 本身绑定了一个 <strong>rake</strong> 任何去编译资源资源清单和 pipeline 中的其它文件到<strong>磁盘</strong>里。</p>

<p><strong>编译后的资源</strong>都被写入到了在 config.assets.prefix 指定的位置里。默认情况下，是 <strong>pulibc/assets 目录</strong>。</p>

<p>为了更<strong>快速的预编译资源</strong>，你可以在 config/application.rb 里将 <strong>config.assets.initialize_on_precompile 设置为 false</strong> 去<strong>部分加载</strong>你的应用程序。</p>

<blockquote><p>如果你设置 config.assets.initialize_on_precomile 为 false,在<strong>开发模式</strong>范围内会<strong>忽略这个标记的值</strong>. 改变这个标记也会影响到 engines. Engines 也可以<strong>指定预编译资源.</strong> 因为完整的环境还没有加载完, <strong>engines (或者其他的 gems) 将不会被加载</strong>, 这会引起<strong>资源丢失</strong>.</p></blockquote>

<p>所以，你可以通过以下命令生成已编译版本的资源文件:</p></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">bundle</span> <span class="nb">exec</span> <span class="n">rake</span> <span class="ss">assets</span><span class="p">:</span><span class="n">precompile</span>
</span></code></pre></td></tr></table></div></figure>


<hr />
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[加载Rails]]></title>
    <link href="http://TsaiKoga.github.com/blog/2013/10/25/jia-zai-rails/"/>
    <updated>2013-10-25T22:58:00+08:00</updated>
    <id>http://TsaiKoga.github.com/blog/2013/10/25/jia-zai-rails</id>
    <content type="html"><![CDATA[<p>在上一篇文章<a href="http://tsaikoga.github.io/blog/2013/10/24/railschu-shi-hua-he-qi-dong-guo-cheng/">Rails服务启动过程</a>,最后加载的config/application.rb文件中显示：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;rails/all&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>这个文件在railties/lib/rails/all.rb。</p>

<hr />

<h3>railties/lib/rails/all.rb</h3>

<p>这个文件非常重要，它加载了rails的所有个体框架，从中可以知道这些<strong>框架的加载顺序</strong>：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s2">&quot;rails&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="sx">%{</span>
</span><span class='line'><span class="sx">    active_record</span>
</span><span class='line'><span class="sx">    action_controller</span>
</span><span class='line'><span class="sx">    action_mail</span>
</span><span class='line'><span class="sx">    rails/test_unit</span>
</span><span class='line'><span class="sx">    sprockets</span>
</span><span class='line'><span class="sx">}</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">framework</span><span class="o">|</span>
</span><span class='line'>    <span class="k">begin</span>
</span><span class='line'>        <span class="nb">require</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">framework</span><span class="si">}</span><span class="s2">/railtie&quot;</span>           <span class="c1"># 文件active_record/railtie等</span>
</span><span class='line'>  <span class="k">rescue</span> <span class="no">LoadError</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<blockquote><p><strong>railtie 是Rails的核心框架</strong>，并且提供hooks来修改启动时的载入流程，
如果需要在启动过程或之后与rails框架进行交互，就需要加载Railtie。</p></blockquote>

<hr />

<h3>config/environment.rb</h3>

<p>当config/application.rb已经将rails加载完成,并且<strong>定义了应用的命名空间</strong>（在一个module中mixin一个Application类）。</p>

<p>而在config/environment.rb文件中，你的<strong>项目被初始化</strong>，如：<strong>Examples::Application.initialize!(在application.rb中已经定义了)</strong>。</p>

<p>想知道初始化做了写什么吗？</p>

<hr />

<h3>railties/lib/rails/application.rb</h3>

<p>以下为初始化代码：(你的Application类继承Rails::Application类，而这个类就在railties/lib/rails/application.rb文件中)</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">initialize!</span><span class="p">(</span><span class="n">group</span><span class="o">=</span><span class="ss">:default</span><span class="p">)</span> <span class="c1">#:nodoc:</span>
</span><span class='line'>    <span class="k">raise</span> <span class="s2">&quot;Application has been already initialized.&quot;</span> <span class="k">if</span> <span class="vi">@initialized</span>
</span><span class='line'>    <span class="n">run_initializers</span><span class="p">(</span><span class="n">group</span><span class="p">,</span> <span class="nb">self</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@initialized</span> <span class="o">=</span> <span class="kp">true</span>
</span><span class='line'>    <span class="nb">self</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Rails会贯穿这整个Rails::Application祖先类，重新排序和运行他们。</p>

<h3>Rack: lib/rack/server.rb</h3>

<p>在<a href="http://tsaikoga.github.io/blog/2013/10/24/railschu-shi-hua-he-qi-dong-guo-cheng/">上一篇</a>时,有提到Rack::Server类，它里面有一个app方法是这么定义的：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">app</span>
</span><span class='line'>    <span class="vi">@app</span> <span class="o">||=</span> <span class="k">begin</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">!::</span><span class="no">File</span><span class="o">.</span><span class="n">exist?</span> <span class="n">options</span><span class="o">[</span><span class="ss">:config</span><span class="o">]</span>
</span><span class='line'>            <span class="nb">abort</span> <span class="s2">&quot;configuration </span><span class="si">#{</span><span class="n">options</span><span class="o">[</span><span class="ss">:config</span><span class="o">]</span><span class="si">}</span><span class="s2"> not found&quot;</span>
</span><span class='line'>        <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">app</span><span class="p">,</span> <span class="n">options</span> <span class="o">=</span> <span class="ss">Rack</span><span class="p">:</span><span class="ss">:Builder</span><span class="o">.</span><span class="n">parse_file</span><span class="p">(</span><span class="nb">self</span><span class="o">.</span><span class="n">options</span><span class="o">[</span><span class="ss">:config</span><span class="o">]</span><span class="p">,</span> <span class="n">opt_parser</span><span class="p">)</span>
</span><span class='line'>        <span class="nb">self</span><span class="o">.</span><span class="n">options</span><span class="o">.</span><span class="n">merge!</span> <span class="n">options</span>
</span><span class='line'>        <span class="n">app</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>这里所指的app就是Rails的app（一种中间件），Rack将会调用所有提供的中间件。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">build_app</span><span class="p">(</span><span class="n">app</span><span class="p">)</span>
</span><span class='line'>    <span class="n">middleware</span><span class="o">[</span><span class="n">options</span><span class="o">[</span><span class="ss">:environment</span><span class="o">]].</span><span class="n">reverse_each</span> <span class="k">do</span> <span class="o">|</span><span class="n">middleware</span><span class="o">|</span>
</span><span class='line'>        <span class="n">middleware</span> <span class="o">=</span> <span class="n">middleware</span><span class="o">.</span><span class="n">call</span><span class="p">(</span><span class="nb">self</span><span class="p">)</span> <span class="k">if</span> <span class="n">middleware</span><span class="o">.</span><span class="n">respond_to?</span><span class="p">(</span><span class="ss">:call</span><span class="p">)</span>
</span><span class='line'>        <span class="k">next</span> <span class="k">unless</span> <span class="n">middleware</span>
</span><span class='line'>        <span class="n">klass</span> <span class="o">=</span> <span class="n">middleware</span><span class="o">.</span><span class="n">shift</span>
</span><span class='line'>        <span class="n">app</span> <span class="o">=</span> <span class="n">klass</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">app</span><span class="p">,</span> <span class="o">*</span><span class="n">middleware</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>    <span class="n">app</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>以上代码build_app是被Server#start方法调用的，通过这个代码调用：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">server</span><span class="o">.</span><span class="n">run</span> <span class="n">wrapped_app</span><span class="p">,</span> <span class="n">options</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">blk</span>
</span></code></pre></td></tr></table></div></figure>


<p>所以，server.run将会依赖于你所使用的server程序(以上代码有传入一个程序块&amp;blk,他将关系到你运行的服务),
像是如果你是用的是Mongrel数据库，将会通过传入如下程序块运行：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">run</span><span class="p">(</span><span class="n">app</span><span class="p">,</span> <span class="n">options</span><span class="o">=</span><span class="p">{})</span>
</span><span class='line'>    <span class="n">server</span> <span class="o">=</span> <span class="o">::</span><span class="ss">Mongrel</span><span class="p">:</span><span class="ss">:HttpServer</span><span class="o">.</span><span class="n">new</span><span class="p">(</span>
</span><span class='line'>        <span class="n">options</span><span class="o">[</span><span class="ss">:Host</span><span class="o">]</span>           <span class="o">||</span> <span class="s1">&#39;0.0.0.0&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="n">options</span><span class="o">[</span><span class="ss">:Port</span><span class="o">]</span>           <span class="o">||</span> <span class="mi">8080</span><span class="p">,</span>
</span><span class='line'>        <span class="n">options</span><span class="o">[</span><span class="ss">:num_processors</span><span class="o">]</span> <span class="o">||</span> <span class="mi">950</span><span class="p">,</span>
</span><span class='line'>        <span class="n">options</span><span class="o">[</span><span class="ss">:throttle</span><span class="o">]</span>       <span class="o">||</span> <span class="mi">0</span><span class="p">,</span>
</span><span class='line'>        <span class="n">options</span><span class="o">[</span><span class="ss">:timeout</span><span class="o">]</span>        <span class="o">||</span> <span class="mi">60</span><span class="p">)</span>
</span><span class='line'>    <span class="c1"># Acts like Rack::URLMap, utilizing Mongrel&#39;s own path finding methods.</span>
</span><span class='line'>    <span class="c1"># Use is similar to #run, replacing the app argument with a hash of</span>
</span><span class='line'>    <span class="c1"># { path=&gt;app, ... } or an instance of Rack::URLMap.</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">options</span><span class="o">[</span><span class="ss">:map</span><span class="o">]</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">app</span><span class="o">.</span><span class="n">is_a?</span> <span class="no">Hash</span>
</span><span class='line'>            <span class="n">app</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">path</span><span class="p">,</span> <span class="n">appl</span><span class="o">|</span>
</span><span class='line'>                <span class="n">path</span> <span class="o">=</span> <span class="s1">&#39;/&#39;</span><span class="o">+</span><span class="n">path</span> <span class="k">unless</span> <span class="n">path</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">==</span> <span class="sc">?/</span>
</span><span class='line'>                <span class="n">server</span><span class="o">.</span><span class="n">register</span><span class="p">(</span><span class="n">path</span><span class="p">,</span> <span class="ss">Rack</span><span class="p">:</span><span class="ss">:Handler</span><span class="o">::</span><span class="no">Mongrel</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">appl</span><span class="p">))</span>
</span><span class='line'>            <span class="k">end</span>
</span><span class='line'>        <span class="k">elsif</span> <span class="n">app</span><span class="o">.</span><span class="n">is_a?</span> <span class="no">URLMap</span>
</span><span class='line'>            <span class="n">app</span><span class="o">.</span><span class="n">instance_variable_get</span><span class="p">(</span><span class="ss">:@mapping</span><span class="p">)</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="p">(</span><span class="n">host</span><span class="p">,</span> <span class="n">path</span><span class="p">,</span> <span class="n">appl</span><span class="p">)</span><span class="o">|</span>
</span><span class='line'>             <span class="k">next</span> <span class="k">if</span> <span class="o">!</span><span class="n">host</span><span class="o">.</span><span class="n">nil?</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="n">options</span><span class="o">[</span><span class="ss">:Host</span><span class="o">].</span><span class="n">nil?</span> <span class="o">&amp;&amp;</span> <span class="n">options</span><span class="o">[</span><span class="ss">:Host</span><span class="o">]</span> <span class="o">!=</span> <span class="n">host</span>
</span><span class='line'>             <span class="n">path</span> <span class="o">=</span> <span class="s1">&#39;/&#39;</span><span class="o">+</span><span class="n">path</span> <span class="k">unless</span> <span class="n">path</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">==</span> <span class="sc">?/</span>
</span><span class='line'>             <span class="n">server</span><span class="o">.</span><span class="n">register</span><span class="p">(</span><span class="n">path</span><span class="p">,</span> <span class="ss">Rack</span><span class="p">:</span><span class="ss">:Handler</span><span class="o">::</span><span class="no">Mongrel</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">appl</span><span class="p">))</span>
</span><span class='line'>            <span class="k">end</span>
</span><span class='line'>        <span class="k">else</span>
</span><span class='line'>            <span class="k">raise</span> <span class="no">ArgumentError</span><span class="p">,</span> <span class="s2">&quot;first argument should be a Hash or URLMap&quot;</span>
</span><span class='line'>        <span class="k">end</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>        <span class="n">server</span><span class="o">.</span><span class="n">register</span><span class="p">(</span><span class="s1">&#39;/&#39;</span><span class="p">,</span> <span class="ss">Rack</span><span class="p">:</span><span class="ss">:Handler</span><span class="o">::</span><span class="no">Mongrel</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">app</span><span class="p">))</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>    <span class="k">yield</span> <span class="n">server</span>  <span class="k">if</span> <span class="nb">block_given?</span>
</span><span class='line'>    <span class="n">server</span><span class="o">.</span><span class="n">run</span><span class="o">.</span><span class="n">join</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>以上代码使用Mongrel::HttpServer定义了server实例，然后使用server.run运行.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails服务启动过程]]></title>
    <link href="http://TsaiKoga.github.com/blog/2013/10/24/railschu-shi-hua-he-qi-dong-guo-cheng/"/>
    <updated>2013-10-24T14:51:00+08:00</updated>
    <id>http://TsaiKoga.github.com/blog/2013/10/24/railschu-shi-hua-he-qi-dong-guo-cheng</id>
    <content type="html"><![CDATA[<p>我们都知道，每当我们console中输入rails s时，系统就启动了你的rails应用程序。</p>

<hr />

<h3>app程序中的bin/rails脚本</h3>

<p>它是由你的app程序的<strong>bin/rails脚本</strong>执行的(我们的rails命令在通过bin/rails脚本引用rails/commands.rb文件中)。</p>

<p><em>如：example_</em>app/bin/rails_</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1">#!/usr/bin/env ruby</span>
</span><span class='line'><span class="no">APP_PATH</span> <span class="o">=</span> <span class="no">File</span><span class="o">.</span><span class="n">expand_path</span><span class="p">(</span><span class="s1">&#39;../../config/application&#39;</span><span class="p">,</span>  <span class="bp">__FILE__</span><span class="p">)</span>
</span><span class='line'><span class="n">require_relative</span> <span class="s1">&#39;../config/boot&#39;</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;rails/commands&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>APP_PATH常量将会在rails/commands中用到，而config/boot指向<strong>config/boot.rb</strong>文件，这个文件<strong>会加载和设置Bundler</strong>。</p>

<hr />

<h3>config/boot.rb加载gem</h3>

<p>前面bin/rails引入两个文件,现在我们先说第一个文件
config/boot.rb:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># Set up gems listed in the Gemfile.</span>
</span><span class='line'><span class="no">ENV</span><span class="o">[</span><span class="s1">&#39;BUNDLE_GEMFILE&#39;</span><span class="o">]</span> <span class="o">||=</span> <span class="no">File</span><span class="o">.</span><span class="n">expand_path</span><span class="p">(</span><span class="s1">&#39;../../Gemfile&#39;</span><span class="p">,</span> <span class="bp">__FILE__</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;bundler/setup&#39;</span> <span class="k">if</span> <span class="no">File</span><span class="o">.</span><span class="n">exists?</span><span class="p">(</span><span class="no">ENV</span><span class="o">[</span><span class="s1">&#39;BUNDLE_GEMFILE&#39;</span><span class="o">]</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>config/boot.rb用ENV[&lsquo;BUNDLE_GEMFILE&rsquo;]定位Gemfile文件，当Gemfile文件存在时，就将它引入。这样一来，gem就被引入了。</p>

<hr />

<h3>rails/commands.rb执行rails命令</h3>

<p>前面config/boot.rb引入的第二个文件,但这个文件必须在第一个文件config/boot.rb文件引入后才被引入。
rails/commands.rb:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">ARGV</span> <span class="o">&lt;&lt;</span> <span class="s1">&#39;--help&#39;</span> <span class="k">if</span> <span class="no">ARGV</span><span class="o">.</span><span class="n">empty?</span>
</span><span class='line'>
</span><span class='line'><span class="n">aliases</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>    <span class="s2">&quot;g&quot;</span>  <span class="o">=&gt;</span> <span class="s2">&quot;generate&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;d&quot;</span>  <span class="o">=&gt;</span> <span class="s2">&quot;destroy&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;c&quot;</span>  <span class="o">=&gt;</span> <span class="s2">&quot;console&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;s&quot;</span>  <span class="o">=&gt;</span> <span class="s2">&quot;server&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;db&quot;</span> <span class="o">=&gt;</span> <span class="s2">&quot;dbconsole&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;r&quot;</span>  <span class="o">=&gt;</span> <span class="s2">&quot;runner&quot;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">command</span> <span class="o">=</span> <span class="no">ARGV</span><span class="o">.</span><span class="n">shift</span>
</span><span class='line'><span class="n">command</span> <span class="o">=</span> <span class="n">aliases</span><span class="o">[</span><span class="n">command</span><span class="o">]</span> <span class="o">||</span> <span class="n">command</span>
</span></code></pre></td></tr></table></div></figure>


<p>当你输入的是rails server的话，将会执行下列代码匹配你的命令：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">when</span> <span class="s1">&#39;server&#39;</span>
</span><span class='line'>    <span class="c1"># Change to the application&#39;s path if there is no config.ru file in current dir.</span>
</span><span class='line'>    <span class="c1"># This allows us to run `rails server` from other directories, but still get</span>
</span><span class='line'>    <span class="c1"># the main config.ru and properly set the tmp directory.</span>
</span><span class='line'>    <span class="no">Dir</span><span class="o">.</span><span class="n">chdir</span><span class="p">(</span><span class="no">File</span><span class="o">.</span><span class="n">expand_path</span><span class="p">(</span><span class="s1">&#39;../../&#39;</span><span class="p">,</span> <span class="no">APP_PATH</span><span class="p">))</span> <span class="k">unless</span> <span class="no">File</span><span class="o">.</span><span class="n">exists?</span><span class="p">(</span><span class="no">File</span><span class="o">.</span><span class="n">expand_path</span><span class="p">(</span><span class="s2">&quot;config.ru&quot;</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'>    <span class="nb">require</span> <span class="s1">&#39;rails/commands/server&#39;</span>
</span><span class='line'>    <span class="ss">Rails</span><span class="p">:</span><span class="ss">:Server</span><span class="o">.</span><span class="n">new</span><span class="o">.</span><span class="n">tap</span> <span class="k">do</span> <span class="o">|</span><span class="n">server</span><span class="o">|</span>
</span><span class='line'>        <span class="c1"># We need to require application after the server sets environment,</span>
</span><span class='line'>        <span class="c1"># otherwise the --environment option given to the server won&#39;t propagate.</span>
</span><span class='line'>        <span class="nb">require</span> <span class="no">APP_PATH</span>
</span><span class='line'>        <span class="no">Dir</span><span class="o">.</span><span class="n">chdir</span><span class="p">(</span><span class="no">Rails</span><span class="o">.</span><span class="n">application</span><span class="o">.</span><span class="n">root</span><span class="p">)</span>
</span><span class='line'>        <span class="n">server</span><span class="o">.</span><span class="n">start</span>
</span><span class='line'>    <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p> ru</p>

<p>刚才我们的bin/rails脚本中已经定义了常量APP_PATH为&#8221;config/application.rb&#8221;,而</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Dir</span><span class="o">.</span><span class="n">chdir</span><span class="p">(</span><span class="no">File</span><span class="o">.</span><span class="n">expand</span><span class="p">\</span><span class="n">_path</span><span class="p">(</span><span class="s1">&#39;../../&#39;</span><span class="p">,</span> <span class="no">APP</span><span class="p">\</span><span class="n">_PATH</span><span class="p">))</span> <span class="k">unless</span> <span class="no">File</span><span class="o">.</span><span class="n">exists?</span><span class="p">(</span><span class="no">File</span><span class="o">.</span><span class="n">expand</span><span class="p">\</span><span class="n">_path</span><span class="p">(</span><span class="s2">&quot;config.ru&quot;</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>表示如果<strong>没有config.ru文件时，就加载rails/commands/server文件，否则加载config/application.rb</strong>。</p>

<p>也就是，你<strong>启动了服务前才帮你加载程序的应用文件application.rb</strong>。
application.rb这个文件将会加载Rails。</p>

<hr />

<h3>rails/commands/server.rb</h3>

<p>来看一下rails/commands/server中定义的类Rails::Server吧。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;fileutils&#39;</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;optparse&#39;</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;action_dispatch&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="k">module</span> <span class="nn">Rails</span>
</span><span class='line'>    <span class="k">class</span> <span class="nc">Server</span> <span class="o">&lt;</span> <span class="o">::</span><span class="ss">Rack</span><span class="p">:</span><span class="ss">:Server</span>
</span></code></pre></td></tr></table></div></figure>


<p>这里引入的<strong>fileutils和optparse</strong>是<strong>标准的ruby库</strong>，分别提供文件的辅助方法和转化选择。</p>

<p>Rails::Server继承了Rack::Server,当<strong>Rack::Server被初始化(设置环境)</strong>时，Rack::Server也被初始化。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="o">*</span><span class="p">)</span>
</span><span class='line'>    <span class="k">super</span>
</span><span class='line'>    <span class="n">set_environment</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<hr />

<p>Rack::Server是为<strong>以Rack为基础的应用提供公用的服务接口</strong>，rails就是其中之一。</p>

<ul>
<li><p>初始化设置环境：</p>

<p>  刚才提到的初始化代码如下：</p></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">set_environment</span>
</span><span class='line'>    <span class="no">ENV</span><span class="o">[</span><span class="s2">&quot;RAILS_ENV&quot;</span><span class="o">]</span> <span class="o">||=</span> <span class="n">options</span><span class="o">[</span><span class="ss">:environment</span><span class="o">]</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<pre><code>不要以为set_environment很少，options干了很多事情：
</code></pre>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">options</span>
</span><span class='line'>    <span class="vi">@options</span> <span class="o">||=</span> <span class="n">parse_options</span><span class="p">(</span><span class="no">ARGV</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<pre><code>parse_options定义如下：
</code></pre>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">parse_options</span><span class="p">(</span><span class="n">args</span><span class="p">)</span>
</span><span class='line'>    <span class="n">options</span> <span class="o">=</span> <span class="n">default_options</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1"># Don&#39;t evaluate CGI ISINDEX parameters.</span>
</span><span class='line'>    <span class="c1"># http://hoohoo.ncsa.uiuc.edu/cgi/cl.html</span>
</span><span class='line'>    <span class="n">args</span><span class="o">.</span><span class="n">clear</span> <span class="k">if</span> <span class="no">ENV</span><span class="o">.</span><span class="n">include?</span><span class="p">(</span><span class="s2">&quot;REQUEST_METHOD&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">options</span><span class="o">.</span><span class="n">merge!</span> <span class="n">opt_parser</span><span class="o">.</span><span class="n">parse!</span> <span class="n">args</span>
</span><span class='line'>    <span class="n">options</span><span class="o">[</span><span class="ss">:config</span><span class="o">]</span> <span class="o">=</span> <span class="o">::</span><span class="no">File</span><span class="o">.</span><span class="n">expand_path</span><span class="p">(</span><span class="n">options</span><span class="o">[</span><span class="ss">:config</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>    <span class="no">ENV</span><span class="o">[</span><span class="s2">&quot;RACK_ENV&quot;</span><span class="o">]</span> <span class="o">=</span> <span class="n">options</span><span class="o">[</span><span class="ss">:environment</span><span class="o">]</span>
</span><span class='line'>    <span class="n">options</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<pre><code>我们将一行一行解释，

(1)选择default_options如下设置：
</code></pre>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">default_options</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="ss">:environment</span> <span class="o">=&gt;</span> <span class="no">ENV</span><span class="o">[</span><span class="s1">&#39;RACK_ENV&#39;</span><span class="o">]</span> <span class="o">||</span> <span class="s2">&quot;development&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="ss">:pid</span>         <span class="o">=&gt;</span> <span class="kp">nil</span><span class="p">,</span>
</span><span class='line'>        <span class="ss">:Port</span>        <span class="o">=&gt;</span> <span class="mi">9292</span><span class="p">,</span>
</span><span class='line'>        <span class="ss">:Host</span>        <span class="o">=&gt;</span> <span class="s2">&quot;0.0.0.0&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="ss">:AccessLog</span>   <span class="o">=&gt;</span> <span class="o">[]</span><span class="p">,</span>
</span><span class='line'>        <span class="ss">:config</span>      <span class="o">=&gt;</span> <span class="s2">&quot;config.ru&quot;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<pre><code>它**(Rack::Server)提供了默认环境和端口号等信息**，还记得当rails/commands.rb中，如果存在config.ru时，就加载config/applicaton.rb文件吗？

(2)当ENV哈希环境中没有REQUEST_METHOD这个键时，跳过而去执行合并选项。
</code></pre>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="ss">Rack</span><span class="p">:</span><span class="ss">:Server</span><span class="err">中的</span><span class="n">opt_server</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">opt_parser</span>
</span><span class='line'>      <span class="no">Options</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'>  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<pre><code>(3)Rails::Server重写parse!
</code></pre>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">parse!</span><span class="p">(</span><span class="n">args</span><span class="p">)</span>
</span><span class='line'>    <span class="n">args</span><span class="p">,</span> <span class="n">options</span> <span class="o">=</span> <span class="n">args</span><span class="o">.</span><span class="n">dup</span><span class="p">,</span> <span class="p">{}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">opt_parser</span> <span class="o">=</span> <span class="no">OptionParser</span><span class="o">.</span><span class="n">new</span> <span class="k">do</span> <span class="o">|</span><span class="n">opts</span><span class="o">|</span>
</span><span class='line'>        <span class="n">opts</span><span class="o">.</span><span class="n">banner</span> <span class="o">=</span> <span class="s2">&quot;Usage: rails server [mongrel, thin, etc] [options]&quot;</span>
</span><span class='line'>        <span class="n">opts</span><span class="o">.</span><span class="n">on</span><span class="p">(</span><span class="s2">&quot;-p&quot;</span><span class="p">,</span> <span class="s2">&quot;--port=port&quot;</span><span class="p">,</span> <span class="nb">Integer</span><span class="p">,</span>
</span><span class='line'>                        <span class="s2">&quot;Runs Rails on the specified port.&quot;</span><span class="p">,</span> <span class="s2">&quot;Default: 3000&quot;</span><span class="p">)</span> <span class="p">{</span> <span class="o">|</span><span class="n">v</span><span class="o">|</span> <span class="n">options</span><span class="o">[</span><span class="ss">:Port</span><span class="o">]</span> <span class="o">=</span> <span class="n">v</span> <span class="p">}</span>
</span><span class='line'>    <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span></code></pre></td></tr></table></div></figure>


<p>刚才说default_options已经有了config.ru，这是回到之前rails.commands.rb文件，它加载了config/application.rb文件</p>

<hr />

<h3>config/application.rb</h3>

<p>当require APP_PATH被执行，<strong>config/applicaton.rb被加载，server.start就被调用</strong>了。
方法如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">start</span>
</span><span class='line'>    <span class="n">url</span> <span class="o">=</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">options</span><span class="o">[</span><span class="ss">:SSLEnable</span><span class="o">]</span> <span class="p">?</span> <span class="s1">&#39;https&#39;</span> <span class="p">:</span> <span class="s1">&#39;http&#39;</span><span class="si">}</span><span class="s2">://</span><span class="si">#{</span><span class="n">options</span><span class="o">[</span><span class="ss">:Host</span><span class="o">]</span><span class="si">}</span><span class="s2">:</span><span class="si">#{</span><span class="n">options</span><span class="o">[</span><span class="ss">:Port</span><span class="o">]</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;=&gt; Booting </span><span class="si">#{</span><span class="ss">ActiveSupport</span><span class="p">:</span><span class="ss">:Inflector</span><span class="o">.</span><span class="n">demodulize</span><span class="p">(</span><span class="n">server</span><span class="p">)</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;=&gt; Rails </span><span class="si">#{</span><span class="no">Rails</span><span class="o">.</span><span class="n">version</span><span class="si">}</span><span class="s2"> application starting in </span><span class="si">#{</span><span class="no">Rails</span><span class="o">.</span><span class="n">env</span><span class="si">}</span><span class="s2"> on </span><span class="si">#{</span><span class="n">url</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;=&gt; Run `rails server -h` for more startup options&quot;</span>
</span><span class='line'>    <span class="nb">trap</span><span class="p">(</span><span class="ss">:INT</span><span class="p">)</span> <span class="p">{</span> <span class="nb">exit</span> <span class="p">}</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;=&gt; Ctrl-C to shutdown server&quot;</span> <span class="k">unless</span> <span class="n">options</span><span class="o">[</span><span class="ss">:daemonize</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">#Create required tmp directories if not found</span>
</span><span class='line'>    <span class="sx">%w(cache pids sessions sockets)</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">dir_to_make</span><span class="o">|</span>
</span><span class='line'>        <span class="no">FileUtils</span><span class="o">.</span><span class="n">mkdir_p</span><span class="p">(</span><span class="no">Rails</span><span class="o">.</span><span class="n">root</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="s1">&#39;tmp&#39;</span><span class="p">,</span> <span class="n">dir_to_make</span><span class="p">))</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">unless</span> <span class="n">options</span><span class="o">[</span><span class="ss">:daemonize</span><span class="o">]</span>
</span><span class='line'>        <span class="n">wrapped_app</span> <span class="c1"># touch the app so the logger is set up</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">console</span> <span class="o">=</span> <span class="ss">ActiveSupport</span><span class="p">:</span><span class="ss">:Logger</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="vg">$stdout</span><span class="p">)</span>
</span><span class='line'>        <span class="n">console</span><span class="o">.</span><span class="n">formatter</span> <span class="o">=</span> <span class="no">Rails</span><span class="o">.</span><span class="n">logger</span><span class="o">.</span><span class="n">formatter</span>
</span><span class='line'>
</span><span class='line'>        <span class="no">Rails</span><span class="o">.</span><span class="n">logger</span><span class="o">.</span><span class="n">extend</span><span class="p">(</span><span class="ss">ActiveSupport</span><span class="p">:</span><span class="ss">:Logger</span><span class="o">.</span><span class="n">broadcast</span><span class="p">(</span><span class="n">console</span><span class="p">))</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">super</span>
</span><span class='line'><span class="k">ensure</span>
</span><span class='line'>    <span class="c1"># The &#39;-h&#39; option calls exit before @options is set.</span>
</span><span class='line'>    <span class="c1"># If we call &#39;options&#39; with it unset, we get double help banners.</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s1">&#39;Exiting&#39;</span> <span class="k">unless</span> <span class="vi">@options</span> <span class="o">&amp;&amp;</span> <span class="n">options</span><span class="o">[</span><span class="ss">:daemonize</span><span class="o">]</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<blockquote><ul>
<li><p>这个方法非常重要，我们可以看到前面有一堆提示，而后面<strong>创建了tmp/cache,tmp/pids,tmp/sessions和tmp/sockets文件夹</strong>,</p></li>
<li><p>在调用<strong>wrapped_app方法创建Rack应用</strong>。</p></li>
<li><p>并且<strong>定了ActiveSupport::Logger</strong>。</p></li>
</ul>
</blockquote>

<p>还记得<strong>options[:config]默认指向config.ru</strong>吗？这个文件中包含了：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># This file is used by Rack-based servers to start the application.</span>
</span><span class='line'>
</span><span class='line'><span class="nb">require</span> <span class="o">::</span><span class="no">File</span><span class="o">.</span><span class="n">expand_path</span><span class="p">(</span><span class="s1">&#39;../config/environment&#39;</span><span class="p">,</span>  <span class="bp">__FILE__</span><span class="p">)</span>
</span><span class='line'><span class="n">run</span> <span class="o">&lt;%=</span> <span class="n">app_const</span> <span class="o">%&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>它<strong>引进了config/environment.rb</strong>文件，而<strong>environment.rb这个文件引入了config/application.rb</strong>文件</p>

<hr />

<h3>actionpack/lib/action_dispatch.rb</h3>

<p>Action Dispatch是rails框架的一个路由组件，提供routing,session和middlewares</p>

<p>也就是，你启动了服务前才帮你加载程序的应用文件application.rb。</p>

<hr />

<h4>总结：(自己所画的rails初始化过程图片)</h4>

<p><img src="http://TsaiKoga.github.com/images/posts/2013-10-23/rails_initialize.png" title="rails初始化过程" alt="图片无法显示" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ubuntu常用命令]]></title>
    <link href="http://TsaiKoga.github.com/blog/2013/10/23/ubuntuchang-yong-ming-ling/"/>
    <updated>2013-10-23T16:20:00+08:00</updated>
    <id>http://TsaiKoga.github.com/blog/2013/10/23/ubuntuchang-yong-ming-ling</id>
    <content type="html"><![CDATA[<p><img src="http://TsaiKoga.github.com/images/posts/2013-10-23/ubuntu.jpg" title="ubuntu" alt="无法显示图片" /></p>

<h3>先介绍关于文件和目录的命令：</h3>

<blockquote><p>ls 列出当前目录文件（不包括隐含文件）</p>

<p>ls -a 列出当前目录文件（包括隐含文件）</p>

<p>ls -l 列出当前目录下文件的详细信息</p>

<p>cd .. 回当前目录的上一级目录</p>

<p>cd &ndash; 回上一次所在的目录</p>

<p>cd ~ 或 cd 回当前用户的宿主目录</p>

<p>mkdir 目录名 创建一个目录</p>

<p>rmdir 空目录名 删除一个空目录</p>

<p>rm 文件名 文件名 删除一个文件或多个文件</p>

<p>rm -rf 非空目录名 删除一个非空目录下的一切</p>

<p>mv 路经/文件 /经/文件移动相对路经下的文件到绝对路经下</p>

<p>mv 文件名 新名称 在当前目录下改名</p></blockquote>

<h3>再介绍用户的命令:</h3>

<blockquote><p>useradd 创建一个新的用户</p>

<p>  groupadd 组名 创建一个新的组</p>

<p>  passwd 用户名 为用户创建密码</p>

<p>  passwd -d用户名 删除用户密码也能登陆</p>

<p>  passwd -S用户名 查询账号密码</p>

<p>  usermod -l 新用户名 老用户名 为用户改名</p>

<p>  userdel–r 用户名 删除用户一切</p></blockquote>

<h3>查看系统信息的命令：</h3>

<blockquote><p>uname -a 查看内核版本</p>

<p>cat /etc/issue 查看ubuntu版本</p>

<p>lsusb 查看usb设备</p>

<p>sudo ethtool eth0 查看网卡状态</p>

<p>cat /proc/cpuinfo 查看cpu信息</p>

<p>lshw 查看当前硬件信息</p>

<p>sudo fdisk -l 查看磁盘信息</p>

<p>df -h 查看硬盘剩余空间</p>

<p>free -m 查看当前的内存使用情况</p>

<p>ps -A 查看当前有哪些进程</p></blockquote>

<h3>关于软件包操作的命令：</h3>

<blockquote><p>apt-cache search package 搜索包</p>

<p>  apt-cache show package 获取包的相关信息，如说明、大小、版本等</p>

<p>  sudo apt-get install package 安装包</p>

<p>  sudo apt-get install package &ndash; &ndash; reinstall 重新安装包</p>

<p>  sudo apt-get -f install 修复安装”-f = –fix-missing”</p>

<p>  sudo apt-get remove package 删除包</p>

<p>  sudo apt-get remove package &ndash; &ndash; purge 删除包，包括删除配置文件等</p>

<p>  sudo apt-get update 更新源</p>

<p>  sudo apt-get upgrade 更新已安装的包</p>

<p>  sudo apt-get dist-upgrade 升级系统</p>

<p>  sudo apt-get dselect-upgrade 使用 dselect 升级</p>

<p>  apt-cache depends package 了解使用依赖</p>

<p>  apt-cache rdepends package 是查看该包被哪些包依赖</p>

<p>  sudo apt-get build-dep package 安装相关的编译环境</p>

<p>  apt-get source package 下载该包的源代码</p>

<p>  sudo apt-get clean &amp;&amp; sudo apt-get autoclean 清理无用的包</p>

<p>  sudo apt-get check 检查是否有损坏的依赖</p>

<p>  清理所有软件缓存（即缓存在/var/cache/apt/archives目录里的deb包）</p>

<p>  sudo apt-get clean</p></blockquote>

<h3>最后讲几个比较重要，在实际操作中提供方便的命令：</h3>

<h4>find命令</h4>

<p>  find是最常见和最强大的查找命令，你可以用它找到任何你想找的文件。</p>

<p><strong>使用格式如下：</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'> <span class="nv">$ </span>find &lt;指定目录&gt; &lt;指定条件&gt; &lt;指定动作&gt;
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><p>&lt;指定目录>： 所要搜索的目录及其所有子目录。默认为当前目录。</p></li>
<li><p>&lt;指定条件>： 所要搜索的文件的特征。</p></li>
<li><p>&lt;指定动作>： 对搜索结果进行特定的处理。</p></li>
</ul>


<p><strong>举例：</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>find . -name <span class="s1">&#39;my*&#39;</span> -ls     <span class="c"># 搜索当前目录中，所有文件名以my开头的文件，并显示它们的详细信息。</span>
</span><span class='line'><span class="nv">$ </span>find . -type f -mmin -10    <span class="c"># 搜索当前目录中，所有过去10分钟中更新过的普通文件。如果不加-type f参数，则搜索普通文件+特殊文件+目录。</span>
</span></code></pre></td></tr></table></div></figure>


<hr />

<h4>locate命令</h4>

<p>locate命令其实是&#8221;find -name&#8221;的另一种写法，但是要比后者快得多，原因在于它不搜索具体目录，而是搜索一个数据库（/var/lib/locatedb），这个数据库中含有本地所有文件信息。Linux系统自动创建这个数据库，并且每天自动更新一次，所以使用locate命令查不到最新变动过的文件。为了避免这种情况，可以在使用locate之前，先使用updatedb命令，手动更新数据库。</p>

<hr />

<h4>grep命令</h4>

<p>grep命令用于查找文件中的字符串。</p>

<p><strong>命令格式如下：</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>grep <span class="o">[</span>选项<span class="o">]</span> 查找模式 <span class="o">[</span>文件名1, 文件名2, ...<span class="o">]</span>
</span><span class='line'>
</span><span class='line'>grep <span class="o">[</span>选项<span class="o">]</span> <span class="o">[</span>-e 查找模式|-f 文件<span class="o">][</span>文件名1, 文件名2, ...<span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<blockquote><p>当然：最好用的参数</p>

<p>  -E 将查找模式解释成正则表达式</p>

<p>  -F 将查找模式解释成单纯的字符串</p>

<p>  -i &mdash;ignore-case 匹配比较时不区分字母的大小</p>

<p>  -R 以递归方式查询目录下所有子目录中的文件</p></blockquote>

<hr />

<h4>ack-grep命令</h4>

<p>grep命令加强。首先，我们先了解什么是ack？</p>

<blockquote><p>  <a href="http://betterthangrep.com">http://betterthangrep.com</a></p>

<p>  ack is a tool <strong>like grep</strong>, optimized for programmers</p>

<p>  is written purely in Perl 5,takes advantage of the power of Perl&rsquo;s regular expressions.</p></blockquote>

<p>ack诞生的目的就是要取代grep。</p>

<p>注意：ubuntu下要安装<strong>ack-grep</strong>，因为在debian系中，ack这个名字被其他的软件占用了。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo apt-get install ack-grep
</span></code></pre></td></tr></table></div></figure>


<hr />

<h4>netstat命令</h4>

<p> Netstat是在内核中访问网络及相关信息的程序，它能提供TCP连接，TCP和UDP监听，进程内存管理的相关报告。</p>

<p><strong>命令格式如下：</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>netstat -tulpn         <span class="c"># 显示服务器进程</span>
</span><span class='line'>sudo netstat -antup   <span class="c"># 查看进程</span>
</span><span class='line'>ack-grep <span class="k">function</span>     <span class="c"># 查找函数位置（必须在文件目录下）</span>
</span></code></pre></td></tr></table></div></figure>


<hr />

<h4>crontab命令</h4>

<p>这个命令我非常喜欢，他是<strong>设置定时执行脚本或任务</strong>,可以用它来定时做一些事情。如定时周期性的备份网站数据库，并email发送到指定邮箱。</p>

<p>参数就几个很简单：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>crontab -l <span class="c"># 显示现有任务条目 </span>
</span><span class='line'>crontab -r <span class="c"># 删除当前的任务 </span>
</span><span class='line'>crontab -e <span class="c"># 编辑任务单，一般使用 nano 编辑，如DH。</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>时间参数：</strong></p>

<blockquote><p>15 * * * * : 每小时第15分执行1次</p>

<p>15,18 * * * * : 每小时第15和18分各执行1次</p>

<p>*/15 */2 * * *: 每隔15分钟执行1次</p>

<p>15 20 * * 6: 每周星期6的20：15执行1次</p></blockquote>

<hr />
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails表的关联]]></title>
    <link href="http://TsaiKoga.github.com/blog/2013/10/22/railsbiao-de-guan-lian/"/>
    <updated>2013-10-22T21:47:00+08:00</updated>
    <id>http://TsaiKoga.github.com/blog/2013/10/22/railsbiao-de-guan-lian</id>
    <content type="html"><![CDATA[<p>一段时间没有用到表的关联，回想如何使用时，知识却模糊不清，所以将它记下以便以后查看。
Rails中表的关联主要有三种：单表继承,多态关联,自引用。</p>

<p>个人觉得：</p>

<ul>
<li><p><strong>单表继承</strong>是通过增加<strong>冗余字段</strong>来<strong>减少表的数量</strong>。</p></li>
<li><p><strong>多态关联</strong>是通过建立<strong>虚拟表</strong>来<strong>减少关联数</strong>（belongs_to）和<strong>字段</strong>（外键），方便于以后又有表要关联。</p></li>
<li><p><strong>自引用</strong>也是利用<strong>冗余</strong>而共用<strong>一张表</strong>。</p></li>
</ul>


<p>共同特点：</p>

<blockquote><p>都需要增加type字段，即增加冗余字段。</p></blockquote>

<p>差别：</p>

<blockquote><p>多态可以让子类有自己的行为特征（通过type字段呈现&#8221;多重形态&#8221;）。
单表继承必须拥有共同属性。
自引用必须牺牲一些字段（不需用到的字段的值为null）。</p></blockquote>

<hr />

<h3>详述</h3>

<h4>单表继承：</h4>

<p>一个继承体系<strong>所有类映射到同一张数据库表</strong>，这张表包含<strong>所有类拥有的属性</strong>。记住：所有属性哦，他们可以为null值（:null=>true，即null是可有可无的）。
它通过一个<strong>附加字段type来确认当前记录的对象</strong>属于什么<strong>类型</strong>&mdash;&mdash;ActiveRecord约定。</p>

<p>顾名思义，单表就是一张表，那么怎么呈现多种表的形态呢。当其他表引用它时，可以给予其他名字，但是要声明它实际是那张表(belongs_to :manager, :class_name => &ldquo;Person&rdquo;)，举例：</p>

<p>person.rb:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Class</span> <span class="no">Person</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class='line'>      <span class="n">belongs_to</span> <span class="no">XXX</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">manager</span><span class="o">.</span><span class="n">rb</span><span class="p">:(</span><span class="err">继承</span><span class="no">Person</span><span class="err">类</span><span class="p">)</span>
</span><span class='line'>  <span class="no">Class</span> <span class="no">Manager</span> <span class="o">&lt;</span> <span class="no">Person</span>
</span><span class='line'>  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>rails console:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">XXX</span><span class="o">.</span><span class="n">first</span><span class="o">.</span><span class="n">manager</span>
</span></code></pre></td></tr></table></div></figure>


<p>mysql:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">select</span> <span class="n">people</span><span class="o">.</span><span class="n">*</span> <span class="n">from</span> <span class="n">people</span> <span class="n">where</span> <span class="n">people</span><span class="o">.</span><span class="n">type</span> <span class="k">in</span> <span class="p">(</span><span class="s2">&quot;Manager&quot;</span><span class="p">)</span> <span class="ow">and</span> <span class="n">people</span><span class="o">.</span><span class="n">id</span><span class="o">=</span><span class="mi">1</span>
</span></code></pre></td></tr></table></div></figure>


<hr />

<h4>多态关联：</h4>

<p>通过建立虚拟表，通过虚拟表（先通过<strong>类型找到关联表</strong>，再通过<strong>外键找到对应的记录</strong>）访问。</p>

<p><strong>举例：</strong></p>

<p>假设我們已经有了Article与Photo这两个Model，然后我们希望这两个Model都可以被留言。不用多态关联的话，你得分別建立ArticleComment和PhotoComment的model。或者一个comment中要有两个外键：article_id和photo_id，虽然用多态也是两个字段，但当表多了就可以看出多态的好处。</p>

<p>现有个场景，有两个model：person和album，需要添加一个图片来做为其头像/封面。添加一个image model，按照以往需要对这几个model做以下关联设置：</p>

<p>没用多态关联前：不复杂，但是麻烦，如果<strong>以后加个book model之类</strong>的，也需要有个图做封面的，那又要<strong>改image model里的关联和migration</strong>了，一点都不DRY。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Person</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class='line'>  <span class="n">has_one</span> <span class="ss">:image</span><span class="p">,</span> <span class="ss">:dependent</span> <span class="o">=&gt;</span> <span class="ss">:destroy</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Album</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class='line'>     <span class="n">has_one</span> <span class="ss">:image</span><span class="p">,</span> <span class="ss">:dependent</span> <span class="o">=&gt;</span> <span class="ss">:destroy</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Image</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class='line'>    <span class="n">belongs_to</span> <span class="ss">:person</span>
</span><span class='line'>    <span class="n">belongs_to</span> <span class="ss">:album</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>相应的image的migration要添加上关联字段：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">t</span><span class="o">.</span><span class="n">column</span> <span class="ss">:person_id</span><span class="p">,</span> <span class="ss">:integer</span><span class="p">,</span> <span class="ss">:null</span> <span class="o">=&gt;</span> <span class="kp">false</span><span class="p">,</span> <span class="ss">:default</span> <span class="o">=&gt;</span> <span class="mi">0</span>
</span><span class='line'><span class="n">t</span><span class="o">.</span><span class="n">column</span> <span class="ss">:album_id</span><span class="p">,</span> <span class="ss">:integer</span><span class="p">,</span> <span class="ss">:null</span> <span class="o">=&gt;</span> <span class="kp">false</span><span class="p">,</span> <span class="ss">:default</span> <span class="o">=&gt;</span> <span class="mi">0</span>
</span></code></pre></td></tr></table></div></figure>


<p>使用多态关联后：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Person</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class='line'>    <span class="n">has_one</span> <span class="ss">:image</span><span class="p">,</span> <span class="ss">:as</span> <span class="o">=&gt;</span> <span class="ss">:iconable</span><span class="p">,</span> <span class="ss">:dependent</span> <span class="o">=&gt;</span> <span class="ss">:destroy</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="k">class</span> <span class="nc">Album</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class='line'>    <span class="n">has_one</span> <span class="ss">:image</span><span class="p">,</span> <span class="ss">:as</span> <span class="o">=&gt;</span> <span class="ss">:iconable</span><span class="p">,</span> <span class="ss">:dependent</span> <span class="o">=&gt;</span> <span class="ss">:destroy</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="k">class</span> <span class="nc">Image</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class='line'>    <span class="n">belongs_to</span> <span class="ss">:iconable</span><span class="p">,</span> <span class="ss">:polymorphic</span> <span class="o">=&gt;</span> <span class="kp">true</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Person和Album有了<strong>共同的一个虚拟的名字</strong>叫做iconable,image表就可以直接用外键iconable_id关联它,</p>

<p><strong>使用方法：</strong></p>

<p>添加：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'> <span class="vi">@person</span> <span class="o">=</span> <span class="no">Person</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">params</span><span class="o">[</span><span class="ss">:person</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>  <span class="vi">@person</span><span class="o">.</span><span class="n">build_image</span><span class="p">(</span><span class="n">params</span><span class="o">[</span><span class="ss">:image</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>  <span class="vi">@person</span><span class="o">.</span><span class="n">save</span>
</span></code></pre></td></tr></table></div></figure>


<p>读取：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="vi">@person</span><span class="o">.</span><span class="n">image</span>
</span></code></pre></td></tr></table></div></figure>


<p>image 的属主：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="vi">@person</span><span class="o">.</span><span class="n">iconable</span>
</span></code></pre></td></tr></table></div></figure>


<hr />

<h4>自引用：</h4>

<p>自引用就是<strong>一条记录可能引用同一张表的另一条记录</strong>：公司员工都有主管，主管也是员工。使用:class_name 和foregin_key加上has_many/has_one和belongs_to.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Employee</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class='line'>  <span class="n">belongs_to</span> <span class="ss">:manager</span><span class="p">,</span>
</span><span class='line'>    <span class="ss">:class_name</span> <span class="o">=&gt;</span> <span class="s2">&quot;Employee&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="ss">:foregin_key</span> <span class="o">=&gt;</span> <span class="s2">&quot;manager_id&quot;</span>
</span><span class='line'>  <span class="n">belongs_to</span> <span class="ss">:mentor</span><span class="p">,</span>
</span><span class='line'>      <span class="ss">:class_name</span> <span class="o">=&gt;</span> <span class="s2">&quot;Employee&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="ss">:foregin_key</span> <span class="o">=&gt;</span> <span class="s2">&quot;mentor_id&quot;</span>
</span><span class='line'>  <span class="n">has_many</span> <span class="err">：</span><span class="n">mentored_employees</span><span class="p">,</span>
</span><span class='line'>    <span class="ss">:class_name</span> <span class="o">=&gt;</span> <span class="s2">&quot;Employee&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="ss">:foreign_key</span> <span class="o">=&gt;</span> <span class="s2">&quot;mentor_id&quot;</span>
</span><span class='line'>  <span class="n">has_many</span> <span class="err">：</span><span class="n">managed_employees</span><span class="p">,</span>
</span><span class='line'>    <span class="ss">:class_name</span> <span class="o">=&gt;</span> <span class="s2">&quot;Employee&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="ss">:foreign_key</span> <span class="o">=&gt;</span> <span class="s2">&quot;manager_id&quot;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Vim配置]]></title>
    <link href="http://TsaiKoga.github.com/blog/2013/10/22/vimpei-zhi/"/>
    <updated>2013-10-22T14:24:00+08:00</updated>
    <id>http://TsaiKoga.github.com/blog/2013/10/22/vimpei-zhi</id>
    <content type="html"><![CDATA[<p>说到vim，大家应该都不陌生。它是类似于vi的编辑器，在vi的基础上增加了很多新特性。</p>

<p><img src="http://TsaiKoga.github.com/images/posts/2013-10-22/vim.jpg" title="Vim图" alt="图片无法显示" /></p>

<h4>.vimrc配置文件</h4>

<p>以下内容复制到用户目录下的.vimrc文件，可以更改vim配置，使Vim更美观，更好用:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nb">set </span>nocompatible            <span class="s2">&quot; 关闭 vi 兼容模式</span>
</span><span class='line'><span class="s2"> syntax on                   &quot;</span> 自动语法高亮
</span><span class='line'>  colorscheme molokai         <span class="s2">&quot; 设定配色方案</span>
</span><span class='line'><span class="s2"> set number                  &quot;</span> 显示行号
</span><span class='line'>  <span class="nb">set </span>cursorline              <span class="s2">&quot; 突出显示当前行</span>
</span><span class='line'><span class="s2"> set ruler                   &quot;</span> 打开状态栏标尺
</span><span class='line'>  <span class="nb">set </span><span class="nv">shiftwidth</span><span class="o">=</span>4            <span class="s2">&quot; 设定 &lt;&lt; 和 &gt;&gt; 命令移动时的宽度为 4</span>
</span><span class='line'><span class="s2"> set softtabstop=4           &quot;</span> 使得按退格键时可以一次删掉 4 个空格
</span><span class='line'>  <span class="nb">set </span><span class="nv">tabstop</span><span class="o">=</span>4               <span class="s2">&quot; 设定 tab 长度为 4</span>
</span><span class='line'><span class="s2"> set nobackup                &quot;</span> 覆盖文件时不备份
</span><span class='line'>  <span class="nb">set </span>autochdir               <span class="s2">&quot; 自动切换当前目录为当前文件所在的目录</span>
</span><span class='line'><span class="s2"> filetype plugin indent on   &quot;</span> 开启插件
</span><span class='line'>  <span class="nb">set </span><span class="nv">backupcopy</span><span class="o">=</span>yes          <span class="s2">&quot; 设置备份时的行为为覆盖</span>
</span><span class='line'><span class="s2"> set ignorecase smartcase    &quot;</span> 搜索时忽略大小写，但在有一个或以上大写字母时仍保持对大小写敏感
</span><span class='line'>  <span class="nb">set </span>nowrapscan              <span class="s2">&quot; 禁止在搜索到文件两端时重新搜索</span>
</span><span class='line'><span class="s2"> set incsearch               &quot;</span> 输入搜索内容时就显示搜索结果
</span><span class='line'>  <span class="nb">set </span>hlsearch                <span class="s2">&quot; 搜索时高亮显示被找到的文本</span>
</span><span class='line'><span class="s2"> set noerrorbells            &quot;</span> 关闭错误信息响铃
</span><span class='line'>  <span class="nb">set </span>novisualbell            <span class="s2">&quot; 关闭使用可视响铃代替呼叫</span>
</span><span class='line'><span class="s2"> set t_vb=                   &quot;</span> 置空错误铃声的终端代码
</span><span class='line'>  <span class="s2">&quot; set showmatch               &quot;</span> 插入括号时，短暂地跳转到匹配的对应括号
</span><span class='line'>  <span class="s2">&quot; set matchtime=2             &quot;</span> 短暂跳转到匹配括号的时间
</span><span class='line'>  <span class="nb">set </span>magic                   <span class="s2">&quot; 设置魔术</span>
</span><span class='line'><span class="s2"> set hidden                  &quot;</span> 允许在有未保存的修改时切换缓冲区，此时的修改由 vim 负责保存
</span><span class='line'>  <span class="nb">set </span>guioptions-<span class="o">=</span>T           <span class="s2">&quot; 隐藏工具栏  （等号前后不能空格）</span>
</span><span class='line'><span class="s2"> set guioptions-=m           &quot;</span> 隐藏菜单栏
</span><span class='line'>  <span class="nb">set </span>smartindent             <span class="s2">&quot; 开启新行时使用智能自动缩进</span>
</span><span class='line'><span class="s2"> set backspace=indent,eol,start</span>
</span><span class='line'><span class="s2">                                                         &quot;</span> 不设定在插入状态无法用退格键和 Delete 键删除回车符
</span><span class='line'>  <span class="nb">set </span><span class="nv">cmdheight</span><span class="o">=</span>1             <span class="s2">&quot; 设定命令行的行数为 1</span>
</span><span class='line'><span class="s2"> set laststatus=2            &quot;</span> 显示状态栏 <span class="o">(</span>默认值为 1, 无法显示状态栏<span class="o">)</span>
</span><span class='line'>  <span class="nb">set </span><span class="nv">statusline</span><span class="o">=</span><span class="se">\ </span>%&lt;%F<span class="o">[</span>%1*%M%*%n%R%H<span class="o">]</span>%<span class="o">=</span><span class="se">\ </span>%y<span class="se">\ </span>%0<span class="o">(</span>%<span class="o">{</span>&amp;fileformat<span class="o">}</span><span class="se">\ </span>%<span class="o">{</span>&amp;encoding<span class="o">}</span><span class="se">\ </span>%c:%l/%L%<span class="o">)</span><span class="se">\ </span>
</span><span class='line'>                                                          <span class="s2">&quot; 设置在状态行显示的信息</span>
</span><span class='line'><span class="s2"> set foldenable              &quot;</span> 开始折叠
</span><span class='line'>  <span class="nb">set </span><span class="nv">foldmethod</span><span class="o">=</span>syntax       <span class="s2">&quot; 设置语法折叠</span>
</span><span class='line'>
</span><span class='line'><span class="s2"> &quot;</span>窗口分割时,进行切换的按键热键需要连接两次,比如从下方窗口移动
</span><span class='line'>  <span class="s2">&quot;光标到上方窗口,需要&lt;c-w&gt;&lt;c-w&gt;k,非常麻烦,现在重映射为&lt;c-k&gt;,切换的</span>
</span><span class='line'><span class="s2"> &quot;</span>时候会变得非常方便.
</span><span class='line'>  nnoremap &lt;C-h&gt; &lt;C-w&gt;h
</span><span class='line'>  nnoremap &lt;C-j&gt; &lt;C-w&gt;j
</span><span class='line'>  nnoremap &lt;C-k&gt; &lt;C-w&gt;k
</span><span class='line'>  nnoremap &lt;C-l&gt; &lt;C-w&gt;l
</span><span class='line'>
</span><span class='line'>接下来是括号补全：
</span><span class='line'>
</span><span class='line'>  inoremap <span class="o">(</span>   <span class="o">()</span>&lt;Esc&gt;i               <span class="s2">&quot; inoremap表示输入模式下的匹配,当有&quot;</span><span class="o">(</span><span class="s2">&quot;时，匹配&quot;</span><span class="o">)</span><span class="s2">&quot;并退出重新进入&quot;</span>i编辑模式<span class="s2">&quot;</span>
</span><span class='line'><span class="s2"> inoremap [  []&lt;Esc&gt;i</span>
</span><span class='line'><span class="s2"> inoremap {  {}&lt;Esc&gt;i</span>
</span><span class='line'><span class="s2"> autocmd Syntax html,vim inoremap &lt; &lt;lt&gt;&gt;&lt;Esc&gt;i | inoremap &gt; &lt;c-r&gt;=ClosePair(&#39;&gt;&#39;)&lt;CR&gt;</span>
</span><span class='line'><span class="s2"> inoremap ) &lt;c-r&gt;=ClosePair(&#39;)&#39;)&lt;CR&gt;</span>
</span><span class='line'><span class="s2"> inoremap ] &lt;c-r&gt;=ClosePair(&#39;]&#39;)&lt;CR&gt;</span>
</span><span class='line'><span class="s2"> inoremap } &lt;c-r&gt;=CloseBracket()&lt;CR&gt;</span>
</span><span class='line'><span class="s2"> inoremap &quot;</span> &lt;c-r&gt;<span class="o">=</span>QuoteDelim<span class="o">(</span><span class="s1">&#39;&quot;&#39;</span><span class="o">)</span>&lt;CR&gt;
</span><span class='line'>  inoremap <span class="s1">&#39; &lt;c-r&gt;=QuoteDelim(&quot;&#39;</span><span class="s2">&quot;)&lt;CR&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s2"> function ClosePair(char)</span>
</span><span class='line'><span class="s2">     if getline(&#39;.&#39;)[col(&#39;.&#39;) - 1] == a:char</span>
</span><span class='line'><span class="s2">         return &quot;</span><span class="se">\&lt;</span>Right&gt;<span class="s2">&quot;</span>
</span><span class='line'><span class="s2">     else</span>
</span><span class='line'><span class="s2">         return a:char</span>
</span><span class='line'><span class="s2">     endif</span>
</span><span class='line'><span class="s2"> endf</span>
</span><span class='line'>
</span><span class='line'><span class="s2"> function CloseBracket()</span>
</span><span class='line'><span class="s2">     if match(getline(&#39;.&#39; + 1), &#39;\s*}&#39;) &lt; 0</span>
</span><span class='line'><span class="s2">         return &quot;</span><span class="se">\&lt;</span>CR&gt;<span class="o">}</span><span class="s2">&quot;</span>
</span><span class='line'><span class="s2">     else</span>
</span><span class='line'><span class="s2">         return &quot;</span><span class="se">\&lt;</span>Esc&gt;j0f<span class="o">}</span>a<span class="s2">&quot;</span>
</span><span class='line'><span class="s2">     endif</span>
</span><span class='line'><span class="s2"> endf</span>
</span><span class='line'>
</span><span class='line'><span class="s2"> function QuoteDelim(char)</span>
</span><span class='line'><span class="s2">     let line = getline(&#39;.&#39;)</span>
</span><span class='line'><span class="s2">     let col = col(&#39;.&#39;)</span>
</span><span class='line'><span class="s2">     if line[col-2] == &quot;</span><span class="se">\\</span><span class="s2">&quot;</span>
</span><span class='line'><span class="s2">         &quot;</span>Inserting a quoted quotation mark into string
</span><span class='line'>          <span class="k">return </span>a:char
</span><span class='line'>      elseif line<span class="o">[</span>col-1<span class="o">]</span> <span class="o">==</span> a:char
</span><span class='line'>          <span class="s2">&quot;Escaping out of the string</span>
</span><span class='line'><span class="s2">         return &quot;</span><span class="se">\&lt;</span>Right&gt;<span class="s2">&quot;</span>
</span><span class='line'><span class="s2">     else</span>
</span><span class='line'><span class="s2">         &quot;</span>Starting a String
</span><span class='line'>          <span class="k">return </span>a:char.a:char.<span class="s2">&quot;\&lt;Esc&gt;i&quot;</span>
</span><span class='line'>      endif
</span><span class='line'>  endf
</span><span class='line'>  
</span><span class='line'>下列两款vim插件非常好用，安装完，也必须在.vimrc中添加如下内容：
</span><span class='line'>
</span><span class='line'>  <span class="s2">&quot;-----------------------------------------------------------------</span>
</span><span class='line'><span class="s2"> &quot;</span> plugin - NERD_tree.vim 以树状方式浏览系统中的文件和目录
</span><span class='line'>  <span class="s2">&quot; :ERDtree 打开NERD_tree         :NERDtreeClose    关闭NERD_tree</span>
</span><span class='line'><span class="s2"> &quot;</span> o 打开关闭文件或者目录         t 在标签页中打开
</span><span class='line'>  <span class="s2">&quot; T 在后台标签页中打开           ! 执行此文件</span>
</span><span class='line'><span class="s2"> &quot;</span> p 到上层目录                   P 到根目录
</span><span class='line'>  <span class="s2">&quot; K 到第一个节点                 J 到最后一个节点</span>
</span><span class='line'><span class="s2"> &quot;</span> u 打开上层目录                 m 显示文件系统菜单（添加、删除、移动操作）
</span><span class='line'>  <span class="s2">&quot; r 递归刷新当前目录             R 递归刷新当前根目录</span>
</span><span class='line'><span class="s2"> &quot;</span>-----------------------------------------------------------------
</span><span class='line'>  <span class="s2">&quot; F3 NERDTree 切换</span>
</span><span class='line'><span class="s2"> map &lt;F3&gt; :NERDTreeToggle&lt;CR&gt;</span>
</span><span class='line'><span class="s2"> imap &lt;F3&gt; &lt;ESC&gt;:NERDTreeToggle&lt;CR&gt;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="s2"> &quot;</span>-----------------------------------------------------------------
</span><span class='line'>  <span class="s2">&quot; plugin - NERD_commenter.vim   注释代码用的，</span>
</span><span class='line'><span class="s2"> &quot;</span> <span class="o">[</span>count<span class="o">]</span>,cc 光标以下count行逐行添加注释<span class="o">(</span>7,cc<span class="o">)</span>
</span><span class='line'>  <span class="s2">&quot; [count],cu 光标以下count行逐行取消注释(7,cu)</span>
</span><span class='line'><span class="s2"> &quot;</span> <span class="o">[</span>count<span class="o">]</span>,cm 光标以下count行尝试添加块注释<span class="o">(</span>7,cm<span class="o">)</span>
</span><span class='line'>  <span class="s2">&quot; ,cA 在行尾插入 /* */,并且进入插入模式。 这个命令方便写注释。</span>
</span><span class='line'><span class="s2"> &quot;</span> 注：count参数可选，无则默认为选中行或当前行
</span><span class='line'>  <span class="s2">&quot;-----------------------------------------------------------------</span>
</span><span class='line'><span class="s2"> let NERDSpaceDelims=1       &quot;</span> 让注释符与语句之间留一个空格
</span><span class='line'>  <span class="nb">let </span><span class="nv">NERDCompactSexyComs</span><span class="o">=</span>1   <span class="err">&quot;</span> 多行注释时样子更好看
</span></code></pre></td></tr></table></div></figure>


<p><em>感谢使用vim配置，记住要将vim编辑器重启后才生效。</em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Linux的文件系统]]></title>
    <link href="http://TsaiKoga.github.com/blog/2013/10/22/linuxde-wen-jian-he-mu-lu/"/>
    <updated>2013-10-22T09:49:00+08:00</updated>
    <id>http://TsaiKoga.github.com/blog/2013/10/22/linuxde-wen-jian-he-mu-lu</id>
    <content type="html"><![CDATA[<hr />

<h3>文件系统：</h3>

<p>我们都知道Linux的文件系统层次结构是一棵树，以&#8221;/&ldquo;表示的为最上层的目录。</p>

<p><strong>example:</strong></p>

<p>Ubuntu文件系统示意图：</p>

<p><img src="http://TsaiKoga.github.com/images/posts/2013-10-22/ubuntu_file_system.png" title="Ubuntu文件系统" alt="无法显示图片" /></p>

<hr />

<h4>定义:</h4>

<blockquote><p><strong>文件:</strong> 是文件系统中存储数据的一个命名<strong>对象</strong>。即使是一个<strong>空文件</strong>，它也包含<strong>用户数据</strong>，仍然为操作系统提供其他信息。</p>

<p><strong>目录:</strong> 其中包含许多文件项目的一类<strong>特殊文件</strong>。支持文件系统的层次结构。系统中每个文件都登记在一个目录中。</p>

<p><strong>子目录：</strong> 被包含在另一个目录中的目录。除了root目录以外，所有的目录都是子目录，并且有他们的父目录。<strong>root目录就作为自己的父目录</strong>。</p>

<p><strong>文件名：</strong> 用来标志文件的字符串，保存在一个<strong>目录文件项</strong>中。</p></blockquote>

<hr />

<h4>文件结构：</h4>

<p>文件的成分：无论文件是一个程序，一个文档，一个数据库，还是一个目录，操作系统都会赋予它如下所示的同样的结构：</p>

<ul>
<li><p><strong>文件索引</strong>：又称<strong>I节点</strong>，是文件系统结构中包含<strong>相应文件信息</strong>的<strong>一个记录</strong>。这些信息包括文件权限、文件主、文件大小等。</p></li>
<li><p><strong>数据</strong>： 文件的实际内容，可以是空，可以非常大，并且有自己的结构。</p>

<p>文件名规范：</p>

<blockquote><p>（1）除了写先<strong>（“/”）和空字符（ASCII字符“\0”）</strong>以外，文件名可以包含任意的ASCII字符，因为这两个字符被核心<strong>当作标识路径名的特殊字符</strong>来解释。</p>

<p>（2）Linux<strong>区分大小写</strong>。</p>

<p>（3）以<strong>圆点（.）开头</strong>的文件为<strong>隐含文件</strong>。</p></blockquote></li>
</ul>


<hr />

<h4>文件类型：</h4>

<ul>
<li><strong>普通文件：</strong></li>
</ul>


<p>普通文件也称规范文件，包含<strong>各种长度的字符串</strong>。核心对这些<strong>数据没有进行结构化</strong>，只是作为<strong>有序的字符序列</strong>把它提交给应用程序。应用程序<strong>自己组织和解释</strong>这些数据。</p>

<blockquote><p>(1)<strong>文本文件</strong>：有ASCII字符构成。</p>

<p>(2)<strong>数据文件</strong>：来自<strong>应用程序</strong>的<strong>数字型和文本型数据</strong>组成，例如：电子表格，数据库及字处理文档。</p>

<p>(3)<strong>可执行的二进制文件</strong>：有机器指令和数据构成。</p></blockquote>

<p><em>命令：指定文件的类型（可将多个文件作为参数）</em></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>file 文件名 <span class="o">[</span>文件名...<span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><strong>目录文件：</strong></li>
</ul>


<p>目录文件也<strong>包含数据</strong>，但与普通文件的差别是：核心对这些数据进行<strong>结构处理</strong>，即它是<strong>有成对的“I节点号/文件名”</strong>构成的<strong>列表</strong>。</p>

<blockquote><ul>
<li><p>I节点号是检索I节点表的下标，<strong>I节点中存放有文件的状态信息</strong>。</p></li>
<li><p>每个目录的<strong>第一项都表示目录本身</strong>，用“点（.）”作文它的文件名，每个目录的<strong>第二项的名字用“点点（..）”表示</strong>。这就是当你输入ls显示第一二项是.和..的原因。</p></li>
<li><p>当文件<strong>添加</strong>到一个目录时，改目录的<strong>尺寸会加大，以便容纳新文件名</strong>。当<strong>删除文件</strong>时，目录的尺寸<strong>并不会减小</strong>，而是核心对<strong>该目录项上做特殊标识</strong>，一边下次添加一个文件时<strong>重新使用</strong>它。ls不会列出这些未被使用的项。</p></li>
</ul>
</blockquote>

<ul>
<li><strong>设备文件</strong></li>
</ul>


<p>是一种特别文件，除了在其文件I节点中存放属性信息外，不包含任何数据。系统利用他们来标记各个设备驱动器，核心使用它们与硬件设备通信。</p>

<blockquote><ul>
<li><p>字符设备：最常用的设备文件，允许I/O传送任意大小的数据，取决于设备本身的容量。使用这种接口的设备：终端，打印机及鼠标。</p></li>
<li><p>块设备：利用核心缓冲区的自动缓存机制。缓存区进行I/O传送总是已KB为单位。使用这种接口的设备包括硬盘，软盘和RAM盘。</p></li>
</ul>
</blockquote>

<p>tty可显示设备文件：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>tty   <span class="c">#=&gt; /dev/pts/1</span>
</span></code></pre></td></tr></table></div></figure>


<p><em>注意： 设备文件存放在&#8221;/dev/&ldquo;目录下</em></p>

<ul>
<li><strong>符号链接文件：</strong> 存放的<strong>数据</strong>是文件系统<strong>通向文件的路径</strong>。当使用符号链接文件时，核心<strong>自动访问所保存这个路径</strong>。</li>
</ul>


<hr />

<p>讲到这里，我不得不说一下硬链接和软链接。</p>

<h3>什么是链接：</h3>

<p>Linux具有<strong>一个文件起多个名字</strong>的功能，叫做链接。它有两种情况：</p>

<blockquote><ul>
<li><p>被链接的文件存放在<strong>相同的目录</strong>下，但是必须有<strong>不同的文件名</strong>，不用在硬盘上为同样的数据重复备份。</p></li>
<li><p>被链接的文件拥有<strong>相同的文件名</strong>，但是存放在<strong>不同的目录</strong>下。只要在<em>一个目录下的文件做修改，就可以完成对所有目录下同名链接文件的修改</em>。</p></li>
</ul>
</blockquote>

<p>链接形式就这两种：</p>

<h4>硬链接：</h4>

<p>在<strong>别的目录</strong>或<strong>本目录</strong>增加<strong>目标文件</strong>的一个<strong>目录项</strong>(让某目录同样可以访问目标文件)，这样一个文件就<strong>登记</strong>在多个目录中。
创建硬链接后，已经存在的文件节点(Inode)会被多个目录文件项使用。</p>

<p>一个文件的硬链接数可以在目录的长列表格式的第二列中看到，无额外链接的文件的连接数为1。
在默认情况下，<strong>ln命令创建硬链接</strong>。ln会<strong>增加链接数</strong>，<strong>rm命令会减少链接数</strong>。一个文件除非链接数为0，否则不会从文件系统中物理地删除。</p>

<p>限制：</p>

<blockquote><p>不能对目录文件创建硬链接。</p>

<p>不能在不同的文件系统之间做硬链接。链接文件与被链接文件必须位于同一个文件系统。</p></blockquote>

<h4>软链接：（符号链接）</h4>

<p>将一个路径名链接到一个文件。这些文件是一种特殊类型的文件。事实上，它只是一个文本文件，其中包含它提供链接的另一个文件的路径名。
当使用读写文件内容的命令被用于符号链接时，将沿着链接方向前进来访问实际的文件。</p>

<h4>两种链接的区别：</h4>

<ol>
<li><p><strong>符号链接</strong>是一个<strong>新文件</strong>，它具有<strong>不同的I节点</strong>；硬链接并没有建立新文件，只是建立目录项。</p></li>
<li><p>符号链接可以对<strong>目录建立符号链接</strong>，也可在<strong>不同文件系统中建立符号链接</strong>。</p></li>
<li><p><strong>删除源</strong>文件或目录时，<strong>只删除数据，不会删除符号链接</strong>，一旦以同样文件名创建源文件，链接将继续指向该文件的新数据。</p></li>
<li><p>符号链接的大小是链接文件的<strong>路径名的字节数</strong>。</p></li>
</ol>


<h4>命令：</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>   ln <span class="o">[</span>选项<span class="o">]</span> 源文件 <span class="o">[</span>目标文件<span class="o">]</span>        <span class="c"># -s建立符号链接</span>
</span></code></pre></td></tr></table></div></figure>


<hr />
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用hosts文件上facebook等网站]]></title>
    <link href="http://TsaiKoga.github.com/blog/2013/10/19/shi-yong-hostswen-jian-shang-facebookdeng-wang-zhan/"/>
    <updated>2013-10-19T20:52:00+08:00</updated>
    <id>http://TsaiKoga.github.com/blog/2013/10/19/shi-yong-hostswen-jian-shang-facebookdeng-wang-zhan</id>
    <content type="html"><![CDATA[<h3>原因：</h3>

<p>  hosts文件是<strong>本地域名解析文件</strong>,</p>

<blockquote><ul>
<li>系统在访问互联网时先在本机hosts文件中查找对应的<strong>域名解析</strong>（即把你输入的域名变成对应服务器IP地址），</li>
<li>如果没有再去相应的dns服务器查找，网通，电信的dns服务器可能屏蔽facebook等网站的解析，</li>
<li>在本地添加facebook等的记录就能不用<em>外网dns解析</em>，直接在本地解析。</li>
</ul>
</blockquote>

<h3>操作步骤：</h3>

<p>Ubuntu系统的Hosts只需修改/etc/hosts文件，在目录中还有一个hosts.conf文件，但我们需要修改hosts。修改完之后要重启网络。</p>

<ol>
<li><strong>修改hosts</strong></li>
</ol>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>    sudo vim /etc/hosts
</span></code></pre></td></tr></table></div></figure>


<ol>
<li><strong>添加解析记录（.）</strong></li>
</ol>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>      完整案例：127.0.0.1 localhost.localdomain localhost
</span><span class='line'>      简洁记录：127.0.0.1 localhost
</span></code></pre></td></tr></table></div></figure>


<ol>
<li><strong>保存后重启网络</strong></li>
</ol>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>    sudo /etc/init.d/networking restart
</span></code></pre></td></tr></table></div></figure>


<h3>这里有份hosts文件供参考：</h3>

<blockquote><p>window hosts文件位置: C盘/windows/system32/drivers/ect
Ubuntu hosts文件位置: /etc/hosts
需要管理员权限,把以下内容复制至hosts文件</p></blockquote>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
<span class='line-number'>152</span>
<span class='line-number'>153</span>
<span class='line-number'>154</span>
<span class='line-number'>155</span>
<span class='line-number'>156</span>
<span class='line-number'>157</span>
<span class='line-number'>158</span>
<span class='line-number'>159</span>
<span class='line-number'>160</span>
<span class='line-number'>161</span>
<span class='line-number'>162</span>
<span class='line-number'>163</span>
<span class='line-number'>164</span>
<span class='line-number'>165</span>
<span class='line-number'>166</span>
<span class='line-number'>167</span>
<span class='line-number'>168</span>
<span class='line-number'>169</span>
<span class='line-number'>170</span>
<span class='line-number'>171</span>
<span class='line-number'>172</span>
<span class='line-number'>173</span>
<span class='line-number'>174</span>
<span class='line-number'>175</span>
<span class='line-number'>176</span>
<span class='line-number'>177</span>
<span class='line-number'>178</span>
<span class='line-number'>179</span>
<span class='line-number'>180</span>
<span class='line-number'>181</span>
<span class='line-number'>182</span>
<span class='line-number'>183</span>
<span class='line-number'>184</span>
<span class='line-number'>185</span>
<span class='line-number'>186</span>
<span class='line-number'>187</span>
<span class='line-number'>188</span>
<span class='line-number'>189</span>
<span class='line-number'>190</span>
<span class='line-number'>191</span>
<span class='line-number'>192</span>
<span class='line-number'>193</span>
<span class='line-number'>194</span>
<span class='line-number'>195</span>
<span class='line-number'>196</span>
<span class='line-number'>197</span>
<span class='line-number'>198</span>
<span class='line-number'>199</span>
<span class='line-number'>200</span>
<span class='line-number'>201</span>
<span class='line-number'>202</span>
<span class='line-number'>203</span>
<span class='line-number'>204</span>
<span class='line-number'>205</span>
<span class='line-number'>206</span>
<span class='line-number'>207</span>
<span class='line-number'>208</span>
<span class='line-number'>209</span>
<span class='line-number'>210</span>
<span class='line-number'>211</span>
<span class='line-number'>212</span>
<span class='line-number'>213</span>
<span class='line-number'>214</span>
<span class='line-number'>215</span>
<span class='line-number'>216</span>
<span class='line-number'>217</span>
<span class='line-number'>218</span>
<span class='line-number'>219</span>
<span class='line-number'>220</span>
<span class='line-number'>221</span>
<span class='line-number'>222</span>
<span class='line-number'>223</span>
<span class='line-number'>224</span>
<span class='line-number'>225</span>
<span class='line-number'>226</span>
<span class='line-number'>227</span>
<span class='line-number'>228</span>
<span class='line-number'>229</span>
<span class='line-number'>230</span>
<span class='line-number'>231</span>
<span class='line-number'>232</span>
<span class='line-number'>233</span>
<span class='line-number'>234</span>
<span class='line-number'>235</span>
<span class='line-number'>236</span>
<span class='line-number'>237</span>
<span class='line-number'>238</span>
<span class='line-number'>239</span>
<span class='line-number'>240</span>
<span class='line-number'>241</span>
<span class='line-number'>242</span>
<span class='line-number'>243</span>
<span class='line-number'>244</span>
<span class='line-number'>245</span>
<span class='line-number'>246</span>
<span class='line-number'>247</span>
<span class='line-number'>248</span>
<span class='line-number'>249</span>
<span class='line-number'>250</span>
<span class='line-number'>251</span>
<span class='line-number'>252</span>
<span class='line-number'>253</span>
<span class='line-number'>254</span>
<span class='line-number'>255</span>
<span class='line-number'>256</span>
<span class='line-number'>257</span>
<span class='line-number'>258</span>
<span class='line-number'>259</span>
<span class='line-number'>260</span>
<span class='line-number'>261</span>
<span class='line-number'>262</span>
<span class='line-number'>263</span>
<span class='line-number'>264</span>
<span class='line-number'>265</span>
<span class='line-number'>266</span>
<span class='line-number'>267</span>
<span class='line-number'>268</span>
<span class='line-number'>269</span>
<span class='line-number'>270</span>
<span class='line-number'>271</span>
<span class='line-number'>272</span>
<span class='line-number'>273</span>
<span class='line-number'>274</span>
<span class='line-number'>275</span>
<span class='line-number'>276</span>
<span class='line-number'>277</span>
<span class='line-number'>278</span>
<span class='line-number'>279</span>
<span class='line-number'>280</span>
<span class='line-number'>281</span>
<span class='line-number'>282</span>
<span class='line-number'>283</span>
<span class='line-number'>284</span>
<span class='line-number'>285</span>
<span class='line-number'>286</span>
<span class='line-number'>287</span>
<span class='line-number'>288</span>
<span class='line-number'>289</span>
<span class='line-number'>290</span>
<span class='line-number'>291</span>
<span class='line-number'>292</span>
<span class='line-number'>293</span>
<span class='line-number'>294</span>
<span class='line-number'>295</span>
<span class='line-number'>296</span>
<span class='line-number'>297</span>
<span class='line-number'>298</span>
<span class='line-number'>299</span>
<span class='line-number'>300</span>
<span class='line-number'>301</span>
<span class='line-number'>302</span>
<span class='line-number'>303</span>
<span class='line-number'>304</span>
<span class='line-number'>305</span>
<span class='line-number'>306</span>
<span class='line-number'>307</span>
<span class='line-number'>308</span>
<span class='line-number'>309</span>
<span class='line-number'>310</span>
<span class='line-number'>311</span>
<span class='line-number'>312</span>
<span class='line-number'>313</span>
<span class='line-number'>314</span>
<span class='line-number'>315</span>
<span class='line-number'>316</span>
<span class='line-number'>317</span>
<span class='line-number'>318</span>
<span class='line-number'>319</span>
<span class='line-number'>320</span>
<span class='line-number'>321</span>
<span class='line-number'>322</span>
<span class='line-number'>323</span>
<span class='line-number'>324</span>
<span class='line-number'>325</span>
<span class='line-number'>326</span>
<span class='line-number'>327</span>
<span class='line-number'>328</span>
<span class='line-number'>329</span>
<span class='line-number'>330</span>
<span class='line-number'>331</span>
<span class='line-number'>332</span>
<span class='line-number'>333</span>
<span class='line-number'>334</span>
<span class='line-number'>335</span>
<span class='line-number'>336</span>
<span class='line-number'>337</span>
<span class='line-number'>338</span>
<span class='line-number'>339</span>
<span class='line-number'>340</span>
<span class='line-number'>341</span>
<span class='line-number'>342</span>
<span class='line-number'>343</span>
<span class='line-number'>344</span>
<span class='line-number'>345</span>
<span class='line-number'>346</span>
<span class='line-number'>347</span>
<span class='line-number'>348</span>
<span class='line-number'>349</span>
<span class='line-number'>350</span>
<span class='line-number'>351</span>
<span class='line-number'>352</span>
<span class='line-number'>353</span>
<span class='line-number'>354</span>
<span class='line-number'>355</span>
<span class='line-number'>356</span>
<span class='line-number'>357</span>
<span class='line-number'>358</span>
<span class='line-number'>359</span>
<span class='line-number'>360</span>
<span class='line-number'>361</span>
<span class='line-number'>362</span>
<span class='line-number'>363</span>
<span class='line-number'>364</span>
<span class='line-number'>365</span>
<span class='line-number'>366</span>
<span class='line-number'>367</span>
<span class='line-number'>368</span>
<span class='line-number'>369</span>
<span class='line-number'>370</span>
<span class='line-number'>371</span>
<span class='line-number'>372</span>
<span class='line-number'>373</span>
<span class='line-number'>374</span>
<span class='line-number'>375</span>
<span class='line-number'>376</span>
<span class='line-number'>377</span>
<span class='line-number'>378</span>
<span class='line-number'>379</span>
<span class='line-number'>380</span>
<span class='line-number'>381</span>
<span class='line-number'>382</span>
<span class='line-number'>383</span>
<span class='line-number'>384</span>
<span class='line-number'>385</span>
<span class='line-number'>386</span>
<span class='line-number'>387</span>
<span class='line-number'>388</span>
<span class='line-number'>389</span>
<span class='line-number'>390</span>
<span class='line-number'>391</span>
<span class='line-number'>392</span>
<span class='line-number'>393</span>
<span class='line-number'>394</span>
<span class='line-number'>395</span>
<span class='line-number'>396</span>
<span class='line-number'>397</span>
<span class='line-number'>398</span>
<span class='line-number'>399</span>
<span class='line-number'>400</span>
<span class='line-number'>401</span>
<span class='line-number'>402</span>
<span class='line-number'>403</span>
<span class='line-number'>404</span>
<span class='line-number'>405</span>
<span class='line-number'>406</span>
<span class='line-number'>407</span>
<span class='line-number'>408</span>
<span class='line-number'>409</span>
<span class='line-number'>410</span>
<span class='line-number'>411</span>
<span class='line-number'>412</span>
<span class='line-number'>413</span>
<span class='line-number'>414</span>
<span class='line-number'>415</span>
<span class='line-number'>416</span>
<span class='line-number'>417</span>
<span class='line-number'>418</span>
<span class='line-number'>419</span>
<span class='line-number'>420</span>
<span class='line-number'>421</span>
<span class='line-number'>422</span>
<span class='line-number'>423</span>
<span class='line-number'>424</span>
<span class='line-number'>425</span>
<span class='line-number'>426</span>
<span class='line-number'>427</span>
<span class='line-number'>428</span>
<span class='line-number'>429</span>
<span class='line-number'>430</span>
<span class='line-number'>431</span>
<span class='line-number'>432</span>
<span class='line-number'>433</span>
<span class='line-number'>434</span>
<span class='line-number'>435</span>
<span class='line-number'>436</span>
<span class='line-number'>437</span>
<span class='line-number'>438</span>
<span class='line-number'>439</span>
<span class='line-number'>440</span>
<span class='line-number'>441</span>
<span class='line-number'>442</span>
<span class='line-number'>443</span>
<span class='line-number'>444</span>
<span class='line-number'>445</span>
<span class='line-number'>446</span>
<span class='line-number'>447</span>
<span class='line-number'>448</span>
<span class='line-number'>449</span>
<span class='line-number'>450</span>
<span class='line-number'>451</span>
<span class='line-number'>452</span>
<span class='line-number'>453</span>
<span class='line-number'>454</span>
<span class='line-number'>455</span>
<span class='line-number'>456</span>
<span class='line-number'>457</span>
<span class='line-number'>458</span>
<span class='line-number'>459</span>
<span class='line-number'>460</span>
<span class='line-number'>461</span>
<span class='line-number'>462</span>
<span class='line-number'>463</span>
<span class='line-number'>464</span>
<span class='line-number'>465</span>
<span class='line-number'>466</span>
<span class='line-number'>467</span>
<span class='line-number'>468</span>
<span class='line-number'>469</span>
<span class='line-number'>470</span>
<span class='line-number'>471</span>
<span class='line-number'>472</span>
<span class='line-number'>473</span>
<span class='line-number'>474</span>
<span class='line-number'>475</span>
<span class='line-number'>476</span>
<span class='line-number'>477</span>
<span class='line-number'>478</span>
<span class='line-number'>479</span>
<span class='line-number'>480</span>
<span class='line-number'>481</span>
<span class='line-number'>482</span>
<span class='line-number'>483</span>
<span class='line-number'>484</span>
<span class='line-number'>485</span>
<span class='line-number'>486</span>
<span class='line-number'>487</span>
<span class='line-number'>488</span>
<span class='line-number'>489</span>
<span class='line-number'>490</span>
<span class='line-number'>491</span>
<span class='line-number'>492</span>
<span class='line-number'>493</span>
<span class='line-number'>494</span>
<span class='line-number'>495</span>
<span class='line-number'>496</span>
<span class='line-number'>497</span>
<span class='line-number'>498</span>
<span class='line-number'>499</span>
<span class='line-number'>500</span>
<span class='line-number'>501</span>
<span class='line-number'>502</span>
<span class='line-number'>503</span>
<span class='line-number'>504</span>
<span class='line-number'>505</span>
<span class='line-number'>506</span>
<span class='line-number'>507</span>
<span class='line-number'>508</span>
<span class='line-number'>509</span>
<span class='line-number'>510</span>
<span class='line-number'>511</span>
<span class='line-number'>512</span>
<span class='line-number'>513</span>
<span class='line-number'>514</span>
<span class='line-number'>515</span>
<span class='line-number'>516</span>
<span class='line-number'>517</span>
<span class='line-number'>518</span>
<span class='line-number'>519</span>
<span class='line-number'>520</span>
<span class='line-number'>521</span>
<span class='line-number'>522</span>
<span class='line-number'>523</span>
<span class='line-number'>524</span>
<span class='line-number'>525</span>
<span class='line-number'>526</span>
<span class='line-number'>527</span>
<span class='line-number'>528</span>
<span class='line-number'>529</span>
<span class='line-number'>530</span>
<span class='line-number'>531</span>
<span class='line-number'>532</span>
<span class='line-number'>533</span>
<span class='line-number'>534</span>
<span class='line-number'>535</span>
<span class='line-number'>536</span>
<span class='line-number'>537</span>
<span class='line-number'>538</span>
<span class='line-number'>539</span>
<span class='line-number'>540</span>
<span class='line-number'>541</span>
<span class='line-number'>542</span>
<span class='line-number'>543</span>
<span class='line-number'>544</span>
<span class='line-number'>545</span>
<span class='line-number'>546</span>
<span class='line-number'>547</span>
<span class='line-number'>548</span>
<span class='line-number'>549</span>
<span class='line-number'>550</span>
<span class='line-number'>551</span>
<span class='line-number'>552</span>
<span class='line-number'>553</span>
<span class='line-number'>554</span>
<span class='line-number'>555</span>
<span class='line-number'>556</span>
<span class='line-number'>557</span>
<span class='line-number'>558</span>
<span class='line-number'>559</span>
<span class='line-number'>560</span>
<span class='line-number'>561</span>
<span class='line-number'>562</span>
<span class='line-number'>563</span>
<span class='line-number'>564</span>
<span class='line-number'>565</span>
<span class='line-number'>566</span>
<span class='line-number'>567</span>
<span class='line-number'>568</span>
<span class='line-number'>569</span>
<span class='line-number'>570</span>
<span class='line-number'>571</span>
<span class='line-number'>572</span>
<span class='line-number'>573</span>
<span class='line-number'>574</span>
<span class='line-number'>575</span>
<span class='line-number'>576</span>
<span class='line-number'>577</span>
<span class='line-number'>578</span>
<span class='line-number'>579</span>
<span class='line-number'>580</span>
<span class='line-number'>581</span>
<span class='line-number'>582</span>
<span class='line-number'>583</span>
<span class='line-number'>584</span>
<span class='line-number'>585</span>
<span class='line-number'>586</span>
<span class='line-number'>587</span>
<span class='line-number'>588</span>
<span class='line-number'>589</span>
<span class='line-number'>590</span>
<span class='line-number'>591</span>
<span class='line-number'>592</span>
<span class='line-number'>593</span>
<span class='line-number'>594</span>
<span class='line-number'>595</span>
<span class='line-number'>596</span>
<span class='line-number'>597</span>
<span class='line-number'>598</span>
<span class='line-number'>599</span>
<span class='line-number'>600</span>
<span class='line-number'>601</span>
<span class='line-number'>602</span>
<span class='line-number'>603</span>
<span class='line-number'>604</span>
<span class='line-number'>605</span>
<span class='line-number'>606</span>
<span class='line-number'>607</span>
<span class='line-number'>608</span>
<span class='line-number'>609</span>
<span class='line-number'>610</span>
<span class='line-number'>611</span>
<span class='line-number'>612</span>
<span class='line-number'>613</span>
<span class='line-number'>614</span>
<span class='line-number'>615</span>
<span class='line-number'>616</span>
<span class='line-number'>617</span>
<span class='line-number'>618</span>
<span class='line-number'>619</span>
<span class='line-number'>620</span>
<span class='line-number'>621</span>
<span class='line-number'>622</span>
<span class='line-number'>623</span>
<span class='line-number'>624</span>
<span class='line-number'>625</span>
<span class='line-number'>626</span>
<span class='line-number'>627</span>
<span class='line-number'>628</span>
<span class='line-number'>629</span>
<span class='line-number'>630</span>
<span class='line-number'>631</span>
<span class='line-number'>632</span>
<span class='line-number'>633</span>
<span class='line-number'>634</span>
<span class='line-number'>635</span>
<span class='line-number'>636</span>
<span class='line-number'>637</span>
<span class='line-number'>638</span>
<span class='line-number'>639</span>
<span class='line-number'>640</span>
<span class='line-number'>641</span>
<span class='line-number'>642</span>
<span class='line-number'>643</span>
<span class='line-number'>644</span>
<span class='line-number'>645</span>
<span class='line-number'>646</span>
<span class='line-number'>647</span>
<span class='line-number'>648</span>
<span class='line-number'>649</span>
<span class='line-number'>650</span>
<span class='line-number'>651</span>
<span class='line-number'>652</span>
<span class='line-number'>653</span>
<span class='line-number'>654</span>
<span class='line-number'>655</span>
<span class='line-number'>656</span>
<span class='line-number'>657</span>
<span class='line-number'>658</span>
<span class='line-number'>659</span>
<span class='line-number'>660</span>
<span class='line-number'>661</span>
<span class='line-number'>662</span>
<span class='line-number'>663</span>
<span class='line-number'>664</span>
<span class='line-number'>665</span>
<span class='line-number'>666</span>
<span class='line-number'>667</span>
<span class='line-number'>668</span>
<span class='line-number'>669</span>
<span class='line-number'>670</span>
<span class='line-number'>671</span>
<span class='line-number'>672</span>
<span class='line-number'>673</span>
<span class='line-number'>674</span>
<span class='line-number'>675</span>
<span class='line-number'>676</span>
<span class='line-number'>677</span>
<span class='line-number'>678</span>
<span class='line-number'>679</span>
<span class='line-number'>680</span>
<span class='line-number'>681</span>
<span class='line-number'>682</span>
<span class='line-number'>683</span>
<span class='line-number'>684</span>
<span class='line-number'>685</span>
<span class='line-number'>686</span>
<span class='line-number'>687</span>
<span class='line-number'>688</span>
<span class='line-number'>689</span>
<span class='line-number'>690</span>
<span class='line-number'>691</span>
<span class='line-number'>692</span>
<span class='line-number'>693</span>
<span class='line-number'>694</span>
<span class='line-number'>695</span>
<span class='line-number'>696</span>
<span class='line-number'>697</span>
<span class='line-number'>698</span>
<span class='line-number'>699</span>
<span class='line-number'>700</span>
<span class='line-number'>701</span>
<span class='line-number'>702</span>
<span class='line-number'>703</span>
<span class='line-number'>704</span>
<span class='line-number'>705</span>
<span class='line-number'>706</span>
<span class='line-number'>707</span>
<span class='line-number'>708</span>
<span class='line-number'>709</span>
<span class='line-number'>710</span>
<span class='line-number'>711</span>
<span class='line-number'>712</span>
<span class='line-number'>713</span>
<span class='line-number'>714</span>
<span class='line-number'>715</span>
<span class='line-number'>716</span>
<span class='line-number'>717</span>
<span class='line-number'>718</span>
<span class='line-number'>719</span>
<span class='line-number'>720</span>
<span class='line-number'>721</span>
<span class='line-number'>722</span>
<span class='line-number'>723</span>
<span class='line-number'>724</span>
<span class='line-number'>725</span>
<span class='line-number'>726</span>
<span class='line-number'>727</span>
<span class='line-number'>728</span>
<span class='line-number'>729</span>
<span class='line-number'>730</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>127.0.0.1 localhost
</span><span class='line'><span class="c">#Google Services START</span>
</span><span class='line'>203.208.46.200    0.docs.google.com
</span><span class='line'>203.208.46.200    0.drive.google.com
</span><span class='line'>203.208.46.200    1.docs.google.com
</span><span class='line'>203.208.46.200    1.drive.google.com
</span><span class='line'>203.208.46.200    10.docs.google.com
</span><span class='line'>203.208.46.200    10.drive.google.com
</span><span class='line'>203.208.46.200    11.docs.google.com
</span><span class='line'>203.208.46.200    11.drive.google.com
</span><span class='line'>203.208.46.200    12.docs.google.com
</span><span class='line'>203.208.46.200    12.drive.google.com
</span><span class='line'>203.208.46.200    13.docs.google.com
</span><span class='line'>203.208.46.200    13.drive.google.com
</span><span class='line'>203.208.46.200    14.docs.google.com
</span><span class='line'>203.208.46.200    14.drive.google.com
</span><span class='line'>203.208.46.200    15.docs.google.com
</span><span class='line'>203.208.46.200    15.drive.google.com
</span><span class='line'>203.208.46.200    16.docs.google.com
</span><span class='line'>203.208.46.200    16.drive.google.com
</span><span class='line'>203.208.46.200    2.docs.google.com
</span><span class='line'>203.208.46.200    2.drive.google.com
</span><span class='line'>203.208.46.200    3.docs.google.com
</span><span class='line'>203.208.46.200    3.drive.google.com
</span><span class='line'>203.208.46.200    4.docs.google.com
</span><span class='line'>203.208.46.200    4.drive.google.com
</span><span class='line'>203.208.46.200    5.docs.google.com
</span><span class='line'>203.208.46.200    5.drive.google.com
</span><span class='line'>203.208.46.200    6.docs.google.com
</span><span class='line'>203.208.46.200    6.drive.google.com
</span><span class='line'>203.208.46.200    7.docs.google.com
</span><span class='line'>203.208.46.200    7.drive.google.com
</span><span class='line'>203.208.46.200    8.docs.google.com
</span><span class='line'>203.208.46.200    8.drive.google.com
</span><span class='line'>203.208.46.200    9.docs.google.com
</span><span class='line'>203.208.46.200    9.drive.google.com
</span><span class='line'>203.208.46.200    accounts.google.com
</span><span class='line'>203.208.46.200    accounts.l.google.com
</span><span class='line'>203.208.46.200    answers.google.com
</span><span class='line'>203.208.46.200    apis.google.com
</span><span class='line'>203.208.46.200    appengine.google.com
</span><span class='line'>203.208.46.200    apps.google.com
</span><span class='line'>203.208.46.200    appspot.l.google.com
</span><span class='line'>203.208.46.200    bks0.books.google.com
</span><span class='line'>203.208.46.200    bks1.books.google.com
</span><span class='line'>203.208.46.200    bks10.books.google.com
</span><span class='line'>203.208.46.200    bks2.books.google.com
</span><span class='line'>203.208.46.200    bks3.books.google.com
</span><span class='line'>203.208.46.200    bks4.books.google.com
</span><span class='line'>203.208.46.200    bks5.books.google.com
</span><span class='line'>203.208.46.200    bks6.books.google.com
</span><span class='line'>203.208.46.200    bks7.books.google.com
</span><span class='line'>203.208.46.200    bks8.books.google.com
</span><span class='line'>203.208.46.200    bks9.books.google.com
</span><span class='line'>203.208.46.200    blogsearch.google.com
</span><span class='line'>203.208.46.200    books.google.com
</span><span class='line'>203.208.46.200    browserchannel-docs.l.google.com
</span><span class='line'>203.208.46.200    browserchannel-spreadsheets.l.google.com
</span><span class='line'>203.208.46.200    browsersync.google.com
</span><span class='line'>203.208.46.200    browsersync.l.google.com
</span><span class='line'>203.208.46.200    buzz.google.com
</span><span class='line'>203.208.46.200    cache.l.google.com
</span><span class='line'>203.208.46.200    cache.pack.google.com
</span><span class='line'>203.208.46.200    calendar.google.com
</span><span class='line'>203.208.46.200    cbk0.google.com
</span><span class='line'>203.208.46.200    cbk1.google.com
</span><span class='line'>203.208.46.200    cbk2.google.com
</span><span class='line'>203.208.46.200    cbk3.google.com
</span><span class='line'>203.208.46.200    cbks0.google.com
</span><span class='line'>203.208.46.200    cbks1.google.com
</span><span class='line'>203.208.46.200    cbks2.google.com
</span><span class='line'>203.208.46.200    cbks3.google.com
</span><span class='line'>203.208.46.200    chart.apis.google.com
</span><span class='line'>203.208.46.221    chatenabled.mail.google.com
</span><span class='line'>203.208.46.200    checkout.google.com
</span><span class='line'>203.208.46.200    checkout.l.google.com
</span><span class='line'>203.208.46.200    chrome.google.com
</span><span class='line'>203.208.46.200    clients.l.google.com
</span><span class='line'>203.208.46.200    clients1.google.com
</span><span class='line'>203.208.46.200    clients2.google.com
</span><span class='line'>203.208.46.200    clients3.google.com
</span><span class='line'>203.208.46.200    clients4.google.com
</span><span class='line'>203.208.46.200    clients5.google.com
</span><span class='line'>203.208.46.200    clients6.google.com
</span><span class='line'>203.208.46.200    clients7.google.com
</span><span class='line'>203.208.46.200    code.google.com
</span><span class='line'>203.208.46.200    code.l.google.com
</span><span class='line'>203.208.46.200    csi.l.google.com
</span><span class='line'>203.208.46.200    desktop.google.com
</span><span class='line'>203.208.46.200    desktop.l.google.com
</span><span class='line'>203.208.46.200    desktop2.google.com
</span><span class='line'>203.208.46.200    developers.google.com
</span><span class='line'>203.208.46.200    ditu.google.com
</span><span class='line'>203.208.46.200    dl.google.com
</span><span class='line'>203.208.46.200    dl.l.google.com
</span><span class='line'>203.208.46.200    dl-ssl.google.com
</span><span class='line'>203.208.46.200    docs.google.com
</span><span class='line'>203.208.46.200    docs0.google.com
</span><span class='line'>203.208.46.200    docs1.google.com
</span><span class='line'>203.208.46.200    docs2.google.com
</span><span class='line'>203.208.46.200    docs3.google.com
</span><span class='line'>203.208.46.200    docs4.google.com
</span><span class='line'>203.208.46.200    docs5.google.com
</span><span class='line'>203.208.46.200    docs6.google.com
</span><span class='line'>203.208.46.200    docs7.google.com
</span><span class='line'>203.208.46.200    docs8.google.com
</span><span class='line'>203.208.46.200    docs9.google.com
</span><span class='line'>203.208.46.200    drive.google.com
</span><span class='line'>203.208.46.200    drive0.google.com
</span><span class='line'>203.208.46.200    drive1.google.com
</span><span class='line'>203.208.46.200    drive2.google.com
</span><span class='line'>203.208.46.200    drive3.google.com
</span><span class='line'>203.208.46.200    drive4.google.com
</span><span class='line'>203.208.46.200    drive5.google.com
</span><span class='line'>203.208.46.200    drive6.google.com
</span><span class='line'>203.208.46.200    drive7.google.com
</span><span class='line'>203.208.46.200    drive8.google.com
</span><span class='line'>203.208.46.200    drive9.google.com
</span><span class='line'>203.208.46.200    earth.google.com
</span><span class='line'>203.208.46.200    encrypted.google.com
</span><span class='line'>203.208.46.200    encrypted-tbn.l.google.com
</span><span class='line'>203.208.46.200    encrypted-tbn0.google.com
</span><span class='line'>203.208.46.200    encrypted-tbn1.google.com
</span><span class='line'>203.208.46.200    encrypted-tbn2.google.com
</span><span class='line'>203.208.46.200    encrypted-tbn3.google.com
</span><span class='line'>203.208.46.200    feedburner.google.com
</span><span class='line'>203.208.46.200    feedproxy.google.com
</span><span class='line'>203.208.46.221    filetransferenabled.mail.google.com
</span><span class='line'>203.208.46.200    finance.google.com
</span><span class='line'>203.208.46.200    fusion.google.com
</span><span class='line'>203.208.46.200    geoauth.google.com
</span><span class='line'>203.208.46.200    gg.google.com
</span><span class='line'>203.208.46.200    ghs.google.com
</span><span class='line'>203.208.46.200    ghs.l.google.com
</span><span class='line'>203.208.46.200    ghs46.google.com
</span><span class='line'>203.208.46.200    ghs46.l.google.com
</span><span class='line'>203.208.46.200    google.com
</span><span class='line'>203.208.46.200    googleapis.l.google.com
</span><span class='line'>203.208.46.200    googleapis-ajax.google.com
</span><span class='line'>203.208.46.200    googleapis-ajax.l.google.com
</span><span class='line'>203.208.46.200    googlecode.l.google.com
</span><span class='line'>203.208.46.200    google-public-dns-a.google.com
</span><span class='line'>203.208.46.200    google-public-dns-b.google.com
</span><span class='line'>203.208.46.200    goto.google.com
</span><span class='line'>203.208.46.200    groups.google.com
</span><span class='line'>203.208.46.200    groups.l.google.com
</span><span class='line'>203.208.46.200    groups-beta.google.com
</span><span class='line'>203.208.46.200    gxc.google.com
</span><span class='line'>203.208.46.200    id.google.com
</span><span class='line'>203.208.46.200    id.l.google.com
</span><span class='line'>203.208.46.200    images.google.com
</span><span class='line'>203.208.46.200    images.l.google.com
</span><span class='line'>203.208.46.200    investor.google.com
</span><span class='line'>203.208.46.200    jmt0.google.com
</span><span class='line'>203.208.46.200    kh.google.com
</span><span class='line'>203.208.46.200    kh.l.google.com
</span><span class='line'>203.208.46.200    khm.google.com
</span><span class='line'>203.208.46.200    khm.l.google.com
</span><span class='line'>203.208.46.200    khm0.google.com
</span><span class='line'>203.208.46.200    khm1.google.com
</span><span class='line'>203.208.46.200    khm2.google.com
</span><span class='line'>203.208.46.200    khm3.google.com
</span><span class='line'>203.208.46.200    khmdb.google.com
</span><span class='line'>203.208.46.200    khms.google.com
</span><span class='line'>203.208.46.200    khms.l.google.com
</span><span class='line'>203.208.46.200    khms0.google.com
</span><span class='line'>203.208.46.200    khms1.google.com
</span><span class='line'>203.208.46.200    khms2.google.com
</span><span class='line'>203.208.46.200    khms3.google.com
</span><span class='line'>203.208.46.200    labs.google.com
</span><span class='line'>203.208.46.200    large-uploads.l.google.com
</span><span class='line'>203.208.46.200    lh2.google.com
</span><span class='line'>203.208.46.200    lh2.l.google.com
</span><span class='line'>203.208.46.200    lh3.google.com
</span><span class='line'>203.208.46.200    lh4.google.com
</span><span class='line'>203.208.46.200    lh5.google.com
</span><span class='line'>203.208.46.200    lh6.google.com
</span><span class='line'>203.208.46.200    linkhelp.clients.google.com
</span><span class='line'>203.208.46.200    local.google.com
</span><span class='line'>203.208.46.200    m.google.com
</span><span class='line'>203.208.46.213    mail.google.com
</span><span class='line'>203.208.46.200    map.google.com
</span><span class='line'>203.208.46.200    maps.google.com
</span><span class='line'>203.208.46.200    maps.l.google.com
</span><span class='line'>203.208.46.200    maps-api-ssl.google.com
</span><span class='line'>203.208.46.200    mars.google.com
</span><span class='line'>203.208.46.200    mobile.l.google.com
</span><span class='line'>203.208.46.200    mobile-gtalk.l.google.com
</span><span class='line'>203.208.46.200    mobilemaps.clients.google.com
</span><span class='line'>203.208.46.200    mt.google.com
</span><span class='line'>203.208.46.200    mt.l.google.com
</span><span class='line'>203.208.46.200    mt0.google.com
</span><span class='line'>203.208.46.200    mt1.google.com
</span><span class='line'>203.208.46.200    mt2.google.com
</span><span class='line'>203.208.46.200    mt3.google.com
</span><span class='line'><span class="c">#203.208.46.200   mtalk.google.com</span>
</span><span class='line'>203.208.46.200    mts.google.com
</span><span class='line'>203.208.46.200    mts.l.google.com
</span><span class='line'>203.208.46.200    mts0.google.com
</span><span class='line'>203.208.46.200    mts1.google.com
</span><span class='line'>203.208.46.200    mts2.google.com
</span><span class='line'>203.208.46.200    mts3.google.com
</span><span class='line'>203.208.46.200    music.google.com
</span><span class='line'>203.208.46.200    music-streaming.l.google.com
</span><span class='line'>203.208.46.200    mw1.google.com
</span><span class='line'>203.208.46.200    mw2.google.com
</span><span class='line'>203.208.46.200    news.google.com
</span><span class='line'>203.208.46.200    news.l.google.com
</span><span class='line'>203.208.46.200    pack.google.com
</span><span class='line'>203.208.46.200    photos.google.com
</span><span class='line'>203.208.46.200    photos-ugc.l.google.com
</span><span class='line'>203.208.46.200    picasa.google.com
</span><span class='line'>203.208.46.200    picasaweb.google.com
</span><span class='line'>203.208.46.200    picasaweb.l.google.com
</span><span class='line'>203.208.46.200    places.google.com
</span><span class='line'>203.208.46.200    play.google.com
</span><span class='line'>203.208.46.200    productforums.google.com
</span><span class='line'>203.208.46.200    profiles.google.com
</span><span class='line'>203.208.46.200    reader.google.com
</span><span class='line'>203.208.46.200    safebrowsing.cache.l.google.com
</span><span class='line'>203.208.46.200    safebrowsing.clients.google.com
</span><span class='line'>203.208.46.200    safebrowsing.google.com
</span><span class='line'>203.208.46.200    safebrowsing-cache.google.com
</span><span class='line'>203.208.46.200    sandbox.google.com
</span><span class='line'>203.208.46.200    sb.google.com
</span><span class='line'>203.208.46.200    sb.l.google.com
</span><span class='line'>203.208.46.200    sb-ssl.google.com
</span><span class='line'>203.208.46.200    sb-ssl.l.google.com
</span><span class='line'>203.208.46.200    scholar.google.com
</span><span class='line'>203.208.46.200    scholar.l.google.com
</span><span class='line'>203.208.46.200    script.google.com
</span><span class='line'>203.208.46.200    services.google.com
</span><span class='line'>203.208.46.200    sites.google.com
</span><span class='line'>203.208.46.200    sketchup.google.com
</span><span class='line'>203.208.46.200    sketchup.l.google.com
</span><span class='line'>203.208.46.200    spreadsheet.google.com
</span><span class='line'>203.208.46.200    spreadsheets.google.com
</span><span class='line'>203.208.46.200    spreadsheets.l.google.com
</span><span class='line'>203.208.46.200    spreadsheets0.google.com
</span><span class='line'>203.208.46.200    spreadsheets1.google.com
</span><span class='line'>203.208.46.200    spreadsheets2.google.com
</span><span class='line'>203.208.46.200    spreadsheets3.google.com
</span><span class='line'>203.208.46.200    spreadsheets4.google.com
</span><span class='line'>203.208.46.200    spreadsheets5.google.com
</span><span class='line'>203.208.46.200    spreadsheets6.google.com
</span><span class='line'>203.208.46.200    spreadsheets7.google.com
</span><span class='line'>203.208.46.200    spreadsheets8.google.com
</span><span class='line'>203.208.46.200    spreadsheets9.google.com
</span><span class='line'>203.208.46.200    spreadsheets-china.l.google.com
</span><span class='line'>203.208.46.200    suggestqueries.google.com
</span><span class='line'>203.208.46.200    suggestqueries.l.google.com
</span><span class='line'>203.208.46.200    support.google.com
</span><span class='line'>173.194.70.125    talk.google.com
</span><span class='line'>203.208.46.200    talkgadget.google.com
</span><span class='line'>203.208.46.200    tbn0.google.com
</span><span class='line'>203.208.46.200    tbn1.google.com
</span><span class='line'>203.208.46.200    tbn2.google.com
</span><span class='line'>203.208.46.200    tbn3.google.com
</span><span class='line'>203.208.46.200    toolbar.google.com
</span><span class='line'>203.208.46.200    toolbarqueries.clients.google.com
</span><span class='line'>203.208.46.200    toolbarqueries.google.com
</span><span class='line'>203.208.46.200    toolbarqueries.l.google.com
</span><span class='line'>203.208.46.200    tools.google.com
</span><span class='line'>203.208.46.200    tools.l.google.com
</span><span class='line'>203.208.46.200    translate.google.com
</span><span class='line'>203.208.46.200    trends.google.com
</span><span class='line'>203.208.46.200    upload.docs.google.com
</span><span class='line'>203.208.46.200    upload.drive.google.com
</span><span class='line'>203.208.46.200    uploads.code.google.com
</span><span class='line'>203.208.46.200    uploadsj.clients.google.com
</span><span class='line'>203.208.46.200    v3.cache1.c.docs.google.com
</span><span class='line'>203.208.46.200    video.google.com
</span><span class='line'>203.208.46.200    video-stats.l.google.com
</span><span class='line'>203.208.46.200    voice.google.com
</span><span class='line'>203.208.46.200    wallet.google.com
</span><span class='line'>203.208.46.200    wifi.google.com
</span><span class='line'>203.208.46.200    wifi.l.google.com
</span><span class='line'>203.208.46.200    wire.l.google.com
</span><span class='line'>203.208.46.200    writely.google.com
</span><span class='line'>203.208.46.200    writely.l.google.com
</span><span class='line'>203.208.46.200    writely-china.l.google.com
</span><span class='line'>203.208.46.200    writely-com.l.google.com
</span><span class='line'>203.208.46.200    www.google.com
</span><span class='line'>203.208.46.200    www.l.google.com
</span><span class='line'>203.208.46.200    www2.l.google.com
</span><span class='line'>203.208.46.200    www3.l.google.com
</span><span class='line'>203.208.46.200    www4.l.google.com
</span><span class='line'>203.208.46.200    ytstatic.l.google.com
</span><span class='line'>203.208.46.202    0-open-opensocial.googleusercontent.com
</span><span class='line'>203.208.46.202    0-focus-opensocial.googleusercontent.com
</span><span class='line'>203.208.46.202    1-focus-opensocial.googleusercontent.com
</span><span class='line'>203.208.46.202    1-open-opensocial.googleusercontent.com
</span><span class='line'>203.208.46.202    1-ps.googleusercontent.com
</span><span class='line'>203.208.46.202    2-focus-opensocial.googleusercontent.com
</span><span class='line'>203.208.46.202    2-open-opensocial.googleusercontent.com
</span><span class='line'>203.208.46.202    2-ps.googleusercontent.com
</span><span class='line'>203.208.46.202    3-focus-opensocial.googleusercontent.com
</span><span class='line'>203.208.46.202    3-ps.googleusercontent.com
</span><span class='line'>203.208.46.202    3hdrrlnlknhi77nrmsjnjr152ueo3soc-a-calendar-opensocial.googleusercontent.com
</span><span class='line'>203.208.46.202    3-open-opensocial.googleusercontent.com
</span><span class='line'>203.208.46.202    4-ps.googleusercontent.com
</span><span class='line'>203.208.46.202    4fjvqid3r3oq66t548clrdj52df15coc-a-oz-opensocial.googleusercontent.com
</span><span class='line'>203.208.46.202    53rd6p0catml6vat6qra84rs0del836d-a-oz-opensocial.googleusercontent.com
</span><span class='line'>203.208.46.202    59cbv4l9s05pbaks9v77vc3mengeqors-a-oz-opensocial.googleusercontent.com
</span><span class='line'>203.208.46.202    8kubpeu8314p2efdd7jlv09an9i2ljdo-a-oz-opensocial.googleusercontent.com
</span><span class='line'>203.208.46.202    adstvca8k2ooaknjjmv89j22n9t676ve-a-oz-opensocial.googleusercontent.com
</span><span class='line'>203.208.46.202    a-oz-opensocial.googleusercontent.com
</span><span class='line'>203.208.46.202    blogger.googleusercontent.com
</span><span class='line'>203.208.46.202    bt26mravu2qpe56n8gnmjnpv2inl84bf-a-oz-opensocial.googleusercontent.com
</span><span class='line'>203.208.46.202    clients1.googleusercontent.com
</span><span class='line'>203.208.46.202    clients2.googleusercontent.com
</span><span class='line'>203.208.46.202    clients3.googleusercontent.com
</span><span class='line'>203.208.46.202    clients4.googleusercontent.com
</span><span class='line'>203.208.46.202    clients5.googleusercontent.com
</span><span class='line'>203.208.46.202    clients6.googleusercontent.com
</span><span class='line'>203.208.46.202    clients7.googleusercontent.com
</span><span class='line'>203.208.46.202    code-opensocial.googleusercontent.com
</span><span class='line'>203.208.46.202    debh8vg7vd93bco3prdajidmm7dhql3f-a-oz-opensocial.googleusercontent.com
</span><span class='line'>203.208.46.202    doc-00-7o-docs.googleusercontent.com
</span><span class='line'>203.208.46.202    doc-08-7o-docs.googleusercontent.com
</span><span class='line'>203.208.46.202    doc-0c-7o-docs.googleusercontent.com
</span><span class='line'>203.208.46.202    doc-0g-7o-docs.googleusercontent.com
</span><span class='line'>203.208.46.202    doc-0s-7o-docs.googleusercontent.com
</span><span class='line'>203.208.46.202    doc-10-7o-docs.googleusercontent.com
</span><span class='line'>203.208.46.202    doc-14-7o-docs.googleusercontent.com
</span><span class='line'>203.208.46.202    feedback.googleusercontent.com
</span><span class='line'>203.208.46.202    googlehosted.l.googleusercontent.com
</span><span class='line'>203.208.46.202    gp0.googleusercontent.com
</span><span class='line'>203.208.46.202    gp1.googleusercontent.com
</span><span class='line'>203.208.46.202    gp2.googleusercontent.com
</span><span class='line'>203.208.46.202    gp3.googleusercontent.com
</span><span class='line'>203.208.46.202    gp4.googleusercontent.com
</span><span class='line'>203.208.46.202    gp5.googleusercontent.com
</span><span class='line'>203.208.46.202    gp6.googleusercontent.com
</span><span class='line'>203.208.46.202    hsco54a20sh11q9jkmb51ad2n3hmkmrg-a-oz-opensocial.googleusercontent.com
</span><span class='line'>203.208.46.202    i8brh95qor6r54nkl52hidj2ggcs4jgm-a-oz-opensocial.googleusercontent.com
</span><span class='line'>203.208.46.202    images1-focus-opensocial.googleusercontent.com
</span><span class='line'>203.208.46.202    images2-focus-opensocial.googleusercontent.com
</span><span class='line'>203.208.46.202    images3-focus-opensocial.googleusercontent.com
</span><span class='line'>203.208.46.202    images4-focus-opensocial.googleusercontent.com
</span><span class='line'>203.208.46.202    images5-focus-opensocial.googleusercontent.com
</span><span class='line'>203.208.46.202    images6-focus-opensocial.googleusercontent.com
</span><span class='line'>203.208.46.202    images7-focus-opensocial.googleusercontent.com
</span><span class='line'>203.208.46.202    images8-focus-opensocial.googleusercontent.com
</span><span class='line'>203.208.46.202    images9-focus-opensocial.googleusercontent.com
</span><span class='line'>203.208.46.202    images-docs-opensocial.googleusercontent.com
</span><span class='line'>203.208.46.202    images-oz-opensocial.googleusercontent.com
</span><span class='line'>203.208.46.202    k6v18tjr24doa89b55o3na41kn4v73eb-a-oz-opensocial.googleusercontent.com
</span><span class='line'>203.208.46.202    lh1.googleusercontent.com
</span><span class='line'>203.208.46.202    lh2.googleusercontent.com
</span><span class='line'>203.208.46.202    lh3.googleusercontent.com
</span><span class='line'>203.208.46.202    lh4.googleusercontent.com
</span><span class='line'>203.208.46.202    lh5.googleusercontent.com
</span><span class='line'>203.208.46.202    lh6.googleusercontent.com
</span><span class='line'>203.208.46.202    mail-attachment.googleusercontent.com
</span><span class='line'>203.208.46.202    music.googleusercontent.com
</span><span class='line'>203.208.46.202    music-onebox.googleusercontent.com
</span><span class='line'>203.208.46.202    oauth.googleusercontent.com
</span><span class='line'>203.208.46.202    ob7f2qc0i50kbjnc81vkhgmb5hsv7a8l-a-oz-opensocial.googleusercontent.com
</span><span class='line'>203.208.46.202    ode25pfjgmvpquh3b1oqo31ti5ibg5fr-a-calendar.opensocial.googleusercontent.com
</span><span class='line'>203.208.46.202    qhie5b8u979rnch1q0hqbrmbkn9estf7-a-oz-opensocial.googleusercontent.com
</span><span class='line'>203.208.46.202    r70rmsn4s0rhk6cehcbbcbfbs31pu0va-a-oz-opensocial.googleusercontent.com
</span><span class='line'>203.208.46.202    rbjhe237k979f79d87gmenp3gejfonu9-a-oz-opensocial.googleusercontent.com
</span><span class='line'>203.208.46.202    s1.googleusercontent.com
</span><span class='line'>203.208.46.202    s2.googleusercontent.com
</span><span class='line'>203.208.46.202    s3.googleusercontent.com
</span><span class='line'>203.208.46.202    s4.googleusercontent.com
</span><span class='line'>203.208.46.202    s5.googleusercontent.com
</span><span class='line'>203.208.46.202    s6.googleusercontent.com
</span><span class='line'>203.208.46.202    spreadsheets-opensocial.googleusercontent.com
</span><span class='line'>203.208.46.202    static.googleusercontent.com
</span><span class='line'>203.208.46.202    t.doc-0-0-sj.sj.googleusercontent.com
</span><span class='line'>203.208.46.202    themes.googleusercontent.com
</span><span class='line'>203.208.46.202    translate.googleusercontent.com
</span><span class='line'>203.208.46.202    u807isd5egseeabjccgcns005p2miucq-a-oz-opensocial.googleusercontent.com
</span><span class='line'>203.208.46.202    upt14k1i2veesusrda9nfotcrbp9d7p5-a-oz-opensocial.googleusercontent.com
</span><span class='line'>203.208.46.202    webcache.googleusercontent.com
</span><span class='line'>203.208.46.202    www.googleusercontent.com
</span><span class='line'>203.208.46.202    www-calendar-opensocial.googleusercontent.com
</span><span class='line'>203.208.46.202    www-fc-opensocial.googleusercontent.com
</span><span class='line'>203.208.46.202    www-focus-opensocial.googleusercontent.com
</span><span class='line'>203.208.46.202    www-gm-opensocial.googleusercontent.com
</span><span class='line'>203.208.46.202    www-kix-opensocial.googleusercontent.com
</span><span class='line'>203.208.46.202    www-open-opensocial.googleusercontent.com
</span><span class='line'>203.208.46.202    www-opensocial.googleusercontent.com
</span><span class='line'>203.208.46.202    www-opensocial-sandbox.googleusercontent.com
</span><span class='line'>203.208.46.202    www-oz-opensocial.googleusercontent.com
</span><span class='line'>203.208.46.207    csi.gstatic.com
</span><span class='line'>203.208.46.207    g0.gstatic.com
</span><span class='line'>203.208.46.207    g1.gstatic.com
</span><span class='line'>203.208.46.207    g2.gstatic.com
</span><span class='line'>203.208.46.207    g3.gstatic.com
</span><span class='line'>203.208.46.207    maps.gstatic.com
</span><span class='line'>203.208.46.207    mt0.gstatic.com
</span><span class='line'>203.208.46.207    mt1.gstatic.com
</span><span class='line'>203.208.46.207    mt2.gstatic.com
</span><span class='line'>203.208.46.207    mt3.gstatic.com
</span><span class='line'>203.208.46.207    mt4.gstatic.com
</span><span class='line'>203.208.46.207    mt5.gstatic.com
</span><span class='line'>203.208.46.207    mt6.gstatic.com
</span><span class='line'>203.208.46.207    mt7.gstatic.com
</span><span class='line'>203.208.46.207    ssl.gstatic.com
</span><span class='line'>203.208.46.207    t0.gstatic.com
</span><span class='line'>203.208.46.207    t1.gstatic.com
</span><span class='line'>203.208.46.207    t2.gstatic.com
</span><span class='line'>203.208.46.207    t3.gstatic.com
</span><span class='line'>203.208.46.207    www.gstatic.com
</span><span class='line'>203.208.46.170    lh1.ggpht.com
</span><span class='line'>203.208.46.170    lh2.ggpht.com
</span><span class='line'>203.208.46.170    lh3.ggpht.com
</span><span class='line'>203.208.46.170    lh4.ggpht.com
</span><span class='line'>203.208.46.170    lh5.ggpht.com
</span><span class='line'>203.208.46.170    lh6.ggpht.com
</span><span class='line'>203.208.46.170    nt0.ggpht.com
</span><span class='line'>203.208.46.170    nt1.ggpht.com
</span><span class='line'>203.208.46.170    nt2.ggpht.com
</span><span class='line'>203.208.46.170    nt3.ggpht.com
</span><span class='line'>203.208.46.170    nt4.ggpht.com
</span><span class='line'>203.208.46.170    nt5.ggpht.com
</span><span class='line'>203.208.46.200    appspot.com
</span><span class='line'>173.194.64.141    chrometophone.appspot.com
</span><span class='line'>203.208.46.200    evolutionofweb.appspot.com
</span><span class='line'>203.208.46.200    googcloudlabs.appspot.com
</span><span class='line'>203.208.46.200    gv-gadget.appspot.com
</span><span class='line'>203.208.46.200    magnifier.blogspot.com
</span><span class='line'>203.208.46.200    moderator.appspot.com
</span><span class='line'>203.208.46.200    newsfeed-dot-latest-dot-rovio-ad-engine.appspot.com
</span><span class='line'>203.208.46.200    productideas.appspot.com
</span><span class='line'>203.208.46.200    project-slingshot-gp.appspot.com
</span><span class='line'>203.208.46.200    r2303.latest.project-slingshot-hr.appspot.com
</span><span class='line'>203.208.46.200    r3085-dot-latest-dot-project-slingshot-gp.appspot.com
</span><span class='line'>203.208.46.200    r3091-dot-latest-dot-project-slingshot-gp.appspot.com
</span><span class='line'>203.208.46.200    r3101-dot-latest-dot-project-slingshot-gp.appspot.com
</span><span class='line'>203.208.46.200    r3269-dot-latest-dot-project-slingshot-gp.appspot.com
</span><span class='line'>203.208.46.200    r3432-dot-latest-dot-project-slingshot-hr.appspot.com
</span><span class='line'>203.208.46.200    r4681-dot-latest-dot-project-slingshot-hr.appspot.com
</span><span class='line'>203.208.46.170    r7647-dot-latest-dot-project-slingshot-hr.appspot.com
</span><span class='line'>203.208.46.200    wcproxyx.appspot.com
</span><span class='line'>203.208.46.200    www.appspot.com
</span><span class='line'>203.208.46.200    ajax.googleapis.com
</span><span class='line'>203.208.46.200    chart.googleapis.com
</span><span class='line'>203.208.46.200    fonts.googleapis.com
</span><span class='line'>203.208.46.200    maps.googleapis.com
</span><span class='line'>203.208.46.200    mt0.googleapis.com
</span><span class='line'>203.208.46.200    mt1.googleapis.com
</span><span class='line'>203.208.46.200    mt2.googleapis.com
</span><span class='line'>203.208.46.200    mt3.googleapis.com
</span><span class='line'>203.208.46.200    redirector-bigcache.googleapis.com
</span><span class='line'>203.208.46.200    translate.googleapis.com
</span><span class='line'>173.194.66.95 www.googleapis.com
</span><span class='line'>203.208.46.200    autoproxy-gfwlist.googlecode.com
</span><span class='line'>203.208.46.200    chromium.googlecode.com
</span><span class='line'>203.208.46.200    closure-library.googlecode.com
</span><span class='line'>203.208.46.200    earth-api-samples.googlecode.com
</span><span class='line'>203.208.46.200    gmaps-samples-flash.googlecode.com
</span><span class='line'>203.208.46.200    google-code-feed-gadget.googlecode.com
</span><span class='line'>203.208.46.200    blogsearch.google.cn
</span><span class='line'>203.208.46.200    ditu.google.cn
</span><span class='line'>203.208.46.200    gg.google.cn
</span><span class='line'>203.208.46.200    id.google.cn
</span><span class='line'>203.208.46.200    maps.gstatic.cn
</span><span class='line'>203.208.46.200    m.google.cn
</span><span class='line'>203.208.46.200    mt.google.cn
</span><span class='line'>203.208.46.200    mt0.google.cn
</span><span class='line'>203.208.46.200    mt1.google.cn
</span><span class='line'>203.208.46.200    mt2.google.cn
</span><span class='line'>203.208.46.200    mt3.google.cn
</span><span class='line'>203.208.46.200    news.google.cn
</span><span class='line'>203.208.46.200    scholar.google.cn
</span><span class='line'>203.208.46.200    translate.google.cn
</span><span class='line'>203.208.46.200    www.google.cn
</span><span class='line'>203.208.46.200    www.gstatic.cn
</span><span class='line'>203.208.46.200    accounts.google.com.hk
</span><span class='line'>203.208.46.200    blogsearch.google.com.hk
</span><span class='line'>203.208.46.200    books.google.com.hk
</span><span class='line'>203.208.46.200    clients1.google.com.hk
</span><span class='line'>203.208.46.200    desktop.google.com.hk
</span><span class='line'>203.208.46.200    encrypted.google.com.hk
</span><span class='line'>203.208.46.200    groups.google.com.hk
</span><span class='line'>203.208.46.200    gxc.google.com.hk
</span><span class='line'>203.208.46.200    id.google.com.hk
</span><span class='line'>203.208.46.200    images.google.com.hk
</span><span class='line'>203.208.46.200    m.google.com.hk
</span><span class='line'>203.208.46.200    maps.google.com.hk
</span><span class='line'>203.208.46.200    news.google.com.hk
</span><span class='line'>203.208.46.200    picasaweb.google.com.hk
</span><span class='line'>203.208.46.200    plus.url.google.com.hk
</span><span class='line'>203.208.46.200    scholar.google.com.hk
</span><span class='line'>203.208.46.200    toolbar.google.com.hk
</span><span class='line'>203.208.46.200    toolbarqueries.google.com.hk
</span><span class='line'>203.208.46.200    translate.google.com.hk
</span><span class='line'>203.208.46.200    translate.google.com.hk
</span><span class='line'>203.208.46.200    wenda.google.com.hk
</span><span class='line'>203.208.46.200    www.google.com.hk
</span><span class='line'>203.208.46.200    accounts.blogger.com
</span><span class='line'>203.208.46.200    android.googlesource.com
</span><span class='line'>203.208.46.200    auth.keyhole.com
</span><span class='line'>203.208.46.200    chrome.angrybirds.com
</span><span class='line'>203.208.46.200    developer.android.com
</span><span class='line'>203.208.46.200    domains.googlesyndication.com
</span><span class='line'>203.208.46.200    earthengine.googlelabs.com
</span><span class='line'>203.208.46.200    feeds.feedburner.com
</span><span class='line'>203.208.46.200    g.co
</span><span class='line'>203.208.46.200    goo.gl
</span><span class='line'>203.208.46.162    listen.googlelabs.com
</span><span class='line'>203.208.46.200    m.googlemail.com
</span><span class='line'>203.208.46.200    market.android.com
</span><span class='line'>203.208.46.163    ngrams.googlelabs.com
</span><span class='line'>173.194.37.99 panoramio.com
</span><span class='line'>203.208.46.222    smarthosts.googlecode.com
</span><span class='line'>203.208.46.222    ssl.google-analytics.com
</span><span class='line'>173.194.76.128    static.panoramio.com
</span><span class='line'>203.208.46.200    www.blogger.com
</span><span class='line'>203.208.46.200    www.googleadservices.com
</span><span class='line'>203.208.46.222    www.google-analytics.com
</span><span class='line'>203.208.46.200    www.googlelabs.com
</span><span class='line'>203.208.46.222    www.googlesource.com
</span><span class='line'>173.194.37.99 www.panoramio.com
</span><span class='line'>203.208.46.200    plus.google.com
</span><span class='line'>203.208.46.200    plus.url.google.com
</span><span class='line'>203.208.46.200    plusone.google.com
</span><span class='line'><span class="c">#Google Services END</span>
</span><span class='line'><span class="c">#Facebook Start</span>
</span><span class='line'>173.252.112.28    api-read.facebook.com
</span><span class='line'>173.252.112.28    api.facebook.com
</span><span class='line'>173.252.112.28    apps.facebook.com
</span><span class='line'>61.213.189.98 b.static.ak.facebook.com
</span><span class='line'>61.213.189.120    b.static.ak.fbcdn.net
</span><span class='line'>66.220.145.63 bigzipfiles.facebook.com
</span><span class='line'>61.213.189.113    creative.ak.fbcdn.net
</span><span class='line'>66.152.103.74 external.ak.fbcdn.net
</span><span class='line'>66.220.149.88 c.facebook.com
</span><span class='line'>69.171.227.26 chat.facebook.com
</span><span class='line'>66.220.147.96 check4.facebook.com
</span><span class='line'>184.31.111.139    connect.facebook.net
</span><span class='line'>69.171.227.19 creativeupload.facebook.com
</span><span class='line'>69.171.240.99 d.facebook.com
</span><span class='line'>173.252.100.17    developers.facebook.com
</span><span class='line'>66.220.149.90 error.facebook.com
</span><span class='line'>173.252.100.18    facebook.com
</span><span class='line'>61.213.189.113    fbcdn.net
</span><span class='line'>64.213.102.26 fbcdn-profile-a.akamaihd.net
</span><span class='line'>173.223.232.67    fbcdn-sphotos-a.akamaihd.net
</span><span class='line'>173.252.112.28    graph.facebook.com
</span><span class='line'>66.220.151.33 hphotos-ak-snc1.facebook.com
</span><span class='line'>66.220.151.33 hphotos-ak-snc3.facebook.com
</span><span class='line'>69.171.240.10 hphotos-ash4.fbcdn.net
</span><span class='line'>69.63.183.200 hphotos-pao1.fbcdn.net
</span><span class='line'>66.220.151.33 hphotos-snc1.fbcdn.net
</span><span class='line'>66.220.151.32 hphotos-snc3.fbcdn.net
</span><span class='line'>66.220.151.22 hphotos-snc6.fbcdn.net
</span><span class='line'>69.171.227.24 hphotos-snc7.fbcdn.net
</span><span class='line'>66.220.144.43 ldap.thefacebook.com
</span><span class='line'>173.252.100.25    m.facebook.com
</span><span class='line'>66.220.149.96 o.facebook.com
</span><span class='line'>173.252.112.28    orcart.facebook.com
</span><span class='line'>69.171.245.18 photos-ak-ash1.facebook.com
</span><span class='line'>69.171.245.18 photos-ash1.facebook.com
</span><span class='line'>66.220.149.90 pixel.facebook.com
</span><span class='line'>118.214.190.105   profile.ak.facebook.com
</span><span class='line'>61.213.189.114    profile.ak.fbcdn.net
</span><span class='line'>69.171.247.22 s-static.facebook.com
</span><span class='line'>61.213.189.113    s-hprofile-sf2p.fbcdn.net
</span><span class='line'>184.26.194.110    s-static.ak.facebook.com
</span><span class='line'>23.5.157.177  s-static.ak.fbcdn.net
</span><span class='line'>69.171.227.30 secure-media.facebook.com
</span><span class='line'>69.171.227.30 secure-media.fbcdn.net
</span><span class='line'>66.220.149.96 ssl.facebook.com
</span><span class='line'>69.171.247.38 ssl.connect.facebook.com
</span><span class='line'>69.63.189.76  star.facebook.com
</span><span class='line'>61.213.189.98 static.ak.facebook.com
</span><span class='line'>65.32.34.136  static.ak.fbcdn.net
</span><span class='line'>69.171.229.17 upload.facebook.com
</span><span class='line'>66.220.144.41 vpn.tfbnw.net
</span><span class='line'>120.29.145.50 vthumb.ak.fbcdn.net
</span><span class='line'>66.220.151.31 vupload.facebook.com
</span><span class='line'>69.171.225.31 www.connect.facebook.com
</span><span class='line'>173.252.112.28    www.facebook.com
</span><span class='line'>173.252.112.28    zh-CN.facebook.com
</span><span class='line'><span class="c">#Facebook End</span>
</span><span class='line'><span class="c">#Flickr START</span>
</span><span class='line'>98.136.43.76  geo.yahoo.com
</span><span class='line'>68.142.250.161    l.yimg.com
</span><span class='line'>96.6.93.227   s.yimg.com
</span><span class='line'>98.137.88.88  d.yimg.com
</span><span class='line'>68.142.196.57 c5.ah.yahoo.com
</span><span class='line'>124.108.120.124   sa.edit.yahoo.com
</span><span class='line'>66.163.168.247    open.login.yahoo.com
</span><span class='line'>124.108.97.193    login.yahoo.com
</span><span class='line'>209.191.92.115    edit.yahoo.com
</span><span class='line'>209.191.121.31    up.flickr.com
</span><span class='line'>209.191.105.102   adjax.flickr.yahoo.com
</span><span class='line'>204.0.5.35    content.yieldmanager.edgesuite.net
</span><span class='line'>204.0.5.34    us.js2.yimg.com
</span><span class='line'><span class="c">#data from HostsX</span>
</span><span class='line'>68.142.214.24 flickr.com
</span><span class='line'>66.196.66.157 www.flickr.com
</span><span class='line'>68.142.214.43 static.flickr.com
</span><span class='line'>77.238.160.184    static.flickr.com
</span><span class='line'>209.191.105.102   adjax.flickr.yahoo.com
</span><span class='line'>68.142.214.43 farm1.staticflickr.com
</span><span class='line'>68.142.214.43 mud.farm1.staticflickr.com
</span><span class='line'>69.147.90.159 farm2.staticflickr.com
</span><span class='line'>69.147.90.159 sp1.farm2.staticflickr.com
</span><span class='line'>77.238.160.184    farm3.staticflickr.com
</span><span class='line'>98.137.205.236    bf1.farm3.staticflickr.com
</span><span class='line'>216.39.54.34  gq1.farm3.staticflickr.com
</span><span class='line'>69.147.90.215 sp1.farm3.staticflickr.com
</span><span class='line'>76.13.18.77   farm4.staticflickr.com
</span><span class='line'>76.13.18.77   ac4.farm4.staticflickr.com
</span><span class='line'>67.195.19.62  gq1.farm4.staticflickr.com
</span><span class='line'>76.13.18.79   farm5.staticflickr.com
</span><span class='line'>67.195.19.65  gq1.farm5.staticflickr.com
</span><span class='line'>98.136.171.208    farm6.staticflickr.com
</span><span class='line'>98.139.21.45  bf1.farm6.staticflickr.com
</span><span class='line'>98.136.171.208    gq1.farm6.staticflickr.com
</span><span class='line'>98.138.250.88 farm7.staticflickr.com
</span><span class='line'>98.139.235.135    bf1.farm7.staticflickr.com
</span><span class='line'>98.138.250.88 ne1.farm7.staticflickr.com
</span><span class='line'><span class="c">#Flickr END</span>
</span><span class='line'><span class="c">#Twitter START</span>
</span><span class='line'>199.16.156.18 twitter.com
</span><span class='line'>199.16.156.18 mobile.twitter.com
</span><span class='line'>199.16.156.18 api.twitter.com
</span><span class='line'>199.16.156.47 pic.twitter.com
</span><span class='line'>199.59.148.136    stream.twitter.com
</span><span class='line'>199.59.148.137    sitestream.twitter.com
</span><span class='line'>199.59.148.135    betastream.twitter.com
</span><span class='line'>199.59.148.148    upload.twitter.com
</span><span class='line'>199.59.149.137    dev.twitter.com
</span><span class='line'>199.59.149.91 pay.twitter.com
</span><span class='line'>199.59.148.149    urls-real.api.twitter.com
</span><span class='line'>199.16.156.81 userstream.twitter.com
</span><span class='line'>199.16.156.12 support.twitter.com
</span><span class='line'><span class="c">#199.59.148.210   t.co</span>
</span><span class='line'>69.58.188.34  bitly.com
</span><span class='line'>208.87.33.151 api.mobilepicture.com
</span><span class='line'>199.59.148.16 a0.twimg.com
</span><span class='line'>199.59.148.16 a1.twimg.com
</span><span class='line'>199.59.148.16 p.twimg.com
</span><span class='line'>184.169.75.33 si0.twimg.com
</span><span class='line'>184.169.75.33 si1.twimg.com
</span><span class='line'>184.169.75.33 si2.twimg.com
</span><span class='line'>184.169.75.33 si3.twimg.com
</span><span class='line'>184.169.75.33 si4.twimg.com
</span><span class='line'>184.169.75.33 si5.twimg.com
</span><span class='line'>199.16.156.77 image-proxy-origin.twimg.com
</span><span class='line'>209.17.70.144 oi40.tinypic.com
</span><span class='line'>209.17.70.143 oi41.tinypic.com
</span><span class='line'>209.17.70.143 oi42.tinypic.com
</span><span class='line'>209.17.70.143 oi43.tinypic.com
</span><span class='line'>209.17.70.143 oi44.tinypic.com
</span><span class='line'>209.17.70.143 oi45.tinypic.com
</span><span class='line'>209.17.70.143 oi46.tinypic.com
</span><span class='line'>209.17.70.143 oi47.tinypic.com
</span><span class='line'>209.17.70.143 oi48.tinypic.com
</span><span class='line'>209.17.70.143 oi49.tinypic.com
</span><span class='line'>209.17.70.143 oi50.tinypic.com
</span><span class='line'>209.17.70.144 oi51.tinypic.com
</span><span class='line'>209.17.70.144 oi52.tinypic.com
</span><span class='line'>209.17.70.144 oi53.tinypic.com
</span><span class='line'>209.17.70.144 oi54.tinypic.com
</span><span class='line'>209.17.70.144 oi55.tinypic.com
</span><span class='line'>209.17.70.144 oi56.tinypic.com
</span><span class='line'>50.97.168.42  web1.twitpic.com
</span><span class='line'>50.23.200.233 web10.twitpic.com
</span><span class='line'>50.97.168.43  web2.twitpic.com
</span><span class='line'>50.97.168.43  web3.twitpic.com
</span><span class='line'>50.97.168.40  web4.twitpic.com
</span><span class='line'>50.97.168.41  web5.twitpic.com
</span><span class='line'>50.23.200.231 web6.twitpic.com
</span><span class='line'>50.23.200.232 web7.twitpic.com
</span><span class='line'>50.23.200.229 web8.twitpic.com
</span><span class='line'>50.23.200.228 web9.twitpic.com
</span><span class='line'>174.37.33.172 m1.twitpic.com
</span><span class='line'>50.23.200.230 twitpic.com
</span><span class='line'>208.94.0.61   a.yfrog.com
</span><span class='line'>208.94.0.61   yfrog.com
</span><span class='line'>208.94.0.61   www.yfrog.com
</span><span class='line'><span class="c">#Twitter END</span>
</span><span class='line'><span class="c">#Adobe Activation START</span>
</span><span class='line'>0.0.0.0   3dns-2.adobe.com
</span><span class='line'>0.0.0.0   3dns-3.adobe.com
</span><span class='line'>0.0.0.0   activate.adobe.com
</span><span class='line'>0.0.0.0   activate-sea.adobe.com
</span><span class='line'>0.0.0.0   activate-sjc0.adobe.com
</span><span class='line'>0.0.0.0   adobe-dns.adobe.com
</span><span class='line'>0.0.0.0   adobe-dns-2.adobe.com
</span><span class='line'>0.0.0.0   adobe-dns-3.adobe.com
</span><span class='line'>0.0.0.0   ereg.adobe.com
</span><span class='line'>0.0.0.0   hl2rcv.adobe.com
</span><span class='line'>0.0.0.0   practivate.adobe.com
</span><span class='line'>0.0.0.0   wip3.adobe.com
</span><span class='line'>0.0.0.0   activate.wip3.adobe.com
</span><span class='line'>0.0.0.0   ereg.wip3.adobe.com
</span><span class='line'>0.0.0.0   wwis-dubc1-vip60.adobe.com
</span><span class='line'><span class="c">#Adobe Activation END</span>
</span><span class='line'><span class="c">#YouTube START</span>
</span><span class='line'>203.208.46.206    accounts.youtube.com
</span><span class='line'>203.208.46.206    apiblog.youtube.com
</span><span class='line'>203.208.46.206    help.youtube.com
</span><span class='line'>203.208.46.206    i.ytimg.com
</span><span class='line'>203.208.46.206    i1.ytimg.com
</span><span class='line'>203.208.46.206    i2.ytimg.com
</span><span class='line'>203.208.46.206    i3.ytimg.com
</span><span class='line'>203.208.46.206    i4.ytimg.com
</span><span class='line'>203.208.46.206    insight.youtube.com
</span><span class='line'>203.208.46.206    m.youtube.com
</span><span class='line'>203.208.46.206    s.ytimg.com
</span><span class='line'>203.208.46.206    www.youtube.com
</span><span class='line'>203.208.46.206    ytimg.l.google.com
</span><span class='line'><span class="c">#YouTube END</span>
</span><span class='line'><span class="c">#GitHub START</span>
</span><span class='line'>204.232.175.78    documentcloud.github.com
</span><span class='line'>207.97.227.239    github.com
</span><span class='line'>204.232.175.94    gist.github.com
</span><span class='line'>107.20.136.254    help.github.com
</span><span class='line'>207.97.227.252    nodeload.github.com
</span><span class='line'>199.27.76.130 raw.github.com
</span><span class='line'>107.22.3.110  status.github.com
</span><span class='line'>204.232.175.78    training.github.com
</span><span class='line'>207.97.227.243    www.github.com
</span><span class='line'><span class="c">#GitHub END</span>
</span><span class='line'><span class="c">#Feedly START</span>
</span><span class='line'>173.194.79.141    feedly-beta.appspot.com
</span><span class='line'>173.194.74.121    s3.feedly.com
</span><span class='line'><span class="c">#Feedly END</span>
</span><span class='line'><span class="c">#Others START</span>
</span><span class='line'>38.229.72.14  www.torproject.org
</span><span class='line'><span class="c">#Others END</span>
</span></code></pre></td></tr></table></div></figure>


<blockquote><p><strong>注意</strong>：当然，也可以自己找ip;方法：<strong>ping</strong>对应的网站，获取相应的ip，能通就可以用&hellip;</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Nosql简介]]></title>
    <link href="http://TsaiKoga.github.com/blog/2013/10/15/nosqljian-jie/"/>
    <updated>2013-10-15T13:21:00+08:00</updated>
    <id>http://TsaiKoga.github.com/blog/2013/10/15/nosqljian-jie</id>
    <content type="html"><![CDATA[<h4>背景：</h4>

<p>  众所周知，随着社交网络，网络视频，网络游戏的使用，网络资料量呈现爆炸性增长；这时，大数据时代出现。
业界总结出大数据的<strong>四个特点(4V)：Volumn(数据体量大), Velocity(价值密度低), Variety(类型繁多), Veracity(处理速度快)</strong>。</p>

<p>  普通关系数据库不合适处理这样庞大的数据。为了弥补关系型数据库的不足，各种各样的NoSQL数据库应运而生。</p>

<blockquote><p>接下来说说关系数据库的不足：</p>

<p>  因为它毕竟是一个通用型的数据库，并不能完全适应所有的用途。具体来说它并不擅长以下处理：</p>

<ol>
<li>大量数据的写入处理</li>
<li>为有数据更新的表做索引或表结构（schema）变更</li>
<li>字段不固定时应用</li>
<li>对简单查询需要快速返回结果的处理</li>
</ol>
</blockquote>

<hr />

<h4>为什么使用Nosql：</h4>

<p>  Nosql是“<strong>Not Only SQL</strong>”的缩写,它的意义是：适用关系型数据库的时候就使用关系型数据库，不适用的时候也没有必要非使用关系型数据库不可，可以考虑使用更加合适的数据存储。
不像关系型数据库，相对地，NoSQL数据库只应用在<strong>特定领域</strong>，基本上不进行复杂的处理，但它恰恰弥补了之前所列举的关系型数据库的不足之处。</p>

<p> <strong>优点：</strong></p>

<ol>
<li><p>易于分散和处理：</p>

<blockquote><p>关系型数据库并不擅长大量数据的写入处理。
原本关系型数据库就是<strong>以JOIN为前提</strong>的，就是说，各个数据之间存在关联是关系型数据库得名的主要原因。
为了进行JOIN处理，关系型数据库不得不把<strong>数据存储在同一个服务器内</strong>，这不利于数据的分散。</p>

<p>NoSQL数据库原本就<strong>不支持JOIN处理</strong>，各个<strong>数据都是独立设计</strong>的，很容易把数据分散到多个服务器上。
由于数据被分散到了多个服务器上，减少了每个服务器上的数据量，即使要进行大量数据的写入操作，处理起来也更加容易。同理，数据的读入操作当然也同样容易。</p></blockquote></li>
<li><p>提升性能和增大规模：</p>

<blockquote><p>想要使服务器能够轻松地处理更大量的数据：</p>

<ol>
<li><strong>提升性能：</strong>提升性能指的就是通过提升现行服务器自身的性能来提高处理能力。程序方面也不需要进行变更，但需要一些费用。若要购买<strong>性能翻倍</strong>的服务器。</li>
<li><strong>增大规模：</strong>使用<strong>多台廉价的服务器</strong>来提高处理能力。它需要对程序进行变更，但由于使用廉价的服务器，可以控制成本。另外，以后只要依葫芦画瓢增加廉价服务器的数量就可以了。</li>
</ol>
</blockquote></li>
</ol>


<p>注意： <em>NoSQL数据库基本上来说为了“使大量数据的写入处理更加容易（让增加服务器数量更容易）”而设计的。但实际上NoSQL数据库还有各种各样的特点，如果能够恰当地利用这些特点将会是非常有帮助。</em></p>

<hr />

<h3>Nosql数据库：</h3>

<p>  NoSQL的官方网上显示现在的Nosql数据库有122种之多。其中存在着“key-value存储”、“文档型数据库”、“列存储数据库”等种类</p>

<p><img src="http://TsaiKoga.github.com/images/posts/2013-10-17/nosql.gif" title="多种nosql数据库" alt="无法显示图片" /></p>

<ul>
<li><p>key-value存储：
<strong>最常见的NoSQL数据库</strong>，它的数据是以<strong>key-value的形式</strong>存储的。虽然它的处理速度非常快，但是基本上只能通过key的完全一致查询获取数据。根据数据的保存方式可以分为临时性、永久性和两者兼具三种。</p>

<ol>
<li><p>临时性：memcached属于这种类型。把所有数据都保存在<strong>内存中</strong></p>

<blockquote><ol>
<li> 在内存中保存数据</li>
<li>可以进行非常快速的保存和读取处理</li>
<li>数据有可能丢失</li>
</ol>
</blockquote></li>
<li><p> 永久性：Tokyo Tyrant、Flare、ROMA等属于这种类型。是把数据保存在<strong>硬盘上</strong>。</p>

<blockquote><ol>
<li>在硬盘上保存数据</li>
<li>可以进行非常快速的保存和读取处理（但无法与memcached相比）</li>
<li>数据不会丢失</li>
</ol>
</blockquote></li>
<li><p> 两者兼具： Redis属于这种类型。</p>

<blockquote><p>Redis<strong>首先把数据保存到内存</strong>中，在满足<strong>特定条件</strong>（默认是15分钟一次以上，5分钟内10个以上，1分钟内10000个以上的key发生变更）的时候将数据<strong>写入到硬盘</strong>中。
这样既确保了内存中数据的处理速度，又可以通过写入硬盘来保证数据的永久性。这种类型的数据库特别适合于处理数组类型的数据。</p>

<ul>
<li>同时在内存和硬盘上保存数据</li>
<li>可以进行非常快速的保存和读取处理</li>
<li>保存在硬盘上的数据不会消失（可以恢复）</li>
<li>适合于处理数组类型的数据</li>
</ul>
</blockquote></li>
</ol>
</li>
<li><p>面向文档的数据库：
  MongoDB、CouchDB属于这种类型。</p>

<p>  不定义表结构：面向文档的数据库具有以下特征：即使<strong>不定义表结构，也可以像定义了表结构一样使用</strong>。
  关系型数据库在<strong>变更表结构时</strong>比较费事，而且为了保持一致性还需修改程序。然而NoSQL数据库则可省去这些麻烦（通常程序都是正确的），确实是方便快捷。
  可以使用<strong>复杂的查询条件</strong>：面向文档的数据库可以通过复杂的查询条件来获取数据。虽然不具备事务处理和JOIN这些关系型数据库所具有的处理能力，但除此以外的其他处理基本上都能实现。这是非常容易使用的NoSQL数据库。</p>

<blockquote><ol>
<li>不需要定义表结构</li>
<li>可以利用复杂的查询条件（不具备事务处理和JOIN）</li>
</ol>
</blockquote></li>
<li><p>面向列的数据库：Cassandra、Hbase、HyperTable属于这种类型。</p>

<blockquote><p>普通的关系型数据库都是以<strong>行为单位</strong>来存储数据的，面向列的数据库是<strong>以列为单位</strong>来存储数据的。</p></blockquote></li>
</ul>


<p><em>注意：NoSQL不是为了替代SQL而出现的，它是一种替补方案，而不是解决方案的首选。</em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ubuntu下安装redis 及安全配置]]></title>
    <link href="http://TsaiKoga.github.com/blog/2013/10/15/ubuntuxia-an-zhuang-redis/"/>
    <updated>2013-10-15T10:02:00+08:00</updated>
    <id>http://TsaiKoga.github.com/blog/2013/10/15/ubuntuxia-an-zhuang-redis</id>
    <content type="html"><![CDATA[<h3>目录：</h3>

<h4><a href="#1">1.安装步骤</a></h4>

<h4><a href="#2">2.其他设置</a></h4>

<h4><a href="#3">3.Redis的安全配置</a></h4>

<h3 id='1'>安装步骤:</h3>


<hr />

<p>1.<strong>安装并编译redis:</strong></p>

<p>想安装redis，必须要有先决条件，使你安装更容易：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>sudo apt-get update
</span><span class='line'>sudo apt-get install build-essential
</span><span class='line'>sudo apt-get install tcl8.5
</span></code></pre></td></tr></table></div></figure>


<p>选择最新稳定版本：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>wget http://download.redis.io/releases/redis-stable.tar.gz
</span><span class='line'>tar xzf redis-stable.tar.gz
</span><span class='line'><span class="nb">cd </span>redis-stable
</span><span class='line'>make
</span><span class='line'>make <span class="nb">test</span> <span class="c"># 运行测试</span>
</span><span class='line'>sudo make install
</span></code></pre></td></tr></table></div></figure>


<blockquote><p><em>由下图自动生成的代码可知：这时Redis 的可执行文件被放到了/usr/local/bin</em></p></blockquote>

<p><img src="http://TsaiKoga.github.com/images/posts/2013-10-15/redis1.png" title="生成代码" alt="redis" /></p>

<p>2.<strong> 让redis成为后台驻留程序： </strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nb">cd </span>utils
</span><span class='line'>sudo ./install_server.sh
</span></code></pre></td></tr></table></div></figure>


<p>3.<strong> 启动服务并验证： </strong></p>

<p>6379是redis的默认端口</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>sudo service redis_6379 start
</span><span class='line'>sudo service redis_6379 stop
</span></code></pre></td></tr></table></div></figure>


<p>4.<strong> 查看是否成功启动： </strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>   ps -ef | grep redis
</span></code></pre></td></tr></table></div></figure>


<p>5.<strong> 测试set方法和get方法： </strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$redis</span>-cli
</span><span class='line'>redis&gt; <span class="nb">set </span>foo bar
</span><span class='line'>OK
</span><span class='line'>redis&gt; get foo
</span><span class='line'><span class="s2">&quot;bar&quot;</span>
</span></code></pre></td></tr></table></div></figure>




<br/>


<br/>




<h3 id="2"> 其他设置：</h3>


<hr />

<h4>设置开机自动启动，关机自动关闭：</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>sudo update-rc.d redis_6379 defaults
</span></code></pre></td></tr></table></div></figure>


<h4>初始化用户和日志路径：</h4>

<p>第一次启动Redis前，建议为Redis单独建立一个用户，并新建data和日志文件夹</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>sudo useradd redis
</span><span class='line'>sudo mkdir -p /var/lib/redis
</span><span class='line'>sudo mkdir -p /var/log/redis
</span><span class='line'>sudo chown redis.redis /var/lib/redis
</span><span class='line'>sudo chown redis.redis /var/log/redis
</span></code></pre></td></tr></table></div></figure>




<br/>


<br/>




<h3 id="3"> Redis的安全配置：</h3>


<hr />

<p>这里不得不说一下，如果你在服务器上搭建redis，一定要对redis进行安全设置，因为我部署的网站，就是因为没有安全配置而被攻击。</p>

<p>1.<strong> 绑定本机 IP </strong></p>

<p>默认redis服务器只会让localhost访问，如果你更新了配置文件让其他地方也可以连入redis，那就非常危险，你需要：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>sudo vim /etc/redis/redis.conf
</span><span class='line'><span class="nb">bind </span>127.0.0.1 <span class="c"># 将此行解除注释，如果没有此行，那就加上这一行</span>
</span></code></pre></td></tr></table></div></figure>




<br/>


<p>2.<strong> 配置Redis密码 </strong>
编辑redis的配置文件： redis.conf
将下面这一行取消注释，开启密码验证功能</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="c"># requirepass foobared</span>
</span></code></pre></td></tr></table></div></figure>


<p>foobared太简单了，我们需要复杂的密码；下面提供一个命令可以生成密码：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nb">echo</span> <span class="s2">&quot;foo&quot;</span> | sha256sum
</span></code></pre></td></tr></table></div></figure>


<p>他会输出如下密码：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>b5bb9d8014a0f9b1d61e21e796d78dccdf1352f23cd32812f4850b878ae4944c
</span></code></pre></td></tr></table></div></figure>


<p>黏贴到requirepass后面即可。如果这个命令没有用，你可能需要安装<strong> apg </strong> 或者 <strong> pwgen </strong>工具来帮助你生成密码。</p>

<p>更新完密码，请重启redis：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>sudo service redis-server restart
</span></code></pre></td></tr></table></div></figure>


<p>进入redis，然后输入密码验证操作：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>redis-cli
</span><span class='line'>auth your_redis_password
</span></code></pre></td></tr></table></div></figure>




<br/>


<p>3.<strong> 重新命名命令</strong></p>

<p>redis允许你重新对命令进行命名或禁用；
其中有些命令比较危险，例如：<strong>  FLUSHDB, FLUSHALL, KEYS, PEXPIRE, DEL, CONFIG, SHUTDOWN, BGREWRITEAOF, BGSAVE, SAVE, SPOP, SREM, RENAME 和 DEBUG</strong></p>

<p>你可以自己选择要禁用还是重命名：</p>

<p>禁用：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="c"># It is also possible to completely kill a command by renaming it into</span>
</span><span class='line'><span class="c"># an empty string:</span>
</span><span class='line'><span class="c">#</span>
</span><span class='line'>rename-command FLUSHDB <span class="s2">&quot;&quot;</span>
</span><span class='line'>rename-command FLUSHALL <span class="s2">&quot;&quot;</span>
</span><span class='line'>rename-command DEBUG <span class="s2">&quot;&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>重命名：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>rename-command CONFIG <span class="s2">&quot;&quot;</span>
</span><span class='line'>rename-command SHUTDOWN SHUTDOWN_MENOT
</span><span class='line'>rename-command CONFIG ASC12_CONFIG
</span></code></pre></td></tr></table></div></figure>


<p>保存后，重启redis</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>sudo service redis-server restart
</span><span class='line'>redis-cli
</span></code></pre></td></tr></table></div></figure>


<p>如果你进行了第二步设置密码，这里你需要输入密码，
然后输入config命令看看是否有效：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>&gt; config get requirepass
</span></code></pre></td></tr></table></div></figure>


<p>将会输出：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="o">(</span>error<span class="o">)</span> ERR unknown <span class="nb">command</span> <span class="s1">&#39;config&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>输入重命名后的命令：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>asc12_config get requirepass
</span></code></pre></td></tr></table></div></figure>


<p>输出：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>1<span class="o">)</span> <span class="s2">&quot;requirepass&quot;</span>
</span><span class='line'>2<span class="o">)</span> <span class="s2">&quot;your_redis_password&quot;</span>
</span></code></pre></td></tr></table></div></figure>




<br/>


<p>4.<strong> 设置文件目录的访问权限 </strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>ls -l /var/lib | grep redis
</span></code></pre></td></tr></table></div></figure>


<p>输出：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>drwxr-xr-x 2 redis   redis   4096 Aug  6 09:32 redis
</span></code></pre></td></tr></table></div></figure>


<p>看到redis数据目录的权限属于redis所有，这非常好，但是那部分不是文件夹的权限，文件夹的是755，我们需要把它设置成770</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>sudo chmod 700 /var/lib/redis
</span></code></pre></td></tr></table></div></figure>


<p>接下来我们来看看配置文件redis.conf</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>ls -l /etc/redis/redis.conf
</span><span class='line'>-rw-r--r-- 1 root root 30176 Jan 14  2014 /etc/redis/redis.conf
</span></code></pre></td></tr></table></div></figure>


<p>他是644，我们需要做如下修改：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>sudo chown redis:root /etc/redis/redis.conf
</span><span class='line'>sudo chmod 600 /etc/redis/redis.conf
</span></code></pre></td></tr></table></div></figure>


<p>最后重启redis服务：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>sudo service redis-server restart
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
</feed>
