<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Nosql | TsaiKoga Blog]]></title>
  <link href="http://TsaiKoga.github.com/blog/categories/nosql/atom.xml" rel="self"/>
  <link href="http://TsaiKoga.github.com/"/>
  <updated>2018-04-30T15:37:44+08:00</updated>
  <id>http://TsaiKoga.github.com/</id>
  <author>
    <name><![CDATA[TsaiKoga]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Nosql简介]]></title>
    <link href="http://TsaiKoga.github.com/blog/2013/10/15/nosqljian-jie/"/>
    <updated>2013-10-15T13:21:00+08:00</updated>
    <id>http://TsaiKoga.github.com/blog/2013/10/15/nosqljian-jie</id>
    <content type="html"><![CDATA[<h4>背景：</h4>

<p>  众所周知，随着社交网络，网络视频，网络游戏的使用，网络资料量呈现爆炸性增长；这时，大数据时代出现。
业界总结出大数据的<strong>四个特点(4V)：Volumn(数据体量大), Velocity(价值密度低), Variety(类型繁多), Veracity(处理速度快)</strong>。</p>

<p>  普通关系数据库不合适处理这样庞大的数据。为了弥补关系型数据库的不足，各种各样的NoSQL数据库应运而生。</p>

<blockquote><p>接下来说说关系数据库的不足：</p>

<p>  因为它毕竟是一个通用型的数据库，并不能完全适应所有的用途。具体来说它并不擅长以下处理：</p>

<ol>
<li>大量数据的写入处理</li>
<li>为有数据更新的表做索引或表结构（schema）变更</li>
<li>字段不固定时应用</li>
<li>对简单查询需要快速返回结果的处理</li>
</ol>
</blockquote>

<hr />

<h4>为什么使用Nosql：</h4>

<p>  Nosql是“<strong>Not Only SQL</strong>”的缩写,它的意义是：适用关系型数据库的时候就使用关系型数据库，不适用的时候也没有必要非使用关系型数据库不可，可以考虑使用更加合适的数据存储。
不像关系型数据库，相对地，NoSQL数据库只应用在<strong>特定领域</strong>，基本上不进行复杂的处理，但它恰恰弥补了之前所列举的关系型数据库的不足之处。</p>

<p> <strong>优点：</strong></p>

<ol>
<li><p>易于分散和处理：</p>

<blockquote><p>关系型数据库并不擅长大量数据的写入处理。
原本关系型数据库就是<strong>以JOIN为前提</strong>的，就是说，各个数据之间存在关联是关系型数据库得名的主要原因。
为了进行JOIN处理，关系型数据库不得不把<strong>数据存储在同一个服务器内</strong>，这不利于数据的分散。</p>

<p>NoSQL数据库原本就<strong>不支持JOIN处理</strong>，各个<strong>数据都是独立设计</strong>的，很容易把数据分散到多个服务器上。
由于数据被分散到了多个服务器上，减少了每个服务器上的数据量，即使要进行大量数据的写入操作，处理起来也更加容易。同理，数据的读入操作当然也同样容易。</p></blockquote></li>
<li><p>提升性能和增大规模：</p>

<blockquote><p>想要使服务器能够轻松地处理更大量的数据：</p>

<ol>
<li><strong>提升性能：</strong>提升性能指的就是通过提升现行服务器自身的性能来提高处理能力。程序方面也不需要进行变更，但需要一些费用。若要购买<strong>性能翻倍</strong>的服务器。</li>
<li><strong>增大规模：</strong>使用<strong>多台廉价的服务器</strong>来提高处理能力。它需要对程序进行变更，但由于使用廉价的服务器，可以控制成本。另外，以后只要依葫芦画瓢增加廉价服务器的数量就可以了。</li>
</ol>
</blockquote></li>
</ol>


<p>注意： <em>NoSQL数据库基本上来说为了“使大量数据的写入处理更加容易（让增加服务器数量更容易）”而设计的。但实际上NoSQL数据库还有各种各样的特点，如果能够恰当地利用这些特点将会是非常有帮助。</em></p>

<hr />

<h3>Nosql数据库：</h3>

<p>  NoSQL的官方网上显示现在的Nosql数据库有122种之多。其中存在着“key-value存储”、“文档型数据库”、“列存储数据库”等种类</p>

<p><img src="/images/posts/2013-10-17/nosql.gif" title="多种nosql数据库" alt="无法显示图片" /></p>

<ul>
<li><p>key-value存储：
<strong>最常见的NoSQL数据库</strong>，它的数据是以<strong>key-value的形式</strong>存储的。虽然它的处理速度非常快，但是基本上只能通过key的完全一致查询获取数据。根据数据的保存方式可以分为临时性、永久性和两者兼具三种。</p>

<ol>
<li><p>临时性：memcached属于这种类型。把所有数据都保存在<strong>内存中</strong></p>

<blockquote><ol>
<li> 在内存中保存数据</li>
<li>可以进行非常快速的保存和读取处理</li>
<li>数据有可能丢失</li>
</ol>
</blockquote></li>
<li><p> 永久性：Tokyo Tyrant、Flare、ROMA等属于这种类型。是把数据保存在<strong>硬盘上</strong>。</p>

<blockquote><ol>
<li>在硬盘上保存数据</li>
<li>可以进行非常快速的保存和读取处理（但无法与memcached相比）</li>
<li>数据不会丢失</li>
</ol>
</blockquote></li>
<li><p> 两者兼具： Redis属于这种类型。</p>

<blockquote><p>Redis<strong>首先把数据保存到内存</strong>中，在满足<strong>特定条件</strong>（默认是15分钟一次以上，5分钟内10个以上，1分钟内10000个以上的key发生变更）的时候将数据<strong>写入到硬盘</strong>中。
这样既确保了内存中数据的处理速度，又可以通过写入硬盘来保证数据的永久性。这种类型的数据库特别适合于处理数组类型的数据。</p>

<ul>
<li>同时在内存和硬盘上保存数据</li>
<li>可以进行非常快速的保存和读取处理</li>
<li>保存在硬盘上的数据不会消失（可以恢复）</li>
<li>适合于处理数组类型的数据</li>
</ul>
</blockquote></li>
</ol>
</li>
<li><p>面向文档的数据库：
  MongoDB、CouchDB属于这种类型。</p>

<p>  不定义表结构：面向文档的数据库具有以下特征：即使<strong>不定义表结构，也可以像定义了表结构一样使用</strong>。
  关系型数据库在<strong>变更表结构时</strong>比较费事，而且为了保持一致性还需修改程序。然而NoSQL数据库则可省去这些麻烦（通常程序都是正确的），确实是方便快捷。
  可以使用<strong>复杂的查询条件</strong>：面向文档的数据库可以通过复杂的查询条件来获取数据。虽然不具备事务处理和JOIN这些关系型数据库所具有的处理能力，但除此以外的其他处理基本上都能实现。这是非常容易使用的NoSQL数据库。</p>

<blockquote><ol>
<li>不需要定义表结构</li>
<li>可以利用复杂的查询条件（不具备事务处理和JOIN）</li>
</ol>
</blockquote></li>
<li><p>面向列的数据库：Cassandra、Hbase、HyperTable属于这种类型。</p>

<blockquote><p>普通的关系型数据库都是以<strong>行为单位</strong>来存储数据的，面向列的数据库是<strong>以列为单位</strong>来存储数据的。</p></blockquote></li>
</ul>


<p><em>注意：NoSQL不是为了替代SQL而出现的，它是一种替补方案，而不是解决方案的首选。</em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ubuntu下安装redis 及安全配置]]></title>
    <link href="http://TsaiKoga.github.com/blog/2013/10/15/ubuntuxia-an-zhuang-redis/"/>
    <updated>2013-10-15T10:02:00+08:00</updated>
    <id>http://TsaiKoga.github.com/blog/2013/10/15/ubuntuxia-an-zhuang-redis</id>
    <content type="html"><![CDATA[<h3>目录：</h3>

<h4><a href="#1">1.安装步骤</a></h4>

<h4><a href="#2">2.其他设置</a></h4>

<h4><a href="#3">3.Redis的安全配置</a></h4>

<h3 id='1'>安装步骤:</h3>


<hr />

<p>1.<strong>安装并编译redis:</strong></p>

<p>想安装redis，必须要有先决条件，使你安装更容易：</p>

<p>```sh</p>

<pre><code>sudo apt-get update
sudo apt-get install build-essential
sudo apt-get install tcl8.5
</code></pre>

<p>```</p>

<p>选择最新稳定版本：</p>

<p>``` sh</p>

<pre><code>wget http://download.redis.io/releases/redis-stable.tar.gz
tar xzf redis-stable.tar.gz
cd redis-stable
make
make test # 运行测试
sudo make install
</code></pre>

<p>```</p>

<blockquote><p><em>由下图自动生成的代码可知：这时Redis 的可执行文件被放到了/usr/local/bin</em></p></blockquote>

<p><img src="/images/posts/2013-10-15/redis1.png" title="生成代码" alt="redis" /></p>

<p>2.<strong> 让redis成为后台驻留程序： </strong></p>

<p>``` sh</p>

<pre><code>cd utils
sudo ./install_server.sh
</code></pre>

<p>```</p>

<p>3.<strong> 启动服务并验证： </strong></p>

<p>6379是redis的默认端口</p>

<p>``` sh</p>

<pre><code>sudo service redis_6379 start
sudo service redis_6379 stop
</code></pre>

<p>```</p>

<p>4.<strong> 查看是否成功启动： </strong></p>

<p>``` sh</p>

<pre><code>    ps -ef | grep redis
</code></pre>

<p>```
5.<strong> 测试set方法和get方法： </strong></p>

<p>``` sh</p>

<pre><code>$redis-cli
redis&gt; set foo bar
OK
redis&gt; get foo
"bar"
</code></pre>

<p>```</p>

<br/>


<br/>




<h3 id="2"> 其他设置：</h3>


<hr />

<h4>设置开机自动启动，关机自动关闭：</h4>

<p>``` sh</p>

<pre><code>sudo update-rc.d redis_6379 defaults
</code></pre>

<p>```</p>

<h4>初始化用户和日志路径：</h4>

<p>第一次启动Redis前，建议为Redis单独建立一个用户，并新建data和日志文件夹</p>

<p>``` sh</p>

<pre><code>sudo useradd redis
sudo mkdir -p /var/lib/redis
sudo mkdir -p /var/log/redis
sudo chown redis.redis /var/lib/redis
sudo chown redis.redis /var/log/redis
</code></pre>

<p>```</p>

<br/>


<br/>




<h3 id="3"> Redis的安全配置：</h3>


<hr />

<p>这里不得不说一下，如果你在服务器上搭建redis，一定要对redis进行安全设置，因为我部署的网站，就是因为没有安全配置而被攻击。</p>

<p>1.<strong> 绑定本机 IP </strong></p>

<p>默认redis服务器只会让localhost访问，如果你更新了配置文件让其他地方也可以连入redis，那就非常危险，你需要：</p>

<p>``` sh</p>

<pre><code>sudo vim /etc/redis/redis.conf
bind 127.0.0.1 # 将此行解除注释，如果没有此行，那就加上这一行
</code></pre>

<p>```</p>

<br/>


<p>2.<strong> 配置Redis密码 </strong>
编辑redis的配置文件： redis.conf
将下面这一行取消注释，开启密码验证功能</p>

<p>``` sh</p>

<pre><code># requirepass foobared
</code></pre>

<p>```</p>

<p>foobared太简单了，我们需要复杂的密码；下面提供一个命令可以生成密码：</p>

<p>``` sh</p>

<pre><code>echo "foo" | sha256sum
</code></pre>

<p>```</p>

<p>他会输出如下密码：</p>

<p>``` sh</p>

<pre><code>b5bb9d8014a0f9b1d61e21e796d78dccdf1352f23cd32812f4850b878ae4944c
</code></pre>

<p>```</p>

<p>黏贴到requirepass后面即可。如果这个命令没有用，你可能需要安装<strong> apg </strong> 或者 <strong> pwgen </strong>工具来帮助你生成密码。</p>

<p>更新完密码，请重启redis：
``` sh</p>

<pre><code>sudo service redis-server restart
</code></pre>

<p>```</p>

<p>进入redis，然后输入密码验证操作：</p>

<p>``` sh</p>

<pre><code>redis-cli    
auth your_redis_password
</code></pre>

<p>```</p>

<br/>


<p>3.<strong> 重新命名命令</strong></p>

<p>redis允许你重新对命令进行命名或禁用；
其中有些命令比较危险，例如：<strong>  FLUSHDB, FLUSHALL, KEYS, PEXPIRE, DEL, CONFIG, SHUTDOWN, BGREWRITEAOF, BGSAVE, SAVE, SPOP, SREM, RENAME 和 DEBUG</strong></p>

<p>你可以自己选择要禁用还是重命名：</p>

<p>禁用：</p>

<p>``` sh</p>

<pre><code># It is also possible to completely kill a command by renaming it into
# an empty string:
#
rename-command FLUSHDB ""
rename-command FLUSHALL ""
rename-command DEBUG ""
</code></pre>

<p>```</p>

<p>重命名：</p>

<p>``` sh</p>

<pre><code>rename-command CONFIG ""
rename-command SHUTDOWN SHUTDOWN_MENOT
rename-command CONFIG ASC12_CONFIG
</code></pre>

<p>```</p>

<p>保存后，重启redis</p>

<p>``` sh</p>

<pre><code>sudo service redis-server restart
redis-cli
</code></pre>

<p>```
如果你进行了第二步设置密码，这里你需要输入密码，
然后输入config命令看看是否有效：</p>

<p>``` sh</p>

<pre><code>&gt; config get requirepass
</code></pre>

<p>```</p>

<p>将会输出：</p>

<p>``` sh</p>

<pre><code>(error) ERR unknown command 'config'
</code></pre>

<p>```</p>

<p>输入重命名后的命令：</p>

<p>``` sh</p>

<pre><code>asc12_config get requirepass
</code></pre>

<p>```</p>

<p>输出：</p>

<p>``` sh</p>

<pre><code>1) "requirepass"
2) "your_redis_password"
</code></pre>

<p>```</p>

<br/>


<p>4.<strong> 设置文件目录的访问权限 </strong></p>

<p>``` sh</p>

<pre><code>ls -l /var/lib | grep redis
</code></pre>

<p>```</p>

<p>输出：</p>

<p><code>sh
drwxr-xr-x 2 redis   redis   4096 Aug  6 09:32 redis
</code></p>

<p>看到redis数据目录的权限属于redis所有，这非常好，但是那部分不是文件夹的权限，文件夹的是755，我们需要把它设置成770</p>

<p>``` sh</p>

<pre><code>sudo chmod 700 /var/lib/redis
</code></pre>

<p>```</p>

<p>接下来我们来看看配置文件redis.conf</p>

<p>``` sh</p>

<pre><code>ls -l /etc/redis/redis.conf
-rw-r--r-- 1 root root 30176 Jan 14  2014 /etc/redis/redis.conf
</code></pre>

<p>```
他是644，我们需要做如下修改：</p>

<p>``` sh</p>

<pre><code>sudo chown redis:root /etc/redis/redis.conf
sudo chmod 600 /etc/redis/redis.conf
</code></pre>

<p>```</p>

<p>最后重启redis服务：</p>

<p>``` sh</p>

<pre><code>sudo service redis-server restart
</code></pre>

<p>```</p>
]]></content>
  </entry>
  
</feed>
