<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Linux | TsaiKoga Blog]]></title>
  <link href="http://TsaiKoga.github.com/blog/categories/linux/atom.xml" rel="self"/>
  <link href="http://TsaiKoga.github.com/"/>
  <updated>2017-04-09T11:23:03+08:00</updated>
  <id>http://TsaiKoga.github.com/</id>
  <author>
    <name><![CDATA[TsaiKoga]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[PS 查看进程]]></title>
    <link href="http://TsaiKoga.github.com/blog/2014/04/23/ps-cha-kan-jin-cheng/"/>
    <updated>2014-04-23T13:53:00+08:00</updated>
    <id>http://TsaiKoga.github.com/blog/2014/04/23/ps-cha-kan-jin-cheng</id>
    <content type="html"><![CDATA[<p>如果你使用Linux进行操作，不可避免要接触ps命令，他可以显示进程。</p>

<p>首先，我们来介绍一下进程：</p>

<p>1.<strong> 进程 </strong></p>

<hr />

<p>linux上进程有5种状态:</p>

<blockquote><ol>
<li>运行(正在运行或在运行队列中等待)</li>
<li>中断(休眠中, 受阻, 在等待某个条件的形成或接受到信号)</li>
<li>不可中断(收到信号不唤醒和不可运行, 进程必须等待直到有中断发生)</li>
<li>僵死(进程已终止, 但进程描述符存在, 直到父进程调用wait4()系统调用后释放)</li>
<li>停止(进程收到SIGSTOP, SIGSTP, SIGTIN, SIGTOU信号后停止运行运行</li>
</ol>
</blockquote>

<br/>


<p>2.<strong> 常用的PS参数</strong></p>

<hr />

<p>1）ps a    显示现行终端机下的所有程序，包括其他用户的程序。</p>

<p>2）ps -A   显示所有程序。</p>

<p>3）ps c    列出程序时，显示每个程序真正的指令名称，而不包含路径，参数或常驻服务的标示。</p>

<p>4）ps -e   此参数的效果和指定"A"参数相同。</p>

<p>5）ps e    列出程序时，显示每个程序所使用的环境变量。</p>

<p>6）ps f    用ASCII字符显示树状结构，表达程序间的相互关系。</p>

<p>7）ps -H   显示树状结构，表示程序间的相互关系。</p>

<p>8）ps -N   显示所有的程序，除了执行ps指令终端机下的程序之外。</p>

<p>9）ps s    采用程序信号的格式显示程序状况。</p>

<p>10）ps S   列出程序时，包括已中断的子程序资料。</p>

<p>11）ps -t &lt;终端机编号> 　指定终端机编号，并列出属于该终端机的程序的状况。</p>

<p>12）ps u 　以用户为主的格式来显示程序状况。</p>

<p>13）ps x 　显示所有程序，不以终端机来区分。</p>

<p>14）ps -l  較長,較詳細的顯示該PID的信息</p>

<br/>


<p>3.<strong> 最常用的ps aux 命令解析 </strong></p>

<hr />

<p>``` sh</p>

<h1>ps aux |more</h1>

<pre><code>USER       PID        %CPU %MEM   VSZ  RSS  TTY                   STAT     START   TIME     COMMAND
root         1        0.0  0.0     4772  564 ?                     S        Sep22   0:03     init [3]
root         2        0.0  0.0     0    0        ?                 S        Sep22   0:03     [migration/0]
root         3        0.0  0.0     0    0        ?                 SN      Sep22   0:00     [ksoftirqd/0]
root         4        0.0  0.0     0    0        ?                 S        Sep22   0:02     [migration/1]
root         5        0.0  0.0     0    0        ?                 SN      Sep22   0:00     [ksoftirqd/1]
root         6        0.0  0.0     0    0        ?                 Ss+     Sep22   0:02     [migration/2]
root         7        0.0  0.0     0    0        ?                 SN      Sep22   0:00     [ksoftirqd/2]
root         8        0.0  0.0     0    0        ?                 S        Sep22   0:00     [migration/3]
root         9        0.0  0.0     0    0        ?                 SN      Sep22   0:00     [ksoftirqd/3]
root        10        0.0  0.0     0    0        ?                 S&lt;      Sep22    0:00     [migration/4]
</code></pre>

<p>```</p>

<p>上面的每一列代表的意思：</p>

<ol>
<li>USER 进程的属主；</li>
<li>PID   进程的ID；</li>
<li>PPID    父进程；</li>
<li>%CPU   进程占用的CPU百分比；</li>
<li>%MEM  占用内存的百分比；</li>
<li>NI        进程的NICE值，数值大，表示较少占用CPU时间；</li>
<li>VSZ     該进程使用的虚拟內存量（KB）；</li>
<li>RSS     該進程占用的固定內存量（KB）（驻留中页的数量）；</li>
<li>TTY     該進程在那個終端上運行（登陸者的終端位置），若與終端無關，則顯示（？）。若為pts/0等，則表示由網絡連接主機進程</li>
<li>WCHAN  當前進程是否正在進行，若為-表示正在進行；</li>
<li>START   該進程被觸發启动时间；</li>
<li>TIME      該进程實際使用CPU運行的时间；</li>
<li>COMMAND   命令的名称和参数；</li>
</ol>


<br/>


<h4>对于Stat的常见状态：</h4>

<p>D 无法中断的休眠状态（通常 IO 的进程）；</p>

<p>R 正在运行可中在队列中可过行的；</p>

<p>S 处于休眠状态；</p>

<p>T 停止或被追踪；</p>

<p>W 进入内存交换  （从内核2.6开始无效）；</p>

<p>X 死掉的进程   （基本很少見）；</p>

<p>Z 僵尸进程；</p>

<p>&lt; 优先级高的进程</p>

<p>N 优先级较低的进程</p>

<p>L 有些页被锁进内存；</p>

<p>s 进程的领导者（在它之下有子进程）；</p>

<p>l 多进程的（使用 CLONE_THREAD, 类似 NPTL pthreads）；</p>

<ul>
<li>位于后台的进程组；</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Linux用户和权限]]></title>
    <link href="http://TsaiKoga.github.com/blog/2013/11/07/linuxyong-hu-he-quan-xian/"/>
    <updated>2013-11-07T16:14:00+08:00</updated>
    <id>http://TsaiKoga.github.com/blog/2013/11/07/linuxyong-hu-he-quan-xian</id>
    <content type="html"><![CDATA[<p>Linux是一个多用户，多任务操作系统。这意味多个用户可以同时使用一个操作系统。虽然便利，但也带来了许多潜在的威胁。
为了解决这些安全性问题,Linux为用户设置了权限。</p>

<h2>用户</h2>

<p>Linxu系统规定了4中不类型的用户：
 1. 超级用户(root)
 2. 文件主(owner)
 3. 同组用户(group)
 4. 可以访问系统的其他用户(others)</p>

<p>用户具有3种不同的存取权限：
 1. 读&reg;;             二进制：100; 十进制：4
 2. 写(w);             二进制：010; 十进制：2
 3. 可执行或查询(x);   二进制：001; 十进制：1</p>

<hr />

<p>他们从左到右排列代表一个用户对文件或目录的存取权限。</p>

<p>可以使用 ls -d 查看目录文件的使用权限。如以下信息：（这些信息都包含在I节点，可以通过 ls -i/&mdash;inode 查看）</p>

<p>``` bash</p>

<pre><code>-rwxr-xr--  2  tsaikoga  group  198  Sep  8  14:06  ..
</code></pre>

<p>```</p>

<ol>
<li>第一个字段中第一个字符标识文件类型，有如下几种表示：</li>
<li>- 普通文件。</li>
<li>d 目录。</li>
<li>b 块设备。</li>
<li>c 字符设备。</li>
<li><p>l 符号链接文件。</p></li>
<li><p>随后9个字符是用户的存取权限:</p></li>
<li>前三个rwx代表可读，可写，可执行。十进制：7；</li>
<li>接着三个代表十进制: 5；</li>
<li>最后十进制为：4；</li>
<li>当为-时，代表没有权限；</li>
<li>当为 s 时，代表文件执行时，把该文件UID或GID赋予执行进程的UID（用户ID）或GID（组ID）；</li>
<li><p>当为 t 时，设置了粘着标志位（留在内存，不被换出）。如果该文件是目录，则在改目录的文件只能被root或文件主删除。如果是可执行文件，该文件执行后，指向其正文段的指针仍留在内存;这样再次执行时，系统能更快地装入文件。</p></li>
<li><p>表示文件链接数</p></li>
<li><p>文件主</p></li>
<li><p>文件所属的组</p></li>
<li><p>文件容量</p></li>
<li><p>修改日期</p></li>
<li><p>文件名</p></li>
</ol>


<hr />

<h2>改变文件权限</h2>

<p>可以通过两个命令改变文件权限：</p>

<ul>
<li><p>chmod
用于改变或设置文件或目录的存取权限。</p></li>
<li><p>chown
用于改变某个文件或目录的所有者或所属组。</p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ubuntu常用命令]]></title>
    <link href="http://TsaiKoga.github.com/blog/2013/10/23/ubuntuchang-yong-ming-ling/"/>
    <updated>2013-10-23T16:20:00+08:00</updated>
    <id>http://TsaiKoga.github.com/blog/2013/10/23/ubuntuchang-yong-ming-ling</id>
    <content type="html"><![CDATA[<p><img src="/images/posts/2013-10-23/ubuntu.jpg" title="ubuntu" alt="无法显示图片" /></p>

<h3>先介绍关于文件和目录的命令：</h3>

<blockquote><p>ls 列出当前目录文件（不包括隐含文件）</p>

<p>ls -a 列出当前目录文件（包括隐含文件）</p>

<p>ls -l 列出当前目录下文件的详细信息</p>

<p>cd .. 回当前目录的上一级目录</p>

<p>cd &ndash; 回上一次所在的目录</p>

<p>cd ~ 或 cd 回当前用户的宿主目录</p>

<p>mkdir 目录名 创建一个目录</p>

<p>rmdir 空目录名 删除一个空目录</p>

<p>rm 文件名 文件名 删除一个文件或多个文件</p>

<p>rm -rf 非空目录名 删除一个非空目录下的一切</p>

<p>mv 路经/文件 /经/文件移动相对路经下的文件到绝对路经下</p>

<p>mv 文件名 新名称 在当前目录下改名</p></blockquote>

<h3>再介绍用户的命令:</h3>

<blockquote><p>useradd 创建一个新的用户</p>

<p>  groupadd 组名 创建一个新的组</p>

<p>  passwd 用户名 为用户创建密码</p>

<p>  passwd -d用户名 删除用户密码也能登陆</p>

<p>  passwd -S用户名 查询账号密码</p>

<p>  usermod -l 新用户名 老用户名 为用户改名</p>

<p>  userdel–r 用户名 删除用户一切</p></blockquote>

<h3>查看系统信息的命令：</h3>

<blockquote><p>uname -a 查看内核版本</p>

<p>cat /etc/issue 查看ubuntu版本</p>

<p>lsusb 查看usb设备</p>

<p>sudo ethtool eth0 查看网卡状态</p>

<p>cat /proc/cpuinfo 查看cpu信息</p>

<p>lshw 查看当前硬件信息</p>

<p>sudo fdisk -l 查看磁盘信息</p>

<p>df -h 查看硬盘剩余空间</p>

<p>free -m 查看当前的内存使用情况</p>

<p>ps -A 查看当前有哪些进程</p></blockquote>

<h3>关于软件包操作的命令：</h3>

<blockquote><p>apt-cache search package 搜索包</p>

<p>  apt-cache show package 获取包的相关信息，如说明、大小、版本等</p>

<p>  sudo apt-get install package 安装包</p>

<p>  sudo apt-get install package &ndash; &ndash; reinstall 重新安装包</p>

<p>  sudo apt-get -f install 修复安装”-f = –fix-missing”</p>

<p>  sudo apt-get remove package 删除包</p>

<p>  sudo apt-get remove package &ndash; &ndash; purge 删除包，包括删除配置文件等</p>

<p>  sudo apt-get update 更新源</p>

<p>  sudo apt-get upgrade 更新已安装的包</p>

<p>  sudo apt-get dist-upgrade 升级系统</p>

<p>  sudo apt-get dselect-upgrade 使用 dselect 升级</p>

<p>  apt-cache depends package 了解使用依赖</p>

<p>  apt-cache rdepends package 是查看该包被哪些包依赖</p>

<p>  sudo apt-get build-dep package 安装相关的编译环境</p>

<p>  apt-get source package 下载该包的源代码</p>

<p>  sudo apt-get clean &amp;&amp; sudo apt-get autoclean 清理无用的包</p>

<p>  sudo apt-get check 检查是否有损坏的依赖</p>

<p>  清理所有软件缓存（即缓存在/var/cache/apt/archives目录里的deb包）</p>

<p>  sudo apt-get clean</p></blockquote>

<h3>最后讲几个比较重要，在实际操作中提供方便的命令：</h3>

<h4>find命令</h4>

<p>  find是最常见和最强大的查找命令，你可以用它找到任何你想找的文件。</p>

<p><strong>使用格式如下：</strong></p>

<p>``` bash</p>

<pre><code> $ find &lt;指定目录&gt; &lt;指定条件&gt; &lt;指定动作&gt;
</code></pre>

<p>```</p>

<ul>
<li><p>&lt;指定目录>： 所要搜索的目录及其所有子目录。默认为当前目录。</p></li>
<li><p>&lt;指定条件>： 所要搜索的文件的特征。</p></li>
<li><p>&lt;指定动作>： 对搜索结果进行特定的处理。</p></li>
</ul>


<p><strong>举例：</strong></p>

<p>``` bash</p>

<pre><code>$ find . -name 'my*' -ls        # 搜索当前目录中，所有文件名以my开头的文件，并显示它们的详细信息。
$ find . -type f -mmin -10    # 搜索当前目录中，所有过去10分钟中更新过的普通文件。如果不加-type f参数，则搜索普通文件+特殊文件+目录。
</code></pre>

<p>```</p>

<hr />

<h4>locate命令</h4>

<p>locate命令其实是"find -name"的另一种写法，但是要比后者快得多，原因在于它不搜索具体目录，而是搜索一个数据库（/var/lib/locatedb），这个数据库中含有本地所有文件信息。Linux系统自动创建这个数据库，并且每天自动更新一次，所以使用locate命令查不到最新变动过的文件。为了避免这种情况，可以在使用locate之前，先使用updatedb命令，手动更新数据库。</p>

<hr />

<h4>grep命令</h4>

<p>grep命令用于查找文件中的字符串。</p>

<p><strong>命令格式如下：</strong></p>

<p>``` bash</p>

<pre><code>grep [选项] 查找模式 [文件名1, 文件名2, ...]

grep [选项] [-e 查找模式|-f 文件][文件名1, 文件名2, ...]
</code></pre>

<p>```</p>

<blockquote><p>当然：最好用的参数</p>

<p>  -E 将查找模式解释成正则表达式</p>

<p>  -F 将查找模式解释成单纯的字符串</p>

<p>  -i &mdash;ignore-case 匹配比较时不区分字母的大小</p>

<p>  -R 以递归方式查询目录下所有子目录中的文件</p></blockquote>

<hr />

<h4>ack-grep命令</h4>

<p>grep命令加强。首先，我们先了解什么是ack？</p>

<blockquote><p>  <a href="http://betterthangrep.com">http://betterthangrep.com</a></p>

<p>  ack is a tool <strong>like grep</strong>, optimized for programmers</p>

<p>  is written purely in Perl 5,takes advantage of the power of Perl&rsquo;s regular expressions.</p></blockquote>

<p>ack诞生的目的就是要取代grep。</p>

<p>注意：ubuntu下要安装<strong>ack-grep</strong>，因为在debian系中，ack这个名字被其他的软件占用了。</p>

<p>``` bash</p>

<pre><code>sudo apt-get install ack-grep
</code></pre>

<p>```</p>

<hr />

<h4>netstat命令</h4>

<p> Netstat是在内核中访问网络及相关信息的程序，它能提供TCP连接，TCP和UDP监听，进程内存管理的相关报告。</p>

<p><strong>命令格式如下：</strong></p>

<p>``` bash</p>

<pre><code>netstat -tulpn        # 显示服务器进程
sudo netstat -antup   # 查看进程
ack-grep function     # 查找函数位置（必须在文件目录下）
</code></pre>

<p>```</p>

<hr />

<h4>crontab命令</h4>

<p>这个命令我非常喜欢，他是<strong>设置定时执行脚本或任务</strong>,可以用它来定时做一些事情。如定时周期性的备份网站数据库，并email发送到指定邮箱。</p>

<p>参数就几个很简单：</p>

<p>``` bash</p>

<pre><code>crontab -l # 显示现有任务条目 
crontab -r # 删除当前的任务 
crontab -e # 编辑任务单，一般使用 nano 编辑，如DH。
</code></pre>

<p>```</p>

<p><strong>时间参数：</strong></p>

<blockquote><p>15 * * * * : 每小时第15分执行1次</p>

<p>15,18 * * * * : 每小时第15和18分各执行1次</p>

<p>*/15 */2 * * *: 每隔15分钟执行1次</p>

<p>15 20 * * 6: 每周星期6的20：15执行1次</p></blockquote>

<hr />
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Linux的文件系统]]></title>
    <link href="http://TsaiKoga.github.com/blog/2013/10/22/linuxde-wen-jian-he-mu-lu/"/>
    <updated>2013-10-22T09:49:00+08:00</updated>
    <id>http://TsaiKoga.github.com/blog/2013/10/22/linuxde-wen-jian-he-mu-lu</id>
    <content type="html"><![CDATA[<hr />

<h3>文件系统：</h3>

<p>我们都知道Linux的文件系统层次结构是一棵树，以"/&ldquo;表示的为最上层的目录。</p>

<p><strong>example:</strong></p>

<p>Ubuntu文件系统示意图：</p>

<p><img src="/images/posts/2013-10-22/ubuntu_file_system.png" title="Ubuntu文件系统" alt="无法显示图片" /></p>

<hr />

<h4>定义:</h4>

<blockquote><p><strong>文件:</strong> 是文件系统中存储数据的一个命名<strong>对象</strong>。即使是一个<strong>空文件</strong>，它也包含<strong>用户数据</strong>，仍然为操作系统提供其他信息。</p>

<p><strong>目录:</strong> 其中包含许多文件项目的一类<strong>特殊文件</strong>。支持文件系统的层次结构。系统中每个文件都登记在一个目录中。</p>

<p><strong>子目录：</strong> 被包含在另一个目录中的目录。除了root目录以外，所有的目录都是子目录，并且有他们的父目录。<strong>root目录就作为自己的父目录</strong>。</p>

<p><strong>文件名：</strong> 用来标志文件的字符串，保存在一个<strong>目录文件项</strong>中。</p></blockquote>

<hr />

<h4>文件结构：</h4>

<p>文件的成分：无论文件是一个程序，一个文档，一个数据库，还是一个目录，操作系统都会赋予它如下所示的同样的结构：</p>

<ul>
<li><p><strong>文件索引</strong>：又称<strong>I节点</strong>，是文件系统结构中包含<strong>相应文件信息</strong>的<strong>一个记录</strong>。这些信息包括文件权限、文件主、文件大小等。</p></li>
<li><p><strong>数据</strong>： 文件的实际内容，可以是空，可以非常大，并且有自己的结构。</p>

<p>文件名规范：</p>

<blockquote><p>（1）除了写先<strong>（“/”）和空字符（ASCII字符“\0”）</strong>以外，文件名可以包含任意的ASCII字符，因为这两个字符被核心<strong>当作标识路径名的特殊字符</strong>来解释。</p>

<p>（2）Linux<strong>区分大小写</strong>。</p>

<p>（3）以<strong>圆点（.）开头</strong>的文件为<strong>隐含文件</strong>。</p></blockquote></li>
</ul>


<hr />

<h4>文件类型：</h4>

<ul>
<li><strong>普通文件：</strong></li>
</ul>


<p>普通文件也称规范文件，包含<strong>各种长度的字符串</strong>。核心对这些<strong>数据没有进行结构化</strong>，只是作为<strong>有序的字符序列</strong>把它提交给应用程序。应用程序<strong>自己组织和解释</strong>这些数据。</p>

<blockquote><p>(1)<strong>文本文件</strong>：有ASCII字符构成。</p>

<p>(2)<strong>数据文件</strong>：来自<strong>应用程序</strong>的<strong>数字型和文本型数据</strong>组成，例如：电子表格，数据库及字处理文档。</p>

<p>(3)<strong>可执行的二进制文件</strong>：有机器指令和数据构成。</p></blockquote>

<p><em>命令：指定文件的类型（可将多个文件作为参数）</em></p>

<p>``` sh</p>

<pre><code>$ file 文件名 [文件名...]
</code></pre>

<p>```</p>

<ul>
<li><strong>目录文件：</strong></li>
</ul>


<p>目录文件也<strong>包含数据</strong>，但与普通文件的差别是：核心对这些数据进行<strong>结构处理</strong>，即它是<strong>有成对的“I节点号/文件名”</strong>构成的<strong>列表</strong>。</p>

<blockquote><ul>
<li><p>I节点号是检索I节点表的下标，<strong>I节点中存放有文件的状态信息</strong>。</p></li>
<li><p>每个目录的<strong>第一项都表示目录本身</strong>，用“点（.）”作文它的文件名，每个目录的<strong>第二项的名字用“点点（..）”表示</strong>。这就是当你输入ls显示第一二项是.和..的原因。</p></li>
<li><p>当文件<strong>添加</strong>到一个目录时，改目录的<strong>尺寸会加大，以便容纳新文件名</strong>。当<strong>删除文件</strong>时，目录的尺寸<strong>并不会减小</strong>，而是核心对<strong>该目录项上做特殊标识</strong>，一边下次添加一个文件时<strong>重新使用</strong>它。ls不会列出这些未被使用的项。</p></li>
</ul>
</blockquote>

<ul>
<li><strong>设备文件</strong></li>
</ul>


<p>是一种特别文件，除了在其文件I节点中存放属性信息外，不包含任何数据。系统利用他们来标记各个设备驱动器，核心使用它们与硬件设备通信。</p>

<blockquote><ul>
<li><p>字符设备：最常用的设备文件，允许I/O传送任意大小的数据，取决于设备本身的容量。使用这种接口的设备：终端，打印机及鼠标。</p></li>
<li><p>块设备：利用核心缓冲区的自动缓存机制。缓存区进行I/O传送总是已KB为单位。使用这种接口的设备包括硬盘，软盘和RAM盘。</p></li>
</ul>
</blockquote>

<p>tty可显示设备文件：</p>

<p>``` sh</p>

<pre><code>$ tty   #=&gt; /dev/pts/1
</code></pre>

<p>```</p>

<p><em>注意： 设备文件存放在"/dev/&ldquo;目录下</em></p>

<ul>
<li><strong>符号链接文件：</strong> 存放的<strong>数据</strong>是文件系统<strong>通向文件的路径</strong>。当使用符号链接文件时，核心<strong>自动访问所保存这个路径</strong>。</li>
</ul>


<hr />

<p>讲到这里，我不得不说一下硬链接和软链接。</p>

<h3>什么是链接：</h3>

<p>Linux具有<strong>一个文件起多个名字</strong>的功能，叫做链接。它有两种情况：</p>

<blockquote><ul>
<li><p>被链接的文件存放在<strong>相同的目录</strong>下，但是必须有<strong>不同的文件名</strong>，不用在硬盘上为同样的数据重复备份。</p></li>
<li><p>被链接的文件拥有<strong>相同的文件名</strong>，但是存放在<strong>不同的目录</strong>下。只要在<em>一个目录下的文件做修改，就可以完成对所有目录下同名链接文件的修改</em>。</p></li>
</ul>
</blockquote>

<p>链接形式就这两种：</p>

<h4>硬链接：</h4>

<p>在<strong>别的目录</strong>或<strong>本目录</strong>增加<strong>目标文件</strong>的一个<strong>目录项</strong>(让某目录同样可以访问目标文件)，这样一个文件就<strong>登记</strong>在多个目录中。
创建硬链接后，已经存在的文件节点(Inode)会被多个目录文件项使用。</p>

<p>一个文件的硬链接数可以在目录的长列表格式的第二列中看到，无额外链接的文件的连接数为1。
在默认情况下，<strong>ln命令创建硬链接</strong>。ln会<strong>增加链接数</strong>，<strong>rm命令会减少链接数</strong>。一个文件除非链接数为0，否则不会从文件系统中物理地删除。</p>

<p>限制：</p>

<blockquote><p>不能对目录文件创建硬链接。</p>

<p>不能在不同的文件系统之间做硬链接。链接文件与被链接文件必须位于同一个文件系统。</p></blockquote>

<h4>软链接：（符号链接）</h4>

<p>将一个路径名链接到一个文件。这些文件是一种特殊类型的文件。事实上，它只是一个文本文件，其中包含它提供链接的另一个文件的路径名。
当使用读写文件内容的命令被用于符号链接时，将沿着链接方向前进来访问实际的文件。</p>

<h4>两种链接的区别：</h4>

<ol>
<li><p><strong>符号链接</strong>是一个<strong>新文件</strong>，它具有<strong>不同的I节点</strong>；硬链接并没有建立新文件，只是建立目录项。</p></li>
<li><p>符号链接可以对<strong>目录建立符号链接</strong>，也可在<strong>不同文件系统中建立符号链接</strong>。</p></li>
<li><p><strong>删除源</strong>文件或目录时，<strong>只删除数据，不会删除符号链接</strong>，一旦以同样文件名创建源文件，链接将继续指向该文件的新数据。</p></li>
<li><p>符号链接的大小是链接文件的<strong>路径名的字节数</strong>。</p></li>
</ol>


<h4>命令：</h4>

<p>``` sh</p>

<pre><code>    ln [选项] 源文件 [目标文件]        # -s建立符号链接
</code></pre>

<p>```</p>

<hr />
]]></content>
  </entry>
  
</feed>
