<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: gem | TsaiKoga Blog]]></title>
  <link href="http://TsaiKoga.github.com/blog/categories/gem/atom.xml" rel="self"/>
  <link href="http://TsaiKoga.github.com/"/>
  <updated>2016-02-23T21:23:23+08:00</updated>
  <id>http://TsaiKoga.github.com/</id>
  <author>
    <name><![CDATA[TsaiKoga]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[redcarpet和pygments结合进行markdown显示]]></title>
    <link href="http://TsaiKoga.github.com/blog/2013/08/29/redcarpethe-pygmentsjie-he-jin-xing-markdownxian-shi/"/>
    <updated>2013-08-29T22:23:00+08:00</updated>
    <id>http://TsaiKoga.github.com/blog/2013/08/29/redcarpethe-pygmentsjie-he-jin-xing-markdownxian-shi</id>
    <content type="html"><![CDATA[<h2>redcarpet</h2>

<hr />

<p>用于将内容转化成markdown形式进行显示，它提供许多配置，具体操作方式如下：</p>

<p>1.首先是在gemfile中加入redcarpet.</p>

<p>2.安装redcarpet</p>

<p>``` sh</p>

<pre><code>gem install redcarpet
</code></pre>

<p>```</p>

<p>3.以前可直接在要显示的view中加入如下代码:</p>

<p>``` html</p>

<pre><code>&lt;%= Redcarpet::Markdown.new(render, :extension =&gt; {})%&gt;
</code></pre>

<p>```</p>

<p>现在在辅助方法中写如下代码：</p>

<p>``` ru</p>

<pre><code>def markdown(text)
        require 'redcarpet'
        render = Redcarpet::Render::HTML
        options = {
            autolink: true,
            filter_html: true,
            fenced_code_blocks: true,
    no_intra_emphasis: true
        }
        markdown = Redcarpet::Markdown.new(render.new(hard_wrap: true), options)
        markdown.render(text).html_safe
    end
</code></pre>

<p>```</p>

<p>4.在view中加入显示markdown的代码:</p>

<p>``` html</p>

<pre><code>&lt;%= raw(markdown.render(@post.content).html_safe) %&gt;
</code></pre>

<p>```</p>

<h2>pygments</h2>

<hr />

<p>可以和redcarpet很好的结合，用于语法高亮设置。
具体代码如下：</p>

<p>``` ru</p>

<pre><code>    def markdown(text)
            require 'redcarpet'
            render = HTMLwithPygments
            options = {
                    autolink: true, 
                    filter_html: true, 
                    prettify: true,
                    fenced_code_blocks: true,
                    no_intra_emphasis: true
            }
            markdown = Redcarpet::Markdown.new(render.new(hard_wrap: true), options)
            markdown.render(text).html_safe
    end

    class HTMLwithPygments &lt; Redcarpet::Render::HTML
            require 'pygments'
            def block_code(code, language)
                    Pygments.highlight(code, :lexer =&gt; language, :options =&gt; {:linenos =&gt; true})
            end
    end
</code></pre>

<p>```</p>

<blockquote><h3>注意：</h3>

<ol>
<li>辅助方法要引入文件redcarpet和pygments。</li>
<li>hard_wrap必须Redcarpet::Render::HTML实例化时进行配置。</li>
<li>必须有fenced_code_blocks才能将代码块放入代码框中。</li>
</ol>
</blockquote>

<p>{% video <a href="http://media.railscasts.com/assets/episodes/videos/272-markdown-with-redcarpet.mp4">http://media.railscasts.com/assets/episodes/videos/272-markdown-with-redcarpet.mp4</a> 800 504 <a href="http://railscasts.com/static/episodes/posters/loading.png">http://railscasts.com/static/episodes/posters/loading.png</a> %}</p>

<p>参考：</p>

<ol>
<li><p><a href="https://github.com/vmg/redcarpet">github上的redcarpet</a></p></li>
<li><p><a href="https://github.com/tmm1/pygments.rb">github上的pygments</a></p></li>
<li><p><a href="http://railscasts.com/episodes/272-markdown-with-redcarpet?view=comments">视频参考</a></p></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[create octopress blog]]></title>
    <link href="http://TsaiKoga.github.com/blog/2013/07/28/create-octopress-blog/"/>
    <updated>2013-07-28T22:51:00+08:00</updated>
    <id>http://TsaiKoga.github.com/blog/2013/07/28/create-octopress-blog</id>
    <content type="html"><![CDATA[<h4>克隆octopress项目</h4>

<pre><code>git clone git://github.com/imathis/octopress.git tsaikoga.github.com  # 这里的tsaikoga.github.com为你的项目名称
cd tsaikoga.github.com
</code></pre>

<p>查看Gemfile文件：
稍作修改，如使用淘宝镜像：source <a href="http://ruby.taobao.org">http://ruby.taobao.org</a></p>

<p>``` sh</p>

<pre><code>vim Gemfile
</code></pre>

<p>```</p>

<p>之后执行:</p>

<p>``` sh</p>

<pre><code>bundle install
</code></pre>

<p>```</p>

<p>接着要做的事是查看rakefile 文件,，我们会用rake来执行创建博客或创建样式等：</p>

<p>``` sh</p>

<pre><code>vim Rakefile    # 里面有许多rake任务
</code></pre>

<p>```</p>

<p>我们执行其中的:</p>

<p>``` sh</p>

<pre><code>rake install # 复制"theme/"中的"sass/"和"source/"文件夹到"tsaikoga.github.com/"文件夹下
# 当然你也可以从网上下载他人的样式，如下命令：
git clone git://github.com/panks/fabric.git .themes/fabric
rake install['fabric'] # 然后安装fabric这个样式，不加[]则安装默认样式，如上命令：rake install
rake generate          # 执行此命令后才会生效，然后重启服务
</code></pre>

<p>```</p>

<p><strong>查看网页效果：</strong></p>

<p>``` sh</p>

<pre><code>rake preview
</code></pre>

<p>```</p>

<p>他会生成public文件夹</p>

<hr />

<h4>创建仓库：名字要以用户名为头，区分大小写。(username.github.io)</h4>

<p>本地执行:</p>

<p>``` sh</p>

<pre><code>rake setup_github_pages
</code></pre>

<p>```</p>

<p>在github上新建一个octopress仓库，当填入url时，不要填入后缀".git"，这样生成的页面才在".com"上,把public生成好的文件变成版本推送到远程仓库github，之后在远程仓库上做开发。
说到在远程仓库做开发，就是将"开发分支source"覆盖原有的"master分支",以后本地没有了项目，克隆项目下来，checkout 到source上进行开发。</p>

<p>``` sh</p>

<pre><code>git checkout source             # 切到开发分支source上
git push origin source      # 推送到远程仓库
</code></pre>

<p>```</p>

<h4>如果想在source分支下有_deploy文件夹(当你的_desploy文件夹没了)，只要</h4>

<p>``` sh</p>

<pre><code>git clone https://github.com/TsaiKoga/tsaikoga.github.com.git
</code></pre>

<p>```</p>

<p>重新克隆了项目下来，再改变文件夹tsaikoga.github.com/名字为_deploy/,
修改_config.yml文件中的内容:一定要把url改成/tsaikoga.github.com，</p>

<p>执行：</p>

<p>``` sh</p>

<pre><code>rake generate
</code></pre>

<p>```</p>

<p>再执行以下名令，<strong>部署到远程仓库</strong>：</p>

<p>``` sh</p>

<pre><code>rake deploy
</code></pre>

<p>```</p>

<p>最后到网址刷新看看。</p>

<hr />

<h4>附加功能：</h4>

<p>注册一个google analytics帐号：
生成tracking_id:</p>

<h4>新建一个博客：</h4>

<p>``` sh</p>

<pre><code>rake new_post["Hello TsaiKoga"]
</code></pre>

<p>```</p>

<p>存放到了 source/<em>post 之中, 编辑</em>post文件，如果使用disqus，这里的comment必须填true，下面有原因。</p>

<h4>做评论，可以基于第三方插件：disqus</h4>

<p>扯开一下话题：</p>

<blockquote><p>Disqus的主要目标是通过提供功能强大的第三评论系统，将当前不同网站的相对孤立、隔绝的评论系统，连接成具有社会化特性的大网，用户使用Disqus，在不同网站上评论，无需重复注册账号，只需使用Disqus账号或者<em>第三方平台账号</em>，即可方便的进行评论，且所有评论都会存储、保存在Disqus账号后台，方便随时查看、回顾。</p></blockquote>

<p>可以看到source/<em>layouts/post.html文件中已经有这个插件的评论方法：
在</em>config.yml中加入你申请的disqus的short_name</p>
]]></content>
  </entry>
  
</feed>
