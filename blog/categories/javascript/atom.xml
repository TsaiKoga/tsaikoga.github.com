<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Javascript | TsaiKoga Blog]]></title>
  <link href="https://TsaiKoga.github.com/blog/categories/javascript/atom.xml" rel="self"/>
  <link href="https://TsaiKoga.github.com/"/>
  <updated>2019-03-28T11:37:49+08:00</updated>
  <id>https://TsaiKoga.github.com/</id>
  <author>
    <name><![CDATA[TsaiKoga]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[JQuery重要知识点]]></title>
    <link href="https://TsaiKoga.github.com/blog/2017/03/10/jqueryzhong-yao-zhi-shi-dian/"/>
    <updated>2017-03-10T15:14:00+08:00</updated>
    <id>https://TsaiKoga.github.com/blog/2017/03/10/jqueryzhong-yao-zhi-shi-dian</id>
    <content type="html"><![CDATA[<p>对于Jquery，用起来很像很简单；但是有些知识点经常会忘记。这里特别写一篇来巩固。</p>

<h3>加载：</h3>

<h4>关于 ready 和 onLoad 的区别</h4>

<p>两个不同点：</p>

<p>1)
只有文档完全下载到本地，才会触发<code>window.onload</code>事件，这意味着所有事件对于Javascript都是可以操作的。</p>

<p>通过<code>$(document).ready()</code>注册的事件处理程序，则会在 <strong>DOM</strong> 完全就绪并可以使用时调用。这意味着
所有元素对于脚本都是可以访问的。但不意味所有关联文件（例如DOM的图片）都已下载完毕。</p>

<p>换句话说：当HTML都下载完成别解析成为DOM树后，代码才可以运行。</p>

<br/>


<p>2)
对于<code>onload</code>属性一次只能保存一个函数引用，所以不能再现有行为上添加新的行为。</p>

<p>对于<code>$(document).ready()</code>调用这方法每次都会向内部的行为队列添加新函数。当页面加载完成后，所有函数会被执行。按照注册他们的顺序依次执行。</p>

<br/>


<p>关于<code>$(document).ready()</code>结构，实际上是在基于<code>document</code>这个DOM元素构建成的JQuery对象上调用<code>ready()</code>方法。</p>

<p>实际上可写成：
<code>javascript
$(document).ready({
  ... ...
});
</code>
或写成：
<code>javascript
$(function(){
  ...
});
</code></p>

<br/>


<hr />

<h3>事件：</h3>

<h4>事件捕获</h4>

<p>允许多个元素响应单击事件的策略</p>

<h4>事件冒泡</h4>

<p>当事件发生时，会首先发送给最具体的元素，在这个元素获得响应机会后，事件会 <strong>向上冒泡到更一般</strong> 的元素。</p>

<br/>


<p><strong>如何解决事件冒泡副作用</strong></p>

<p>访问事件对象e
```javascript
function(e) {
  if (e.target == this) {</p>

<pre><code>... ...
</code></pre>

<p>  }
}
```</p>

<p>关于<code>event.stopPropagation()</code>阻止所有DOM响应这个事件，但是不能阻止默认操作;
必须要用<code>event.preventDefault()</code>来在操作前终止事件。</p>

<br/>


<p><code>javascript
$('switch').on('click', 'button', function(){ })
</code>
相当于
<code>javascript
$('switch').on('click', function(e){
  if(e.target == 'button'){ }
})
</code></p>

<p>模仿用户操作行为的方法 <code>trigger()</code> 它提供了和<code>on()</code>方法一样的简写方法。
像<code>click()</code>等on动作不带参数会自动触发。</p>

<br/>


<hr />

<h3>属性值：</h3>

<h4>值回调</h4>

<p>把回调函数作为参数传递</p>

<h4>HTML 属性和 DOM 属性的区别</h4>

<p><strong>HTML属性值:</strong> 页面标记中放在引号的值</p>

<p><strong>DOM属性值:</strong> Javascript能存取的值，可以通过chrome的elements检查器查看properties</p>

<p><strong>不同点：</strong> 有些DOM名称和HTML不同，例如：className;
有些DOM属性HTML是没有的，DOM的<code>attr()</code>就没发操作他们。</p>

<p>测试DOM属性而非HTML属性才可确保跨浏览器的一致性。如：<code>prop()</code>来获取DOM属性值，而非<code>attr()</code></p>

<p>最大不同在操作表单值：DOM和HTML操作表单的名称很多不同，最好不用<code>prop()</code>和<code>attr()</code>，而用<code>val()</code></p>

<hr />

<h3>Ajax</h3>

<h4>单向数据传输：</h4>

<p>AHAH(async http and html)用load()</p>

<p>服务器返回的JSON是字符串，需要变成JS字面量；
<code>javascript
$.getJSON('.json', function(data){
  ...
});
</code></p>

<p><strong>向页面注入脚本：</strong>
<code>javascript
$.getScript()
</code></p>

<p><strong>获取XML：</strong>
```javascript
$.get(&lsquo;.xml&rsquo;, function(data) {</p>

<pre><code>...  
</code></pre>

<p>})
```</p>

<h4>双向数据传递：</h4>

<p><code>javascript
get('a.php', args, function(){})
</code></p>

<p><code>javascript
post('a.php', args, function(){})
</code></p>

<p><code>javascript
load('a.php', args, function(){})
</code>
load在包含数据对象参数时，会使用post方法</p>

<p>ajaxStart()回调，ajax请求开始且尚未进行任何其他传输时 和 read() 一样只能由$(document)调用</p>

<p>ajaxStop()回调，ajax最后一次请求结束时调用，和 read() 一样只能由$(document)调用</p>

<p>ajaxError()回调，参数是一个XMLHttpRequest的引用。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[React Node 初尝试]]></title>
    <link href="https://TsaiKoga.github.com/blog/2016/12/20/React-Node-chu-chang-shi/"/>
    <updated>2016-12-20T20:29:00+08:00</updated>
    <id>https://TsaiKoga.github.com/blog/2016/12/20/React-Node-chu-chang-shi</id>
    <content type="html"><![CDATA[<p>这是第一次写React和Node，选用的是前端Material-ui框架，后端使用的是Express框架，数据库采用的是Mongodb。</p>

<p>项目代码在：<a href="https://github.com/TsaiKoga/lilu_movie">GitHub/lilu_movie</a></p>

<p>这是一个通过从电影天堂抓取数据并显示的电影网站，demo部署在heroku上面。</p>

<h2>安装</h2>

<hr />

<p>首先安装express框架；</p>

<p><code>sh
npm install express --save
</code></p>

<p>生成文件后，可以通过 npm start 启动应用。</p>

<p>注意：ejs 从3.x后不支持layout，可以通过express-partials ，但是不支持4，4之后用include</p>

<p>紧接着我迫不及待安装material-ui：</p>

<p><code>sh
npm install material-ui --save
</code></p>

<p>然后出现错误：</p>

<p><img src="/images/posts/2016-12-20/material-ui-error.png" alt="material-ui-error" /></p>

<p>所以必须安装react依赖：</p>

<p>``` sh
npm install react@^15.0.0 &mdash;save</p>

<p>npm install react-dom@^15.0.0 &mdash;save</p>

<p>npm install react-tap-event-plugin@^1.0.0 &mdash;save
```</p>

<p>安装nodemon</p>

<p><code>sh
nodemon ./bin/www #更改会自动重启服务
</code></p>

<p>本地安装数据库mongodb</p>

<p>然后npm安装操作mongodb的mongoose</p>

<p>``` sh
npm install mongoose</p>

<p>npm install express-mongoose
```</p>

<p>接着你会发现按照material-ui的import引入报错，</p>

<p>使用es6查看系统支持哪些es6语法</p>

<p><code>sh
npm install es6-checker
</code></p>

<p>因为react使用es6和jsx语法，所以需要转化，安装如下包：</p>

<p>``` sh
npm install babel-loader babel-core babel-preset-es2015 —save-dev</p>

<p>npm install jsx-loader —save-dev</p>

<p>npm install babel-preset-react
```</p>

<p>安装webpack</p>

<p>``` sh
npm install webpack —save-dev</p>

<p>npm install css-loader —save-dev</p>

<p>npm install webpack-dev-server —save-dev  # 前端文件更新就能自动热启动，会启动端口，默认8080
```</p>

<p>这里有必要提一下：-save-dev代表安装的包适用于开发的，类似于rails中安装Gem放在:development环境下，这样生产环境就不会安装</p>

<p>然后在webpack配置文件中babels的loaders中query加入presets</p>

<p>因为需要一些css文件，react通过require style文件(js 文件中直接require css 文件)，需要安装</p>

<p>``` sh
npm install style-loader —save-dev</p>

<p>npm install css-loader —save-dev // 这个和style一起用才有效果
```</p>

<p>在webpack中的config 加上loader: &ldquo;style-loader!css-loader”，就不用require使用style!css!了</p>

<br/>


<h2>启动脚本：</h2>

<hr />

<p>配置package.json文件，给script添加命令</p>

<p><code>js
 "start": ["node ./bin/www", "webpack"],
</code></p>

<p>编写webpack.config.js配置文件，更改html引入文件</p>

<p>在webpack-dev-server 没有真正生成文件，还得要引入<script src=“localhost:8080/assets/bundle.js"></script></p>

<p>运行</p>

<p><code>sh
npm run dev
</code></p>

<p>看webpack-dev-server效果</p>

<br/>


<h2>Express后端流程改变：</h2>

<hr />

<p>刚开始，我用一贯的后台思路通过routes渲染页面，页面html引入react的js文件，reactjs文件link后台js响应；后台相应通过连接mongodb获取数据库内容。</p>

<p>很成功，获取到相应的内容了，但是因为使用react(React适合做SPA)，所以不好每次都取加载一次内容，所以就不用引擎模板，这些数据如何放入state让react用diff算法自己计算呢？怎样变成单页面应用呢？</p>

<p>这时候我想到就是ajax；上网google一下，发现用fetch能实现像ajax那样的请求。同一个component可以很容易实现fetch数据改变this的state。</p>

<p>详情更改请看我的这个commit：<a href="https://github.com/TsaiKoga/lilu_movie/commit/16fef9918a0fc1a2a34e851d88328fcd99b1c2c8">add client store to fetch movie&rsquo;s data from server</a></p>

<p>这时候发现不知道怎么通过点击侧边栏标签，渲染新页面（注意：侧边栏是一个组件，而右边的电影列表又是一个组件，他们是两个不同的组件）</p>

<p><img src="/images/posts/2016-12-20/sidebar.png" alt="侧边栏组件" /></p>

<br/>


<h2>使用React-Router</h2>

<hr />

<p>由于react规定父元素只能改变子元素，但是不好将子元素改变父元素；</p>

<p>一般我们都会把许多内容都搞到最顶级那个父元素的state，这样其他都有可能与他有关联，而子元素改变父元素的state的方法就是通过回调setState；</p>

<p>所以这里我们可以将movies放在最顶的component，然后点击标签，就去回调去改变这个父元素的state，用到这个state的子元素就会刷新。</p>

<p>例如：父组件有一个属性callbackParent=某个callback函数。然后 子组件 通过事件 触发this.props.callbackParent这个函数，把你要的值传给callback，callback立马设置给父组件state</p>

<p> 方案：<a href="http://stackoverflow.com/questions/22639534/pass-props-to-parent-component-in-react-js">stackoverflow</a></p>

<p> 代码详见这个 <a href="https://github.com/TsaiKoga/lilu_movie/commit/248258b5faf0161f66655c745c2bc8e33ffc9798">commit</a></p>

<p><strong>但是这样太hacky了，违背react理念，代码难理解；</strong></p>

<br/>


<p>有没有其他更好的办法呢？</p>

<p>Google查找答案发现有两种方法：</p>

<ol>
<li><p>使用react-router</p></li>
<li><p>如果不是用react-router，则得这样写<a href="https://github.com/ReactTraining/react-router/blob/master/docs/Introduction.md">https://github.com/ReactTraining/react-router/blob/master/docs/Introduction.md</a></p></li>
</ol>


<p>react-route根据history传入的链接，找到你对应routes的component，然后改变children，成功渲染改组件。</p>

<br/>


<br/>


<p>对于不同组件改变同个内容还是使用react-router</p>

<br/>


<br/>


<p>使用react-router发现client端通过router的链接，局部更新内容；</p>

<p>这样子说，完全不需要server后台每个路由每次渲染不同页面了，只需要server不同链接给出不同内容，然后渲染同一个页面，这个页面通过react-router去改变内容即可。</p>

<p>所以删除后端所有router路由；</p>

<p>按照React Router官方教程实现相应代码。</p>

<br/>


<br/>


<p>这时候发现一个问题：</p>

<p>渲染同一个页面就要在后端引入前端的routes，也就需要到es6了，但是之前后端没有通过webpack进行es6的转化，所以还要对后端的入口文件进行webpack转化。</p>

<br/>


<br/>


<p>对后端server.js进行webpack的bundle后，很容易报错，首先要在web pack中排除掉node_module的文件，然后需要引入各种loader；</p>

<br/>


<p>server端要import client端的routes过来，但是route的component会引用相应的component。如果遇到client的内容，有些react-router/server是处理不了的，会报没有window错误。</p>

<br/>


<p>以下是最终的webpack.server.config.js</p>

<p>``` js
var webpack = require(&ldquo;webpack&rdquo;);
var fs = require(&ldquo;fs&rdquo;);
var path = require(&ldquo;path&rdquo;);</p>

<p>module.exports = {
  entry: [</p>

<pre><code>path.resolve(__dirname, 'server.js')
</code></pre>

<p>  ],</p>

<p>  output: {</p>

<pre><code>filename: 'server.bundle.js'
</code></pre>

<p>  },
  target: &lsquo;node&rsquo;,</p>

<p>  externals: fs.readdirSync(path.resolve(__dirname, &lsquo;node_modules&rsquo;)).concat([</p>

<pre><code>'react-dom/server', 'react/addons',
</code></pre>

<p>  ]).reduce(function (ext, mod) {</p>

<pre><code>ext[mod] = 'commonjs ' + mod
return ext
</code></pre>

<p>  }, {}),</p>

<p>  node: {</p>

<pre><code>__filename: true,
__dirname: true
</code></pre>

<p>  },
  module: {</p>

<pre><code>loaders: [
  {
    test: /\.css$/,
    loader: "style-loader!css-loader"
  }, {
    test: /\.js$/,
    exclude: /node_modules/,
    loader: "babel",
    query: { presets: ['react', 'es2015'] }
  }, {
    test: /.json$/, loader: 'json-loader'
  }, {
    test: /.node$/, loader: 'node-loader'
  }]
</code></pre>

<p>  }
}
```</p>

<p>事实上使用react react-router已经足够完成功能，但是考虑到如果之后想要扩展，例如现在我又要增加用户注册，登录页面；那么很有可能随着页面组件增多，这个项目将会变成意大利面；</p>

<br/>


<h2>使用Redux</h2>

<hr />

<p>页面逐渐增多，涉及到了不相关或者层级比较多的组件之间的通信；</p>

<p>以上父子组件通信已经不能满足需求，可以使用 Redux；</p>

<p>他是 <strong>观察者模式</strong>，使用 <strong>订阅分发</strong> 实现：</p>

<p>引入redux;</p>

<p>``` sh</p>

<p>npm install react-redux</p>

<p>npm install redux</p>

<p>```</p>

<p>关于redux，其实应用中所有的 state 都以一个对象树的形式储存在一个单一的 store 中。惟一改变 state 的办法是触发 action，一个描述发生什么的对象。</p>

<p>为了描述 action 如何改变 state 树，你需要编写 reducers，reducers 是一棵操作 state 的树，我用变量 <a href="https://github.com/TsaiKoga/lilu_movie/blob/master/redux/reducers/reducer.js">RootReducer</a> 命名更加形象。</p>

<p>通过写reducer，可以很好的管理 actions，这些 actions 操作形成了新的state，这样更加条理。可以看我的redux目录</p>

<blockquote><p>actions：用来fetch后台数据或者直接返回改变的内容</p>

<p>reducers：通过actions返回的数据，改变state</p>

<p>constants：每个actions的常量名</p>

<p>configureStore.js:通过传入reducers和初始的states，返回store（包含改变的states）</p></blockquote>

<p>然后前台app.js渲染之前，必须先通过<Provide>传入store；</p>

<p>即：通过 connect() 方法订阅了 reducers 树，触发 reducers 中某个 action，action 请求后台数据，返回 state 对象给添加订阅的 Provider store</p>

<br/>


<p>``` js
const store = configureStore(window.<strong>INITIAL_STATE</strong>)</p>

<p>/<em> 这里store存储某一时刻的state树，所以这里面通过action得到的states是不一样的
 * 例如：如果一开始给tags，后面action没有给tags，则不会有原来的初始值tags,所以不用担心数据冗余。
 </em>/</p>

<p>ReactDOM.render(
  <Provider store={store} ></p>

<pre><code>&lt;Router routes={routes} history={browserHistory} /&gt;
</code></pre>

<p>  </Provider>,
  document.getElementById(&lsquo;app&rsquo;)
)
```</p>

<br/>


<p>后台呢？也要相应根据么次fetch数据返回新的store。</p>

<p>``` js</p>

<pre><code>  const store = configureStore(initialState)
  const state = store.getState()
  const params = Object.assign(req.query, renderProps.params)

  fetchComponentDataBeforeRender(store.dispatch, renderProps.components, params)
  .then(() =&gt; {
    // 这里redux的store给Provider，再通过mapStateToProps给对应的容器组件
    const html = renderToString(
      &lt;Provider store={store}&gt;
        &lt;RouterContext {...renderProps} /&gt;
      &lt;/Provider&gt;
    )
    res.send(renderFullPage(html, store.getState()));
  })
</code></pre>

<p>```</p>

<p>有了后台传回来新的store，如何应用到前台组件呢？</p>

<br/>


<p>就在组件中引入connect：</p>

<p><code>js
import { connect } from 'react-redux'
</code></p>

<p>``` js
class MoviesGridList extends React.Component {
&hellip; &hellip;.
  // 将store最新的state.movies给props，
  function mapStateToProps(state, props) {</p>

<pre><code>let tags = props.location.query.tags
let movies
if (tags === undefined) {
  movies = state.movies
} else {
  movies = getMoviesByTag(state, tags)
}
return {
  tags: tags,
  movies: movies
}
</code></pre>

<p>  }
}</p>

<p>export default connect(mapStateToProps)(MoviesGridList)
```</p>

<h2>总结</h2>

<hr />

<p>在数据为王的网络世界中，数据永远都是页面的核心，那么对于数据管理的模式；</p>

<p>react采用的是 <strong>单向数据流模式</strong>，</p>

<p>单向也就是数据只能从一个方向流向另外一个方向而不能反过来，</p>

<p>如果把dom想象成一颗树，<strong>单向数据流就是将数据自上向下的流动</strong>，为了让数据流到尽可能多的dom中，肯定要把数据尽可能放的高一点。这里的 <strong>根数据可以简单理解为state</strong>。</p>

<p>而对于流到 <strong>下面的数据，dom通过props接收</strong>。这样模式就很显而易见了，尽可能高的组件对state进行更新，子组件的props也会随即更新，数据单向流动，这时候如果想通过子组件来反向更新state，就要通过上层组件传递一个函数，在函数中通过setState等方法来达到反向数据的更新。</p>

<p>其实到这已经可以应付一些简单的应用了，但是对于复杂的应用，组件之间的数据通信有可能是交叉而又错综复杂的，这时候就希望通过一种统一的方式将数据好好管理起来，那么出现了redux。</p>

<p>使用 <strong>Redux 实现观察者模式，进行 订阅分发</strong>；</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Scroll to top]]></title>
    <link href="https://TsaiKoga.github.com/blog/2013/08/30/scroll-to-top/"/>
    <updated>2013-08-30T21:57:00+08:00</updated>
    <id>https://TsaiKoga.github.com/blog/2013/08/30/scroll-to-top</id>
    <content type="html"><![CDATA[<p>许多网页都有提供一个便捷功能：当你浏览网页时，由于网页内容比较多，需要向下滑动；但是，当你要向上时，自己滑动太慢了。这里将的是一个自动向上滑的按钮。
具体操作如下：</p>

<ol>
<li><p>在页面header下写一个&lt;a>标签里面放张图片指着向上。对&lt;a>标签的css设置有几个重要的：position: fixed（表明标签会随着页面处在同一位置）,overflow: hidden</p></li>
<li><p>接着设置js</p></li>
</ol>


<blockquote><ol>
<li>设置它在下拉后显示，具体是看window的scrollTop的位置,如果大于0，则已经开始下拉，所以让&lt;a>标签显示。否则，隐藏。</li>
<li>单击事件，滚到最上层。具体操作：最好用Jquery，设置时间让其向上滑动。如：  $(&lsquo;html, body&rsquo;).animate({scrollTop: 0}, 300)</li>
</ol>
</blockquote>

<p><strong>example:</strong> (标签&lt;a class=&ldquo;go_top&rdquo;>)</p>

<p>``` js</p>

<pre><code>$(document).ready -&gt;
    $("a.go_top").click () -&gt;
        $('html, body').animate({scrollTop: 0}, 300)
        return false

    $(window).bind 'scroll resize', -&gt;
        scroll_from_top = $(window).scrollTop()
        if scroll_from_top &gt;= 1
            $('a.go_top').show()
        else
            $('a.go_top').hide()
</code></pre>

<p>```</p>
]]></content>
  </entry>
  
</feed>
