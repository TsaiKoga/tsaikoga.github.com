<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: ProjectManagement | TsaiKoga Blog]]></title>
  <link href="http://TsaiKoga.github.com/blog/categories/projectmanagement/atom.xml" rel="self"/>
  <link href="http://TsaiKoga.github.com/"/>
  <updated>2016-02-23T21:38:43+08:00</updated>
  <id>http://TsaiKoga.github.com/</id>
  <author>
    <name><![CDATA[TsaiKoga]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[敏捷开发]]></title>
    <link href="http://TsaiKoga.github.com/blog/2014/02/25/min-jie-kai-fa/"/>
    <updated>2014-02-25T13:23:00+08:00</updated>
    <id>http://TsaiKoga.github.com/blog/2014/02/25/min-jie-kai-fa</id>
    <content type="html"><![CDATA[<p><img src="/images/posts/2014-02-25/minjie.jpg" title="敏捷开发图" alt="图片无法显示" /></p>

<h5>敏捷开发的定义：</h5>

<p>是一种<strong>以人为核心、迭代、循环渐进的开发方法</strong>。在敏捷开发中项目被切分为多个子项目，各个子项目的成果都经过测试，具备集成和可运行的特征。简而言之，就是把一个大项目切分成多个<strong>相互联系但可独立运行的子项目</strong>，并<strong>分别完成</strong>。在此过程软件一直处于可使用状态。</p>

<h5>敏捷开发 5 大价值观</h5>

<ol>
<li>沟通: 团队内部的开发人员之间沟通。</li>
<li>简单: 就是指简单的建模，如画一两张图表来代替几十甚至几百行的代码。</li>
<li>反馈: 过度自信是编程的职业病，反馈则是其处方。</li>
<li>勇气: 当你的决策证明是不合适的时候，你就需要做出重大的决策，放弃或重构你的工作，修正你的方向。</li>
<li>谦逊: 这个就不用我解释了。</li>
</ol>


<h5>敏捷开发核心做法</h5>

<ol>
<li>测试驱动开发</li>
<li>结对编程: 指<strong>两位程序员</strong>肩并肩地坐在同一台电脑前<strong>合作完成</strong>同一个设计、同一个算法、同一段代码或同一组测试。</li>
<li>持续集成:</li>
<li>每日站立会议</li>
<li>共同拥有代码</li>
<li>系统隐喻</li>
</ol>


<p> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;除了敏捷开发模式，目前所具有的开发模式还有好几种,如：瀑布模型，快速原型模型，增量模型，螺旋模型，喷泉模型。
 我在大学的实验室中使用 Rails 框架进行开发，使用的是敏捷开发模式。虽然如此，但是我们团队的敏捷开发还是带有其他模型的特征，可能因为我们还是学生团队，不是一个真正意义上的商业团队(我们平常还必须上课)。</p>

<p> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;我先通过我们团队负责的一个项目（在这里我们叫它为ce）来阐述，我们为什么不是真正的敏捷，而是有有快速原型和增量的特征的敏捷，或者说我们是采用混合模式。</p>

<p><span style="text-align:center"><img src="/images/posts/2014-02-25/zengliang.jpg" title="增量模型图" alt="图片无法显示" /></span></p>

<ol>
<li><p>ce 首先通过实现前台大部分界面（没有功能）的<strong>样品给客户观看并给予讲解</strong>。客户可以清楚的看到有具体形态而无功能的样品，从而有助于客户提出有<strong>针对性的修改意见</strong>。而参与调研的师兄们对<strong>样品进行再次修改</strong>，并再次呈现给客户看，直到双方达成共识为止；之后师兄们就对这些调研后的资料进行讨论并据此形成<strong>规格说明文档</strong>（我们的规格说明文档是前台界面的图片，并用文字等方式对其功能进行阐述，当然还有一些流程图），然后把之前做的不具有功能的<strong>样品抛弃</strong>。很明显这是<strong>结合了快速原型模型</strong>，从而得到它的<strong>优点</strong>：规格说明文档<strong>正确的描述客户的需求</strong>，减少了设计和编码阶段发生的可能性错误。</p></li>
<li><p>当进入开发阶段时，团队要求将这个 ce 项目分成三期；每期有几条流程，而各个阶段的流程互不影响。并在第一期开发结束后部署给企业使用，这样企业就能拥有<strong>充裕的时间学习和适应</strong>此系统,减少一个新系统可能给客户组织带来的冲击。第二期进行开发直至完成后再部署给企业，这样企业已经事先使用过系统，对系统的排斥性不会那么强了。<strong>增量模型是将软件产品作为一系列的增量构件来设计，编码，集成和测试</strong>。而 ce 的这种开发方式明显和增量模型类似,当然，也可以说是<strong>敏捷开发的增量交付</strong>。</p></li>
<li><p>最后，我想要通过实验室的 ce 项目来说明敏捷开发的特征。</p></li>
</ol>


<p><strong>持续集成：</strong>一开始，我已经提到 ce 调研，那时候形成的规格说明文档有项目每个页面的设计方式，这样 ce 的每个模块以及每个页面都已经划分好，剩下的就是开发人员对每个页面的实现。实现一个页面后进行白盒测试，一个模块的所有页面完成时进行集成测试，这符合敏捷开发的方式。</p>

<p><strong>测试驱动开发：</strong>很可惜，团队的成员（包括老成员）没有 <strong>TDD (测试驱动开发)</strong> 的经验，我们使用一个星期的时间学习，最后在讨论中决定不使用 TDD，主要原因是 TDD 讲究先写测试后开发，而我们已经进入了开发阶段；再加上没有经验，如果使用TDD很大可能会拖慢项目进度。</p>

<p><strong>每日站立会议：</strong>我们每天都会在实验室进行工作，并且在每天晚上进行一个名叫<strong>三分钟站立会议</strong>的谈论，这个会议是就是要求每个人用三分钟左右的时间回报当天的工作内容、任务目标及所遇到的问题；我们希望从这次会议<strong>获得团队中每个人的任务进度和状态，从而有效的对进度进行把控</strong>。这就符合敏捷开发的五大价值观的其中两个：<strong>沟通</strong>和<strong>反馈</strong>。</p>

<p>我清楚的记得我当初被任命开发一个叫做“生产通知单”的页面，这个页面设计上不合理，集结了很多表，关系复杂，数据量大，并且由于 Extjs 特性，导致页面加载速度慢。后来团队选择废除这个页面，上千行的代码就这样被废除了。这也符合敏捷开发的一大价值观：<strong>勇气</strong>。</p>

<p><strong>系统拥有共同的代码：</strong>我们使用 Git 对 ce 的代码进行版本管理，由于 Git 巧妙的设计，团队<strong>每个成员都用有 ce 的代码</strong>（可能是各自不同的版本），不会因为仓库的代码错误和丢失而导致项目失败。</p>

<p><strong>代码的评审和重构：</strong>由于进入第一期末尾时，发现有很多 bug ，最终讨论设立一个代码评审人员(一个师兄，他的经验比我们丰富)，他负责对代码进行评审，并将需要重构的代码标记出来形成一个新的任务，将任务授予相应的开发人员。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[项目代码实现]]></title>
    <link href="http://TsaiKoga.github.com/blog/2013/11/06/xiang-mu-dai-ma-shi-xian/"/>
    <updated>2013-11-06T13:14:00+08:00</updated>
    <id>http://TsaiKoga.github.com/blog/2013/11/06/xiang-mu-dai-ma-shi-xian</id>
    <content type="html"><![CDATA[<p> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;转眼间已经到了大四，想想大三和暑假在做的项目，自己在其中参与开发也曾参与管理；提到开发，从一开始对语言和业务都很陌生，任务不能按时完成；到后来逐渐掌握方法，准时完成任务。这个期间是一个逐渐迷失，然后发现问题，之后解决问题的过程。所以，在这里总结一下自己的经验和体会。</p>

<p>在讲述之前先说一下背景:</p>

<h4>背景：</h4>

<blockquote><p>首先，说一下我们所使用的语言和框架：</p>

<ul>
<li>前台：主要是Extjs</li>
<li>后台：Ruby</li>
<li>框架：Rails</li>
</ul>


<p>其次，说明一下我们所做的系统内容和功能：</p>

<ul>
<li>它是一个有关服装的一套生产流程的管理系统，包括板房打板，制作订单和制单，库存管理，采购管理，员工工资预算等内容。</li>
<li>页面所涉及的组件一般为panel（面板），form（表单），grid（表格），tree（树）和window（窗口）。</li>
<li>页面功能一般为对记录进行增删查改，对单据进行打印和导出Excel的功能。</li>
</ul>


<p>最后，讲述以下我们所做的系统复杂性：</p>

<ul>
<li>其实，由前面的内容和功能看好像不复杂，大部分系统都是这样。但是，看似简单的功能，实现并不容易；因为公司涉及流程范围广，系统较大，而系统所需的表有100多张；经常一个页面涉及10多张表，所以查找关联时比较吃力。</li>
</ul>
</blockquote>

<hr />

<p> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;当我开始接触此项目时，团队已经调研完并且设计好了数据库；而我们对数据库和业务都不熟悉；一开始就进入实现阶段常常会产生一个接连一个的问题；面对这些问题，我们探寻一条解决道路，团队开始采取的方法是：</p>

<p>1.业务完全不了解：</p>

<ul>
<li>先<strong>查看</strong>之前调研出来的<strong>流程图</strong>;</li>
<li>要求之前调研的人员对<strong>大体的流程</strong>进行<strong>讲解</strong>（因为流程图这种文档不一定能被第三方所理解，所以必须进行讲解；但是一开始讲解太全不易接受，所以我提议一开始讲大体内容，实现前针对模块的流程进行讲解）;</li>
<li>开发时对所做的<strong>模块流程</strong>进行<strong>讲解</strong>;</li>
</ul>


<p>2.数据库设计问题：</p>

<ul>
<li>对于这个问题，要看问题的大小，组织当时<strong>数据库设计相关人员进行讨论</strong>;</li>
<li>如果易于修改，不会改动太大，不会造成较大影响的，可以进行修改。</li>
<li>若影响较大，寻求其他途径代替，而不改动数据库。</li>
</ul>


<hr />

<p> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;好，现在来讲我的代码实现方法，因为还是学生，不是什么正规公司，在代码设计上不像大公司那样规范；为了完成每一个任务，自己逐渐掌握的一套方法：</p>

<h4>准备:</h4>

<p>1.了解所要做的<strong>线路的流程</strong>，究竟是要干什么：
 理解所要实现的功能，所做的页面比起原来公司方式多了什么好处或修复了什么弊端。这样有助于理解并且找出系统设计的错误，及早改正。</p>

<p>2.查看<strong>数据库</strong>的设计的<strong>有关联的表</strong>：</p>

<ul>
<li>首先可以先看名字，你之后设计的函数或变量名字其实很多可以从数据库的表名或字段名借鉴。</li>
<li>将你前台所需要的字段找出来，你的页面将通过哪张表开始显示这个字段，找出一条搜索路径。（这里是一些大致需要查找的地方，如表单，表格）</li>
</ul>


<p>3.简要<strong>设计函数和分割代码</strong>(这里不是很细致地设计，而只是提出设计，实现是可以按着这个方向编写代码)：</p>

<ul>
<li>根据功能设计前台函数名（这也只能从较高层次上设计，如果熟练了，就知道页面大概要什么函数了，到那时设计起来简单）。</li>
<li>计高内聚低耦合的代码（这个比较难，一开始会因为站在比较高的地方，对一些细致的内容不了解或是业务知识不清晰而做出设计，最后由于一些功能不一致而修改，发现内聚性较差）。</li>
</ul>


<p>4.根据前台功能开始着手<strong>设计后台</strong>，前台所需发的请求，归纳后台需要什么内容，将后台处理过程划分，设计后台方法名。</p>

<h4>实现:</h4>

<p>5.开始着手敲代码实现，在前台这个期间我经历了三个阶段：</p>

<ul>
<li><p>没显示内容：怎么办？只好不停的调试；因为使用js的ext库做前台，所以我会在代码中用console.log()通过chrome的审查元素进行调试。</p>

<p><strong>结论：</strong>第一次还是不要一次性写太多内容；对于前台，你只需要写出那么一个总体显示框架就行了（如：一个布局：上面有个form，下面有个grid，显示出来就行了），之后再逐步细化。</p></li>
<li><p>当前台显示出来后，我认为根据MVC，View要发送请求，必须通过前台的功能实现，所以着手写之前所设计的前台功能代码：增删查改的ajax。但是，这样编代码后思想会很乱，容易分心，效率低下。</p>

<p><strong>结论：</strong>先做号前台页面的显示和最基本的数据显示（包括后台代码）；然后还是前台的一个功能设计出来后，后台根据这个请求实现，完成后台代码后测试这个功能是否可用。</p></li>
<li><p>最后一阶段就是一个一个的功能实现了，接在在一起时出现了问题，这时也只能调试。</p>

<p><strong>结论：</strong>调试时先判断是前台还是后台，这一期间一般发生在后台；如果可以通过提示的错误判断，则判断哪个范围出错，并那个范围进行调试；不然就顺着请求的访问路径测试，逐步调试。</p></li>
</ul>


<h4>总结:</h4>

<blockquote><p>编代码时</p>

<p>1.先整体后局部：做前台先将整体框架显示，再一个一个进行实现，而功能先不做；</p>

<p>2.先简单后复杂（复杂局部实现）：找出前台要显示的基本信息，编写后台实现基本的显示信息，再用一个功能一个功能实现;</p>

<p>3.先局部后整体：在此期间的不断地测试。</p></blockquote>
]]></content>
  </entry>
  
</feed>
