<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: PHP | TsaiKoga Blog]]></title>
  <link href="https://TsaiKoga.github.com/blog/categories/php/atom.xml" rel="self"/>
  <link href="https://TsaiKoga.github.com/"/>
  <updated>2020-03-15T23:06:52+08:00</updated>
  <id>https://TsaiKoga.github.com/</id>
  <author>
    <name><![CDATA[TsaiKoga]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[浏览历史数据库表设计与缓存设计]]></title>
    <link href="https://TsaiKoga.github.com/blog/2020/03/15/liu-lan-li-shi-shu-ju-ku-biao-she-ji-yu-huan-cun-she-ji/"/>
    <updated>2020-03-15T14:55:00+08:00</updated>
    <id>https://TsaiKoga.github.com/blog/2020/03/15/liu-lan-li-shi-shu-ju-ku-biao-she-ji-yu-huan-cun-she-ji</id>
    <content type="html"><![CDATA[<h3>目录</h3>

<h4><a href="#1">1. 功能需求</a></h4>

<h4><a href="#2">2. 实现方案</a></h4>

<h4><a href="#3">3. 数据库设计</a></h4>

<h5><a href="#3.1">3.1 预测数据量</a></h5>

<h5><a href="#3.2">3.2 按用户区间分表</a></h5>

<h5><a href="#3.3">3.3 定时任务数据归档</a></h5>

<h4><a href="#4">4. 缓存设计</a></h4>

<h5><a href="#4.1">4.1 怎么存</a></h5>

<h5><a href="#4.2">4.2 哪里存</a></h5>

<h5><a href="#4.3">4.3 缓存时间设置</a></h5>

<h1 id='1'>1 功能需求 </h1>


<p>最近，公司 app 需要增加一个新的功能是历史浏览记录的页面。</p>

<p>说道 “浏览历史”，大家应该都不陌生，跟浏览器的浏览历史功能基本一致。浏览历史的功能，仅限于用户浏览文章页面，
记录用户浏览过的文章，一方面方便用户下次再次查找，另一方面，也对我们将来对用户画像设计有所帮助。</p>

<p><img src="/images/posts/2020-03-15/history.png" title="历史记录" alt="历史记录图片" /></p>

<br/>




<h1 id='2'>2 实现方案</h1>


<p>为了记录用户浏览过的文章，我们只需要在用户访问文章详情的页面进行记录即可。</p>

<p>可以采用“异步方式”，将用户浏览过的文章记录。</p>

<p>但是目前用户上百万，每个用户一天浏览量不很清楚，但是随时间递增，这个记录一定很大；所以我们采用新建一个 RDS 实例，
专门用来存放历史记录。</p>

<p>面对庞大的数据量我们应该如何进行分表呢？</p>

<br/>




<h1 id='3'>3 数据库分表</h1>


<p>分表前，我们先思考影响这个表的有哪些变量？</p>

<p>一般都离不开 “时间” 和 “用户数”。
所以我们到底是要采用按“时间分表”还是“用户分表”呢？</p>

<br/>




<h2 id='3.1'>3.1 预测数据量</h2>


<p>我们可以到服务器上看文章详情请求数。</p>

<p><code>sh
cat 20200214.log | grep -E "articles/[0-9]+" | wc -l
</code>
将一天文件中的文章详情数统计出来，也可以通过脚本获取一个月的文件进行统计。</p>

<p>然后我们可以根据我们的分表方式来对数据进行预测：</p>

<p>1) <strong>通过时间-按月分表</strong></p>

<p>这时候我们需要统计一个月的请求数，大致推测一个月数据 600w 左右的浏览量。</p>

<p>2) <strong>通过用户-按用户id分表</strong></p>

<p>这个时候统计的时候要考虑 user_id 的值，通过脚本给了个平均预测，一个用户一个月 50*30 = 1500。
（较大较理想情况，因为我们就是要防止一些大用户的操作）</p>

<br/>


<p>根据数据和预测情况，我们可以简单看出其中的<strong>优缺点</strong>：</p>

<p>1) <strong>按月分表</strong></p>

<p><strong>优点</strong>：各个表数据量分布均匀</p>

<p><strong>缺点</strong>：</p>

<ol>
<li><p>由于需求要展示最近三个月的数据，那么读取数据的时候比较麻烦，需要将多个月表的数据 <code>union</code>
后，进行排序和分页，<code>union</code> 后的数据不走索引，况且分页效率有点低。</p></li>
<li><p>如果用户突然增长，月表数据可能突破限制。这时候只能再通过月表再次分表。</p></li>
</ol>


<p>2)<strong>按用户分表</strong></p>

<p><strong>优点</strong>：因为查询只针对个别用户可以充分利用索引，查询将十分简单高效，用户之间独立。</p>

<p><strong>缺点</strong>：</p>

<ol>
<li><p>由于每个用户属性不一样，阅读数不等，造成数据量不平均。</p></li>
<li><p>用户数量级庞大，分表数量庞大</p></li>
</ol>


<p>我们可以通过这两个优缺点进行取长补短，查询问题必须选用 “按用户分表”，那么如何解决用户表数量过多问题？</p>

<p>一般会有 <strong>按用户id取模分表</strong>，但是这种分表有缺点：</p>

<ol>
<li><p>数量再次增大，想要再进行扩展分表比较困难；</p></li>
<li><p>取模运算如果是通过 mysql，取模将无法走索引；</p></li>
</ol>


<br/>




<h2 id='3.2'>3.2 按用户区间分表</h2>


<p>所以我们可以选择 <strong>按用户区间分表</strong>，它呢补了上面取模的缺点，对后期单表中数据增大可以很方便继续再分；
例如我们 1w 个用户一张表，如果将来数据上亿，可以考虑变成 5k 个用户一张表，也就是在原来的基础上分成两张表，
通过脚本即可创建并迁移数据；</p>

<p>那么我们可以通过前面获得的访问量来确定大概要多少用户为一个区间；那么剩下一个问题了，当时间不短推移，
数据量还是很大，难道我们还要对再对用户分表吗？</p>

<p><code>php
$suffix = strval(floor($user_id / History::SPLIT_NUM));
$tablename = 'history'.$suffix;
$this-&gt;setTable($tablename);
</code></p>

<br/>




<h2 id='3.3'>3.3 定时任务数据归档</h2>


<p>不，因为只展示用户最近三个月数据，所以我们可以通过定时任务<strong>对旧数据进行归档处理</strong>。
这样我们的表就一直控制在那个数据级；唯一可能上升的情况就是平均用户浏览数增多，不过影响不大，前面已经说了，
再次对用户进行划分也很简单。</p>

<p>注意，由于数据一直在这张表，所以主键就不要再用自增 id 了，因为日积月累的数据可能撑爆最大整型。可以用 <strong>UUID</strong> 或其他字符串类型等；</p>

<br/>


<hr />

<p>就此存储方案就好了，剩下显示方案；</p>

<p>关于显示，我们可以在表增加查询需要的所以，直接从中获取到我们的数据，速度很快；但是还有一个问题，就是
文章查询问题。</p>

<p>由于每篇文章可能根据运营人员更改而变动，所以一开始我们保存在浏览历史表中的数据将是关联id，例如此处是文章id；</p>

<p>这时候一种方法就是通过 <code>join</code> 文章表进行显示，但是这样三个月浏览记录去 JOIN 文章，可想而知这是一个噩梦；</p>

<p>那么我们还有另一个办法，通过缓存减少对文章的查询，也舍弃 join 文章的方法。</p>

<br/>




<h1 id="4">4 缓存设计</h1>




<h2 id="4.1">4.1 怎么存</h2>


<p>如何设计缓存呢？和分表一样，我们也需要考虑几个变量。</p>

<p>这里我们要显示的是用户某一天查询的文章的分页，所以变量将是：</p>

<ul>
<li>用户id</li>
<li>日期</li>
<li>分页页码</li>
<li>每页数量</li>
</ul>


<p>如果用结果缓存，这个组合将非常巨大，并且 redis 存储不适合一次性存储超过 150kb 的数据；</p>

<p>所以我们可以通过 <strong>片段缓存</strong> 的方式来存储；</p>

<p>1）<strong>优点</strong>：多处地方都可以使用该片段缓存，缓存利用率高；</p>

<p>2）<strong>缺点</strong>：还是需要消耗一点点性能；</p>

<p>每个文章进行缓存，这样从性能上说，每次只是在浏览历史数据库将数据分页排序后取出，</p>

<p>对一页中的数据进行循环，每次循环直接内存中读取缓存即可。</p>

<p>最坏情况，循环每页数量去数据库搜索每篇文章（这个问题可以通过缓存存储触发位置来优化）。</p>

<br/>




<h2 id="4.2">4.2 哪里存</h2>


<p>通过从产品上分析，用户是大多都是从文章列表点击文章详情进入，所以，我们可以在文章详情处就设置这个
片段缓存；当然，浏览历史的地方也要，只是浏览历史处命中率就变得非常高了，几乎已经先在文章详情处
进行了存储，所以循环取文章就变得非常少了；</p>

<br/>




<h2 id='4.3'>4.3 缓存时间设置</h2>


<p>TODO</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Laravel 的数据库事务源码分析]]></title>
    <link href="https://TsaiKoga.github.com/blog/2019/05/09/laravel-de-shu-ju-ku-shi-wu-yuan-ma-fen-xi/"/>
    <updated>2019-05-09T17:54:00+08:00</updated>
    <id>https://TsaiKoga.github.com/blog/2019/05/09/laravel-de-shu-ju-ku-shi-wu-yuan-ma-fen-xi</id>
    <content type="html"><![CDATA[<p>在批发档口记账 app 中，由于用户数量越来越多，有几个老客户了反馈单据丢失的问题；</p>

<p><strong>打个比方：</strong></p>

<p>我们开单会去创建开单表 <code>order_create</code>，开单表会生成详情 <code>order_create_goods_sku</code>，然后生成欠货表 <code>order_owe_goods_sku</code>；</p>

<p>然后接着是发货请求，会生成发货主表 <code>order_delivery</code> 和 发货详情 <code>order_delivery_goods_sku</code>；发货会生成库存变动记录；</p>

<br>


<p>这时候已经有了开单和开单详情，证明已经开单请求成功；</p>

<p>但是库存变动记录有，发货单却找不到；这时候我去查找了日志，发现也有发货请求；
然而通过库存变动记录找不到相应的发货单了，这是怎么回事，难道是被人撤销了吗？</p>

<br>


<p>全局查找了整个项目，没有强删除的接口，难道是代码有问题？</p>

<p>那么我开始定位代码，因为事务包裹着整个"发货的创建流程" 和 &ldquo;库存变动记录的生成"；
所以要么就全部回滚，那么不太可能是回滚问题？</p>

<br>


<h1>跟踪数据库操作：</h1>

<hr />

<p>那是不是有人从数据库删除了？</p>

<p>我写了个触发器，只要有人强删记录就会记录到一张跟踪表：</p>

<p>1.首先创建跟踪表：
<code>sql
CREATE TABLE `juniu_track_delivery` (
  `track_delivery_id` int(11) NOT NULL AUTO_INCREMENT COMMENT '订单ID',
  `order_delivery_id` int(11) NOT NULL DEFAULT 0 COMMENT  '发货单ID',
  `order_id` int(11) NOT NULL DEFAULT 0 COMMENT '订单ID',
  `deliver_timestamp` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '发货时间',
  `deleted_at` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '被删除时间',
  `deleted_by` varchar(50) DEFAULT '' COMMENT '删除的用户ip',
  PRIMARY KEY (`track_delivery_id`)
  ) ENGINE=InnoDB AUTO_INCREMENT=0 DEFAULT CHARSET=utf8;
</code></p>

<br>


<p>2.建立触发器 <code>track_delete_delivery</code> 跟踪：
``` sql
DELIMITER //
CREATE TRIGGER track_delete_delivery
AFTER DELETE
   ON juniu_order_delivery FOR EACH ROW
BEGIN
   DECLARE vUser varchar(50);
   &mdash; Find username of person performing the DELETE into table
   SELECT USER() INTO vUser;
   &mdash; Insert record into audit table
   INSERT INTO juniu_track_delivery
   ( order_delivery_id,</p>

<pre><code> order_id,
 deliver_timestamp,
 deleted_at,
 deleted_by)
</code></pre>

<p>   VALUES
   ( OLD.order_delivery_id,</p>

<pre><code> OLD.order_id,
 OLD.deliver_timestamp,
 SYSDATE(),
 vUser );
</code></pre>

<p>END; //
DELIMITER ;
```
观察一段时间，仍有数据丢失，但是并没有跟踪到，初步判断不是人为删除；</p>

<br>


<h1>Mysql 事务特性：</h1>

<hr />

<p>Mysql 事务具有四大特性：A（原子性）C（一致性）I（隔离性）D（持久性）；</p>

<p>事务有五个级别：</p>

<blockquote><ol>
<li><p>TRANSACTION_NONE  不使用事务。</p></li>
<li><p>TRANSACTION_READ_UNCOMMITTED  未提交读，允许脏读。</p></li>
<li><p>TRANSACTION_READ_COMMITTED  提交读，防止脏读，最常用的隔离级别,并且是大多数数据库的默认隔离级别</p></li>
<li><p>TRANSACTION_REPEATABLE_READ  重复读，可以防止脏读和不可重复读，</p></li>
<li><p>TRANSACTION_SERIALIZABLE  序列化，可以防止脏读，不可重复读取和幻读，（事务串行化）会降低数据库的效率</p></li>
</ol>
</blockquote>

<p>1、<strong>脏读：</strong> 事务A读取了事务B更新的数据，然后B回滚操作，那么A读取到的数据是脏数据</p>

<p>2、<strong>不可重复读：</strong> 事务 A 多次读取同一数据，事务 B 在事务A多次读取的过程中，对数据作了更新并提交，导致事务A多次读取同一数据时，结果不一致。</p>

<p>3、<strong>幻读：</strong> 事务 A 修改了表中所有数据，但是事务 B 插入了一条数据，当事务 A 查询数据发现还有一条记录没有改过来，就好像发生了幻觉一样，这就叫幻读。</p>

<p><strong>小结：</strong> 不可重复读的和幻读很容易混淆，不可重复读侧重于修改，幻读侧重于新增或删除。解决不可重复读的问题只需锁住满足条件的行，解决幻读需要锁表</p>

<br>


<p>最后我们来查看一下 Mysql 数据库事务配置，看是不是事务配置错误：</p>

<p>``` sql
select @@tx_isolation;</p>

<p>select @@session.tx_isolation;</p>

<p>select @@global.tx_isolation;
```</p>

<p>显示结果都是 <code>READ-COMMITTED</code></p>

<br>


<h1>查看事务源码：</h1>

<hr />

<p>重新回到回滚代码，既然都被包裹起来，但是又回滚不成功，我开始查阅 Laravel API，因为我怕会是框架有问题，</p>

<p>找到相应的 laravel 版本 5.1: <a href="https://laravel.com/api/5.1/">https://laravel.com/api/5.1/</a></p>

<p>寻找 <code>transaction</code>，显示有</p>

<blockquote><p>Illuminate\Database\ConnectionInterface::transaction</p>

<p>Illuminate\Database\Connection::transaction</p></blockquote>

<p>接口定义的是规则，所以我看数据库的连接类 <code>Illuminate\Database\Connection::transaction</code></p>

<p>这里有几个我们要看的方法：
``` php
mixed transaction(Closure $callback)</p>

<p>void beginTransaction()</p>

<p>void commit()</p>

<p>void rollBack()
```
点击右边行号，可以跳转到 5.1 源代码文件：</p>

<p>先查看 <code>transaction</code> 方法，此处参数是一个闭包，我们项目中使用的不是这种写法：
```php</p>

<pre><code>public function transaction(Closure $callback)
{
    $this-&gt;beginTransaction();
    // We'll simply execute the given callback within a try / catch block
    // and if we catch any exception we can rollback the transaction
    // so that none of the changes are persisted to the database.
    try {
        $result = $callback($this);
        $this-&gt;commit();
    }
    // If we catch an exception, we will roll back so nothing gets messed
    // up in the database. Then we'll re-throw the exception so it can
    // be handled how the developer sees fit for their applications.
    catch (Exception $e) {
        $this-&gt;rollBack();
        throw $e;
    } catch (Throwable $e) {
        $this-&gt;rollBack();
        throw $e;
    }
    return $result;
}
</code></pre>

<p><code>
整个事务用</code>try catch<code>包裹住，如果失败，直接抛出异常，并且回滚，</code>transactions``` 自然减为 0；</p>

<p>然后我看看我们项目中所使用的方法，通过<code>DB::beginTransaction();</code>
开始，然后中途出错，直接写 <code>DB::rollback()</code> ，
然后 <code>return</code> 返回，最后成功提交 <code>DB::commit()</code>。</p>

<p>先看看 <code>beginTransaction()</code> 的源码:
``` php</p>

<pre><code>public function beginTransaction()
{
    if ($this-&gt;transactions == 0) {
        try {
            $this-&gt;pdo-&gt;beginTransaction();
        } catch (Exception $e) {
            if ($this-&gt;causedByLostConnection($e)) {
                $this-&gt;reconnect();
                $this-&gt;pdo-&gt;beginTransaction();
            } else {
                throw $e;
            }
        }
    } elseif ($this-&gt;transactions &gt;= 1 &amp;&amp; $this-&gt;queryGrammar-&gt;supportsSavepoints()) {
        $this-&gt;pdo-&gt;exec(
            $this-&gt;queryGrammar-&gt;compileSavepoint('trans'.($this-&gt;transactions + 1))
        );
    }
    $this-&gt;transactions++;
    $this-&gt;fireConnectionEvent('beganTransaction');
}
</code></pre>

<p>```</p>

<p>可以看到，这里的 <code>transactions</code> 属性记录多少层事务，通过 <code>try catch</code> 包裹一个事务开始，如果失败，重新尝试连接，并将<code>transaction + 1</code>；</p>

<br>


<p>再看 <code>rollback()</code>
``` php</p>

<pre><code>public function rollBack()
{
    if ($this-&gt;transactions == 1) {
        $this-&gt;pdo-&gt;rollBack();
    } elseif ($this-&gt;transactions &gt; 1 &amp;&amp; $this-&gt;queryGrammar-&gt;supportsSavepoints()) {
        $this-&gt;pdo-&gt;exec(
            $this-&gt;queryGrammar-&gt;compileSavepointRollBack('trans'.$this-&gt;transactions)
        );
    }
    $this-&gt;transactions = max(0, $this-&gt;transactions - 1);
    $this-&gt;fireConnectionEvent('rollingBack');
}
</code></pre>

<p>```
这里 <strong>只有在 transactions 为 1 的时候，才去 rollback 整个事务</strong>；</p>

<br>


<p>再来看看 <code>commit()</code></p>

<p>``` php</p>

<pre><code>public function commit()
{
    if ($this-&gt;transactions == 1) {
        $this-&gt;pdo-&gt;commit();
    }
    $this-&gt;transactions--;
    $this-&gt;fireConnectionEvent('committed');
}
</code></pre>

<p><code>
也是只有当</code>transactions == 1<code>的时候才会</code>commit``` 整个事务；</p>

<p>不像 <code>transaction</code> 闭包那样，有整个 <code>try catch</code> 包裹，这里每一个步骤都要自己控制，</p>

<p>项目中事务的写法经常是：
``` php
DB::beginTransaction();</p>

<p>$res = OrderDelivery::insert([&hellip;]);
if (!$res) {</p>

<pre><code>DB::rollback();
return $this-&gt;fail(-1, '创建失败');
</code></pre>

<p>}
$delivery_skus = json_decode($color_size_matrix, true);
OrderDeliveryGoodsSku::insert($delivery_skus);
&hellip;
&hellip;
DB::commit();</p>

<p>```</p>

<p>那么就有问题了，如果某个步骤出错，但是因为没有抛出异常，因为查看 API 像 <code>insert</code> 失败会返回 <code>false</code>；</p>

<p>需要人工判断返回值去 <code>rollback</code>，如果没有判断，也没有 <code>rollback</code>，这样 <code>transactions</code> 就没有减到 1；
这就有可能跑到 <code>commit</code> 那里去给 <code>transactions - 1</code> 了；</p>

<h1>结论：</h1>

<hr />

<p>所以较好的方法还是，</p>

<ol>
<li><code>transaction</code> 带闭包参数；</li>
<li><code>beginTransaction + try catch</code></li>
</ol>


<p>用 <code>beginTransaction + try catch</code>，只要有问题，直接到 <code>catch</code> 那做一次回滚即可，不用担心哪里忘了 <code>rollback</code>；</p>

<p>示例：
``` php
DB::beginTrasaction();
try {</p>

<pre><code>OrderModificationGoodsSku::insertGetId();
OrderOweGoodsSku::where()-&gt;update();
DB::commit();
</code></pre>

<p>} catch (\Throwable $e) {
    // For php 7</p>

<pre><code>DB::rollback();
//throw $e;
Log::error($e-&gt;getMessage());
return $this-&gt;fail(-1, "创建失败");
</code></pre>

<p>} catch(\Exception $e) {</p>

<pre><code>// For php5
DB::rollback();
//throw $e;
Log::error($e-&gt;getMessage());
return $this-&gt;fail(-1, "创建失败");
</code></pre>

<p>}</p>

<p>```</p>
]]></content>
  </entry>
  
</feed>
